export declare const ArmApiVersion = "?api-version=2017-03-01";
/**
 * When making a change to the ItemDataModel, please update this version.
 * The latest version is "1.0.0".
 */
export declare const Version: {
    MajorVersion: number;
    MinorVersion: number;
    BuildVersion: number;
};
/**
 * The following is a list of resource types that use IEC formatting.
 */
export declare const ResourcesUsingIEC: ReadonlyArray<string>;
export declare const enum HostingEnvironment {
    Localhost = 0,
    ExtensionIframe = 1,
    PortalShell = 2,
    UnitTests = 3
}
export declare const MdmMetricIdPrefix = "mdm/";
/**
 * Determine which backend to query.
 */
export declare const enum DataSource {
    None = 0,
    Mdm = 1,
    DraftKusto = 2,
    AILive = 3
}
export declare const enum BackendProviderType {
    None = 0,
    ARM = 1,
    Draft = 2,
    AILive = 3,
    Legacy = 4
}
export declare const enum SortOrder {
    Unsorted = 0,
    Ascending = 1,
    Descending = 2
}
export declare const enum MissingDataLineStyle {
    None = 0,
    Transparent = 1,
    DottedLine = 2,
    Disappearing = 3
}
export declare const enum MissingDataFillingType {
    NoFill = 0,
    FillWithZero = 1,
    FillWithValueInThePath = 2,
    FillWithLastValue = 3
}
export declare const enum MetricSeriesType {
    /** falsy undefined */
    None = 0,
    /** Standard series */
    Standard = 1,
    /** a prior period metric series */
    PriorPeriod = 2,
    /** a total metric series */
    Total = 3,
    /** a other */
    Others = 4
}
export declare const DraftQueryEndpointSubpath: ReadonlyStringMap<string>;
export declare const enum AIOptionTypes {
    Valid = 1,
    Error = 2,
    Text = 3
}
export declare const ResourceTypes: ReadonlyStringMap<string>;
/**
 * Storage [microsoft.storage/storageaccounts] kind to namespace map
 */
export declare const storageKindToNamespace: ReadonlyStringMap<string>;
/**
 * Classic storage [microsoft.classicstorage/storageaccounts] kind to namespace map
 */
export declare const classicStorageKindToNamespace: ReadonlyStringMap<string>;
export declare const DraftDEMO_APPAppId = "DEMO_APP";
export declare const TypeNames: ReadonlyStringMap<string>;
/**
 * Determine the state of the threhsold bundle.
 * Defer is respolved in 2 cases:
 * 1. All threshold skin and store files are loaded, initialized in the ServiceContainer and ready to use.
 * 2. Threshold skin and store files are not required.
 */
export declare const thresholdBundleLoadedDefer: Q.Deferred<void>;
export declare const AIMetricKind: ReadonlyStringMap<string>;
/**
 * These are "special" namespaces that aren't ever actually returned by the backend.
 *  Used by the UI to show "Classic" metrics for some RPs like AI / Storage / VMs.
 */
export declare const AILiveNamespace = "microsoft.insights/components/live";
export declare const AIKustoNamespace = "microsoft.insights/components/kusto";
export declare const ClassicCosmosDBNamespace = "microsoft.documentdb/databaseaccounts/classic";
export declare const VMGuestSuffix = "/guest";
export declare const MdmClassicVMMetrics: ReadonlyArray<string>;
export declare const NamespaceOptionType: ReadonlyStringMap<string>;
/**
 * Internal representation of user data state.
 */
export declare const enum UserDataStatus {
    None = 0,
    HasData = 1,
    NoData = 2,
    ErrorRetrievingData = 3,
    NoMetrics = 4,
    AuthorizationTokenFailed = 5,
    Throttled = 6,
    TooManyDataPoint = 7,
    GrainNotSupported = 8,
    NoCommonGrain = 9,
    Invisible = 10
}
/**
 * List of relative positions as specified by d3.
 */
export declare const enum Positions {
    Top = 1,
    Bottom = 2,
    Left = 3,
    Right = 4
}
/** Enums indicating how API consumer would like the QueryProvider to fetch data. The following is the default based on itemDataModel
 *     1. For non-segmented data model, we will just fetch series, summary
 *     2. For segmented data model, we will fetch segmented-series, segmented-summary.
 *  You can do so via specifying bit-wiseable enum value when calling to IQueryProvider.executeQuery parameter fetchCriteriaOverride.
 *  e.g  When QueryProvider is used by Filter blade to get the facet values, we just want to fetch the facet value (ie SummarySegmented)
 */
export declare const enum FetchDataKind {
    None = 0,
    Series = 1,
    Summary = 2,
    SeriesSegmented = 4,
    SummarySegmented = 8
}
/**
 * Internal representation for refresh reason
 */
export declare const enum RefreshReason {
    None = 0,
    /** Manual refresh was requested by the user. */
    Manual = 1,
    /** Scheduled auto refresh was requested. */
    Auto = 2,
    /** Refresh occurred, generally internal code might call _onRefresh itself, but was not triggered by the refresh manager. */
    Internal = 3,
    /** refresh occurred due to chart resizing */
    Resize = 4
}
/**
 * Use string for telemetry
 */
export declare const RefreshTypeConst: ReadonlyArray<string>;
/**
 * List of supported axis values.
 */
export declare const enum AxisType {
    Number = 1,
    DateLocal = 2,
    DateUTC = 3
}
/**
 * List of supported grid types.
 */
export declare const enum GridType {
    SingleMetricGrid = 0,
    MultiMetricGrid = 1,
    RawGrid = 2,
    NotSuportedOrNonGrid = 3
}
/**
 * List of supported chart types.
 * WARNING: when this is updated, please also update the mapping in Telemetry.ts
 */
export declare const enum ChartTypes {
    Bar = 1,
    Line = 2,
    Area = 3,
    Grid = 4,
    Scatter = 7
}
export declare const enum Aggregation {
    None = 0,
    Sum = 1,
    Min = 2,
    Max = 3,
    Avg = 4,
    Unique = 5,
    Percentile = 6,
    Count = 7,
    Last = 8
}
export declare const AggregationString: ReadonlyNumberMap<string>;
export declare const enum MetricType {
    None = 0,
    Standard = 1,
    Custom = 2
}
export declare const enum MetricUnit {
    None = 0,
    Count = 1,
    Bytes = 2,
    CountPerSecond = 3,
    BytesPerSecond = 4,
    Percent = 5,
    Seconds = 6,
    MilliSeconds = 7
}
export declare const enum AxisPinningOptions {
    Default = 1,
    Custom = 2
}
export declare enum TitleKind {
    None = 0,
    Auto = 1,
    Custom = 2
}
export declare const enum GroupingKind {
    None = 0,
    ByDimension = 1,
    ByMetric = 2
}
export declare type HttpMethodType = "POST" | "GET";
export declare const QueryNames: ReadonlyStringMap<string>;
export declare const enum HttpStatusCode {
    Continue = 100,
    SwitchingProtocols = 101,
    Ok = 200,
    Created = 201,
    Accepted = 202,
    NonAuthoritativeInformation = 203,
    NoContent = 204,
    ResetContent = 205,
    PartialContent = 206,
    Ambiguous = 300,
    MultipleChoices = 300,
    Moved = 301,
    MovedPermanently = 301,
    Found = 302,
    Redirect = 302,
    RedirectMethod = 303,
    SeeOther = 303,
    NotModified = 304,
    UseProxy = 305,
    Unused = 306,
    RedirectKeepVerb = 307,
    TemporaryRedirect = 307,
    BadRequest = 400,
    Unauthorized = 401,
    PaymentRequired = 402,
    Forbidden = 403,
    NotFound = 404,
    MethodNotAllowed = 405,
    NotAcceptable = 406,
    ProxyAuthenticationRequired = 407,
    RequestTimeout = 408,
    Conflict = 409,
    Gone = 410,
    LengthRequired = 411,
    PreconditionFailed = 412,
    RequestEntityTooLarge = 413,
    RequestUriTooLong = 414,
    UnsupportedMediaType = 415,
    RequestedRangeNotSatisfiable = 416,
    ExpectationFailed = 417,
    UpgradeRequired = 426,
    Throttled = 429,
    InternalServerError = 500,
    NotImplemented = 501,
    BadGateway = 502,
    ServiceUnavailable = 503,
    GatewayTimeout = 504,
    HttpVersionNotSupported = 505
}
export declare const DefaultChartDurationInDays = 1;
export declare enum VisibilityState {
    None = "None",
    Hidden = "Hidden",
    Visible = "Visible"
}
export declare enum Result {
    None = 0,
    Succeed = 1,
    Fail = 2,
    PartialSucceed = 3
}
/** The threshold for the number of unique dimension values */
export declare const UniqueDimensionValueThreshold = 10;
/**
 * Minimum pixels for chart visual.
 */
export declare const enum ChartVisualPixels {
    /**
     * .panel-center.padding-left/right
     */
    PanelCenterPadding = 25,
    /**
     * Area chart: Minimum pixels per aggregation point, 3px.
     */
    AreaPerAggMin = 3,
    /**
     * Bar chart: Minimum width for bar chart bars, 10px.
     */
    BarWidthPerPointMin = 5,
    /**
     * Bar chart: Default size for bar chart bars, 10px.
     */
    BarWidthDefault = 10,
    /**
     * Bar chart: Minimum separation between bar chart bars, 3px.
     */
    BarSeparationWidthMin = 3,
    /**
     * Line chart with the dots: Minimum pixels per aggregation point, 7px.
     */
    DotLinePerPointMin = 7,
    /**
     * Line chart: Minimum pixels per aggregation point, 3px.
     */
    LinePerAggMin = 3,
    /**
     * Line chart with the dots: Minimum pixels for diameter circle for each dot, 3px.
     */
    LineDiameterPerDotMin = 3,
    /**
     * Left margin for the plottable area.
     */
    PlottableLeftAreaMargin = 25,
    /**
     * Stroke width for line chart for non missing values.
     */
    LineStrokeWidth = 2,
    /**
     * Line chart stroke opacity or missing values.
     */
    LineStrokeOpacityForMissing = 0.5,
    /**
     * Padding for the Chart top, in pixels as a number.
     */
    PaddingTop = 15,
    /**
     * Bottom padding for the Chart bottom, in pixels as a number.
     */
    PaddingBottom = 25,
    /**
     * Left padding for the Chart left, in pixels as a number.
     */
    PaddingLeft = 25,
    /**
     * Right padding for the Chart right, in pixels as a number.
     */
    PaddingRight = 5,
    /**
     * The width for legend.
     */
    LegendWidth = 120,
    LegendWidthSmall = 100,
    /**
     * The height for legend.
     */
    LegendHeight = 50,
    LegendHeightSmall = 30,
    /**
     * Padding for the legend's top when legend is on the right.
     */
    LegendPaddingTop = 5,
    /**
     * Minimum height for yAxis's tick.
     */
    yAxisTickHeightMin = 30,
    /** Leaves some pixles on the right of the chart for the handle */
    ThresholdHandleMargin = 30,
    MaximumDataPointsPerChart = 10000,
    LiveMetricMaximumDataPointsCount = 60,
    DefaultMaxBuckets = 144,
    AiChartMinHeight = 300,
    QueryBuilderHeight = 68,
    ChartCommandBarHeight = 53,
    ChartTitleHeight = 26,
    AiChartMarginTop = 20,
    AiChartSelectionBorder = 2,
    DefaultMEChartHeight = 300,
    DefaultMEChartWidth = 700
}
export declare const enum FilterType {
    Branch = 0,
    Leaf = 1
}
export declare const enum FilterComparisonOperator {
    Equal = 0,
    NotEqual = 1,
    LessThan = 2,
    GreaterThan = 3
}
export declare const enum FilterLogicalOperator {
    And = 0,
    Or = 1
}
export declare const Colors: {
    defaultSeriesColor: string;
    palettes: {
        "blue": string[];
        "grouped": string[];
        "multiColor": string[];
        "fail": string[];
    };
};
export declare const NotSupportedDimension = "does not support requested dimension";
export declare const SupportedOnesAre = "supported ones are:";
export declare const DynamicThreshold: {
    skinName: string;
    className: string;
    upperLineClassName: string;
    bottomLineClassName: string;
    anomalyLineClassName: string;
    circleClassName: string;
    alertCircleClassName: string;
    squareClassName: string;
    eventNamePrefix: string;
    apiVersion: string;
};
