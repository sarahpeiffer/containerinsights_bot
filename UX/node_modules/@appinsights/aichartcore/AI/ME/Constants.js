"use strict";
// Note: This file should have no dependencies on other files.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArmApiVersion = "?api-version=2017-03-01";
/**
 * When making a change to the ItemDataModel, please update this version.
 * The latest version is "1.0.0".
 */
exports.Version = {
    MajorVersion: 1,
    MinorVersion: 0,
    BuildVersion: 0,
};
/**
 * The following is a list of resource types that use IEC formatting.
 */
exports.ResourcesUsingIEC = [
    "microsoft.dbformysql/servers",
    "microsoft.dbforpostgresql/servers",
    "microsoft.documentdb/databaseaccounts",
    "microsoft.sql/servers/elasticpools",
    "microsoft.storage/storageaccounts",
    "microsoft.classicstorage/storageaccounts",
    "microsoft.netapp/netappacounts/capacitypools",
    "microsoft.netapp/netappacounts/capacitypools/volumes",
];
exports.MdmMetricIdPrefix = "mdm/";
exports.DraftQueryEndpointSubpath = {
    Metrics: "/metrics",
    Metadata: "/metrics/metadata",
    Facets: "/events/$all",
};
exports.ResourceTypes = {
    AnalysisServices: "microsoft.analysisservices/servers",
    ApiManagmentService: "microsoft.apimanagement/service",
    ApplicationGateways: "microsoft.network/applicationgateways",
    ApplicationInsights: "microsoft.insights/components",
    AppServicePlans: "microsoft.web/serverfarms",
    AppServices: "microsoft.web/sites",
    AutomationAccounts: "microsoft.automation/automationaccounts",
    AutoscaleSettings: "microsoft.insights/autoscalesettings",
    DataboxEdge: "microsoft.databoxedge/databoxedgedevices",
    BatchAccounts: "microsoft.batch/batchaccounts",
    ClassicCloudServices: "microsoft.classiccompute/domainnames",
    ClassicComputeVirtualMachines: "microsoft.classiccompute/virtualmachines",
    CloudSimple: "cloudsimple.privatecloudiaas/virtualmachines",
    CognitiveServices: "microsoft.cognitiveservices/accounts",
    Connections: "microsoft.network/connections",
    ContainerGroups: "microsoft.containerinstance/containergroups",
    ContainerRegistries: "microsoft.containerregistry/registries",
    ContainerServicesManaged: "microsoft.containerservice/managedclusters",
    CustomerInsights: "microsoft.customerinsights/hubs",
    DataFactories: "microsoft.datafactory/datafactories",
    DataFactoriesv2: "microsoft.datafactory/factories",
    DataLakeAnalytics: "microsoft.datalakeanalytics/accounts",
    DataLakeStore: "microsoft.datalakestore/accounts",
    DBForMySql: "microsoft.dbformysql/servers",
    DeviceProvisioningServices: "microsoft.devices/provisioningservices",
    DNSZones: "microsoft.network/dnszones",
    CosmosDB: "microsoft.documentdb/databaseaccounts",
    EventGridTopics: "microsoft.eventgrid/topics",
    EventHubs: "microsoft.eventhub/namespaces",
    EventHubsClusters: "microsoft.eventhub/clusters",
    ExpressRouteCircuits: "microsoft.network/expressroutecircuits",
    ExpressRoutePorts: "microsoft.network/expressrouteports",
    Firewall: "microsoft.network/azurefirewalls",
    FrontDoor: "microsoft.network/frontdoors",
    HDInsights: "microsoft.hdinsight/clusters",
    IoTHub: "microsoft.devices/iothubs",
    IotSpaces: "microsoft.iotspaces/graph",
    KeyVault: "microsoft.keyvault/vaults",
    KustoClusters: "microsoft.kusto/clusters",
    LoadBalancers: "microsoft.network/loadbalancers",
    LogAnalytics: "microsoft.operationalinsights/workspaces",
    LogicApps: "microsoft.logic/workflows",
    MariaDB: "microsoft.dbformariadb/servers",
    MediaServices: "microsoft.media/mediaservices/streamingendpoints",
    MultiRolePools: "microsoft.web/hostingenvironments/multirolepools",
    NetworkInterfaces: "microsoft.network/networkinterfaces",
    NetAppCapacityPools: "microsoft.netapp/netappaccounts/capacitypools",
    NetAppVolumes: "microsoft.netapp/netappaccounts/capacitypools/volumes",
    NetworkWatcher: "microsoft.network/networkwatchers",
    NotificationHubs: "microsoft.notificationhubs/namespaces/notificationhubs",
    PostgreSQLServers: "microsoft.dbforpostgresql/servers",
    PowerBIDedicatedCapacities: "microsoft.powerbidedicated/capacities",
    PublicIPAddresses: "microsoft.network/publicipaddresses",
    RedisCaches: "microsoft.cache/redis",
    Relay: "microsoft.relay/namespaces",
    SearchServices: "microsoft.search/searchservices",
    ServiceBus: "microsoft.servicebus/namespaces",
    ServiceFabricMesh: "microsoft.servicefabricmesh/applications",
    SignalRService: "microsoft.signalrservice/signalr",
    Solutions: "microsoft.operationsmanagement/solutions",
    SqlManaged: "microsoft.sql/managedinstances",
    SqlServersDatabases: "microsoft.sql/servers/databases",
    SqlServersElasticPools: "microsoft.sql/servers/elasticpools",
    Storage: "microsoft.storage/storageaccounts",
    StorageClassic: "microsoft.classicstorage/storageaccounts",
    StorageSync: "microsoft.storagesync/storagesyncservices",
    StreamAnalyticsJobs: "microsoft.streamanalytics/streamingjobs",
    TimeseriesInsightsEnviroments: "microsoft.timeseriesinsights/environments",
    TrafficManagerProfiles: "microsoft.network/trafficmanagerprofiles",
    VirtualMachines: "microsoft.compute/virtualmachines",
    VirtualMachinesScaleSets: "microsoft.compute/virtualmachinescalesets",
    VirtualNetworkGateWays: "microsoft.network/virtualnetworkgateways",
    WebsitesSlots: "microsoft.web/sites/slots",
    WebTests: "microsoft.insights/webtests",
    WorkerPools: "microsoft.web/hostingenvironments/workerpools",
};
/**
 * Storage [microsoft.storage/storageaccounts] kind to namespace map
 */
exports.storageKindToNamespace = {
    "account": "microsoft.storage/storageaccounts",
    "blob": "microsoft.storage/storageaccounts/blobservices",
    "file": "microsoft.storage/storageaccounts/fileservices",
    "queue": "microsoft.storage/storageaccounts/queueservices",
    "table": "microsoft.storage/storageaccounts/tableservices",
    "legacyBlob": "microsoft.storage/storageaccounts/services/blob",
    "legacyFile": "microsoft.storage/storageaccounts/services/file",
    "legacyQueue": "microsoft.storage/storageaccounts/services/queue",
    "legacyTable": "microsoft.storage/storageaccounts/services/table",
};
/**
 * Classic storage [microsoft.classicstorage/storageaccounts] kind to namespace map
 */
exports.classicStorageKindToNamespace = {
    "legacyBlob": "microsoft.classicstorage/storageaccounts/services/blob",
    "legacyFile": "microsoft.classicstorage/storageaccounts/services/file",
    "legacyQueue": "microsoft.classicstorage/storageaccounts/services/queue",
    "legacyTable": "microsoft.classicstorage/storageaccounts/services/table",
};
exports.DraftDEMO_APPAppId = "DEMO_APP";
exports.TypeNames = {
    TimeContextStore: "TimeContextStore",
    TimeContext: "TimeContext",
    AzureAuthorizationToken: "AzureAuthorizationToken",
    SelectedSubscriptions: "SelectedSubscriptions",
    ResourceId: "ResourceId",
    SessionId: "SessionId",
    AppId: "AppId",
    Location: "Location",
    EnvironmentName: "EnvironmentName",
    EnableSaving: "EnableSaving",
    IDraftConfigProvider: "IDraftConfigProvider",
    ITelemetryService: "ITelemetryService",
    Container: "Container",
    IAiChartInteractions: "IAiChartInteractions",
    LocalizationService: "ILocalizationService",
    CommunicationChannel: "CommunicationChannel",
    InteractionsStore: "InteractionsStore",
    ExportStore: "ExportStore",
    HostingEnvironment: "HostingEnvironment",
    DefaultResourceGroup: "DefaultResourceGroup",
    ShowNavigateToDepreciatedMetricBladeButton: "ShowNavigateToDepreciatedMetricBladeButton",
    SimpleThresholdSkin: "SimpleThresholdSkin",
    SimpleThresholdStore: "SimpleThresholdStore",
    DynamicThresholdSkin: "DynamicThresholdSkin",
    DynamicThresholdStore: "DynamicThresholdStore",
};
/**
 * Determine the state of the threhsold bundle.
 * Defer is respolved in 2 cases:
 * 1. All threshold skin and store files are loaded, initialized in the ServiceContainer and ready to use.
 * 2. Threshold skin and store files are not required.
 */
exports.thresholdBundleLoadedDefer = Q.defer();
exports.AIMetricKind = {
    Live: "Live",
    Historical: "Historical",
};
/**
 * These are "special" namespaces that aren't ever actually returned by the backend.
 *  Used by the UI to show "Classic" metrics for some RPs like AI / Storage / VMs.
 */
exports.AILiveNamespace = "microsoft.insights/components/live";
exports.AIKustoNamespace = "microsoft.insights/components/kusto";
exports.ClassicCosmosDBNamespace = "microsoft.documentdb/databaseaccounts/classic";
exports.VMGuestSuffix = "/guest";
exports.MdmClassicVMMetrics = [
    "percentage cpu",
    "network in",
    "network out",
    "disk read bytes/sec",
    "disk write bytes/sec",
    "disk read operations/sec",
    "disk write operations/sec",
];
exports.NamespaceOptionType = {
    CategoryLabel: "Label",
    Standard: "Standard",
    Custom: "Custom",
};
/**
 * Use string for telemetry
 */
exports.RefreshTypeConst = ["None", "Manual", "Auto", "Internal", "Resize"];
/* Keep this map in sync with the enum above */
exports.AggregationString = {
    0: "None",
    1: "Sum",
    2: "Min",
    3: "Max",
    4: "Avg",
    5: "Unique",
    6: "Percentile",
    7: "Count",
    8: "Last",
};
var TitleKind;
(function (TitleKind) {
    TitleKind[TitleKind["None"] = 0] = "None";
    TitleKind[TitleKind["Auto"] = 1] = "Auto";
    TitleKind[TitleKind["Custom"] = 2] = "Custom";
})(TitleKind = exports.TitleKind || (exports.TitleKind = {}));
exports.QueryNames = {
    GetToken: "GetToken",
    GetResourceMetadataQuery: "GetResourceMetadataQuery",
    GetSubscriptions: "GetSubscriptions",
    GetSubscription: "GetSubscription",
    GetResourceGroups: "GetResourceGroups",
    GetResources: "GetResources",
    GetResourcesArmCache: "GetResourcesArmCache",
    SearchResources: "SearchResources",
    ArmBatch: "ArmBatch",
    DraftMetadata: "DraftMetadataQuery",
    DraftRequestSeriesAndSummary: "DraftRequestSeriesAndSummaryQuery",
    DraftRequestSeriesAndSummaryPrior: "DraftRequestSeriesAndSummaryQuery_Prior",
    DraftRequestSummary: "DraftRequestSummaryQuery",
    DraftRequestSummaryPrior: "DraftRequestSummaryQuery_Prior",
    DraftFetchMetricSeriesAndSummaryBatchingQuery: "_fetchMetricSeriesAndSummaryBatchingQuery",
    DynamicThreshold: "DynamicThreshold",
    QuickPulseQuery: "QuickPulseQuery",
    LegacyMetadata: "LegacyProvider_Metadata",
    LegacyMetricResult: "LegacyProvider_MetricResult",
    MDMV2Namespace: "MDMV2_Namespace",
    MDMV2Metadata: "MDMV2_Metadata",
    MDMV2MetricResult: "MDMV2_MetricResult",
    MDMV2DimensionDefinition: "MDMV2_DimensionDefinition",
    MDMV2DimensionValue: "MDMV2_DimensionValue",
    WebsiteGetProperties: "Website_GetProperties",
    CloudServiceRoles: "AppServicePlanProvider_Roles",
};
/* Variable signifying the default duration of a chart */
exports.DefaultChartDurationInDays = 1;
var VisibilityState;
(function (VisibilityState) {
    VisibilityState["None"] = "None";
    VisibilityState["Hidden"] = "Hidden";
    VisibilityState["Visible"] = "Visible";
})(VisibilityState = exports.VisibilityState || (exports.VisibilityState = {}));
var Result;
(function (Result) {
    Result[Result["None"] = 0] = "None";
    Result[Result["Succeed"] = 1] = "Succeed";
    Result[Result["Fail"] = 2] = "Fail";
    Result[Result["PartialSucceed"] = 3] = "PartialSucceed";
})(Result = exports.Result || (exports.Result = {}));
/** The threshold for the number of unique dimension values */
exports.UniqueDimensionValueThreshold = 10;
exports.Colors = {
    defaultSeriesColor: "#0072c6",
    palettes: {
        "blue": ["#00bcf2", "#000c48", "#ccf2fc", "#005e79", "#6dc2e9", "#002050", "#008db5", "#00188f"],
        "grouped": ["#68217a", "#007233", "#ffb900", "#00bcf2", "#ec008c", "#7FBA00", "#e2e584", "#9b4f96", "#442359", "#eb3c00"],
        "multiColor": ["#47BDF5", "#7E58FF", "#44F1C8", "#EB9371", "#0672F1", "#A3A6BA", "#B456DB", "#63899D", "#81A0FC", "#F1C721"],
        "fail": ["#ec008c", "#bad80a", "#66c592", "#d6e86c", "#009e49", "#ccecdb", "#55d455"],
    },
};
// following are constant strings that we are expecting to see from backend when giving dimensions is not supported
// Note: this is not supposed to localized.
exports.NotSupportedDimension = "does not support requested dimension";
exports.SupportedOnesAre = "supported ones are:";
// =================================================== AppContainer ===================================================
exports.DynamicThreshold = {
    skinName: "Dynamic Alerting Threshold",
    className: "fxc-monitorchart-dynamic-threshold",
    upperLineClassName: "fxc-monitorchart-dynamic-upper-thresholdLine",
    bottomLineClassName: "fxc-monitorchart-dynamic-bottom-thresholdLine",
    anomalyLineClassName: "fxc-monitorchart-dynamic-anomaly-line",
    circleClassName: "fxc-monitorchart-dynamic-thresholdCircle",
    alertCircleClassName: "fxc-monitorchart-dynamic-thresholdAlertCircle",
    squareClassName: "fxc-monitorchart-dynamic-thresholdSquare",
    eventNamePrefix: "DynamicThreshold_",
    apiVersion: "api-version=2017-11-01-preview",
};
//# sourceMappingURL=Constants.js.map