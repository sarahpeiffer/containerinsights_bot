import { RefreshReason, UserDataStatus } from "../Constants";
import * as Interfaces from "../SharedInterfaces";
import { IAiChartSkin } from "./IAiChartSkin";
import { IAiControl } from "./IAiControl";
export declare class Chart implements Interfaces.IChart, Interfaces.Accessible {
    svgContainerElement: any;
    svgElement: any;
    legendElement: any;
    telemetryContext: Interfaces.InsightsTelemetryContext;
    realm: string;
    skins: IAiChartSkin[];
    chartControl: IAiControl;
    private _uniqueId;
    private _width;
    private _height;
    private _divSvgContainer;
    private _spinner;
    private _realmElement;
    private _visualization;
    private _interactions;
    /**
     * Get the interactions defined for this chart
     *
     * @readonly
     * @type {Interfaces.IAiChartInteractions}
     * @memberOf Chart
     */
    getInteractions(): Interfaces.IAiChartInteractions;
    constructor(realm?: string, context?: Interfaces.InsightsTelemetryContext, data?: Interfaces.ControlData, visualization?: Interfaces.IChartVisualization, interactions?: Interfaces.IAiChartInteractions, accessiblityOptions?: Interfaces.AccessiblityOptions, skins?: IAiChartSkin[]);
    /**
     * Change the body of a tool tip.  This will work if the tool tip isn't visible, but
     * the changes won't become visible unless the tooltip is made visible (currently
     * through mouse being present in the graph area).
     *
     * @param body
     */
    changeToolTipBody(body: string): void;
    /**
     * The actual height of the Chart SVG element.
     *
     * @readonly
     * @type {number} The height of the Chart SVG element, in pixels.
     * @memberOf Chart
     */
    getActualHeight(): number;
    /**
     * The actual width of the Chart SVG element.
     *
     * @readonly
     * @type {number} The width of the Chart SVG element, in pixels.
     * @memberOf Chart
     */
    getActualWidth(): number;
    /**
     * Get visualization interface defined for this chart
     *
     * @type {Interfaces.IChartVisualization}
     * @memberOf Chart
     */
    getVisualization(): Interfaces.IChartVisualization;
    setVisualization(newVisual: Interfaces.IChartVisualization): void;
    hoverOn(timeTick: Date, selection?: boolean): void;
    clearSelection(): void;
    clearData(dataStatus?: UserDataStatus): void;
    showSpinner(): void;
    hideSpinner(): void;
    updateData(data: Interfaces.ControlData, cause?: RefreshReason): void;
    updateAccessiblityOptions(accessiblityOptions: Interfaces.AccessiblityOptions): void;
    getAccessiblityOptions(): Interfaces.AccessiblityOptions;
    private _setAttribute;
    private _getChartSVGWidth;
    private _updateSvgContainerSize;
    private _initAccessibleOptions;
    private addKeyboardListener;
    private _createContainerWithSpinner;
}
