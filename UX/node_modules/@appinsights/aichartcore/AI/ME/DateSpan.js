"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Defines the date span used for subtraction date/time intervals from dates.
 */
var DateSpan = /** @class */ (function () {
    /**
     * Creates a new instance of the DateSpan.
     */
    function DateSpan(years, months, days, hours, minutes, seconds, milliseconds) {
        if (days === void 0) { days = 0; }
        if (hours === void 0) { hours = 0; }
        if (minutes === void 0) { minutes = 0; }
        if (seconds === void 0) { seconds = 0; }
        if (milliseconds === void 0) { milliseconds = 0; }
        this.years = years;
        this.months = months;
        this.days = days;
        this.hours = hours;
        this.minutes = minutes;
        this.seconds = seconds;
        this.milliseconds = milliseconds;
    }
    return DateSpan;
}());
exports.DateSpan = DateSpan;
var isoDurationRegex = /P(?:(\d*)Y)?(?:(\d*)M)?(?:(\d*)W)?(?:(\d*)D)?(?:T(?:(\d*)H)?(?:(\d*)M)?(?:(\d*)S)?)?/;
function convertIsoDurationToDateSpan(isoDuration) {
    if (isoDuration) {
        var matches = isoDuration.match(isoDurationRegex);
        if (matches) {
            // Consider PT1W (one week)
            var totalDays = (matches[3] ? 7 * parseInt(matches[3], 10) : 0) + (matches[4] ? parseInt(matches[4], 10) : 0);
            return {
                years: matches[1] ? parseInt(matches[1], 10) : 0,
                months: matches[2] ? parseInt(matches[2], 10) : 0,
                days: totalDays,
                hours: matches[5] ? parseInt(matches[5], 10) : 0,
                minutes: matches[6] ? parseInt(matches[6], 10) : 0,
                seconds: matches[7] ? parseInt(matches[7], 10) : 0,
            };
        }
    }
}
exports.convertIsoDurationToDateSpan = convertIsoDurationToDateSpan;
//# sourceMappingURL=DateSpan.js.map