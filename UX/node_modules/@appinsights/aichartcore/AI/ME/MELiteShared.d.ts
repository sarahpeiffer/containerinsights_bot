export declare const enum Grain {
    Automatic = 1,
    Minutely = 2,
    Hourly = 3,
    Daily = 4,
    Weekly = 5,
    Monthly = 6,
    Every_5_Minutes = 7,
    Every_15_Minutes = 8,
    Every_30_Minutes = 9,
    Every_6_Hours = 10,
    Every_12_Hours = 11
}
export interface TimeContextRelativeData {
    /** The options for this TimeContext. */
    options: TimeContextOptionData;
    /** A relative time range. */
    relative: {
        duration: number;
    };
}
export interface TimeContextAbsoluteData {
    /** The options for this TimeContext. */
    options: TimeContextOptionData;
    /** An absolute time range. */
    absolute: TimeRange;
}
export interface TimeContextOptionData {
    /** This flag is true if want to use dashboard level time range. */
    useDashboardTimeRange?: boolean;
    /** The grain of the time context.
     *  Note: this match to the grain drop-down on the UI.
     */
    grain: Grain;
    /** The ISO grain string that applied.
     *  This reflect the actual ISO string that applied as the grain for the query.
     *  Use this one if it is defined.
     */
    appliedISOGrain?: string;
    /** Do we want to display time as UTC */
    showUTCTime?: boolean;
    /**
     * The max bucket size use to figure out the grain when grain is auto.
     */
    maxBucketCount?: number;
}
export interface TimeRange {
    startTime: Date;
    endTime: Date;
}
export interface ISubscription {
    displayName: string;
    id: string;
    subscriptionId: string;
}
export interface IPerfTimer {
    iframeLoadedCompletedTime?: number;
    iframeIndexHeadStartTime?: number;
    iframeIndexHeadEndTime?: number;
    iframeIndexBodyEndTime?: number;
    intialBundleDownloadTime?: number;
    indexProviderStartTime?: number;
    indexProviderEndTime?: number;
    indexProviderTime?: number;
    initialWidthDelayTime?: number;
    mainBundleStartTime?: number;
    mainBundleEndTime?: number;
    mainBundleDownloadTime?: number;
    iframeAppContainerStartTime?: number;
    iframeAppContainerMountedTime?: number;
    initialQueryMetrics?: any;
}
