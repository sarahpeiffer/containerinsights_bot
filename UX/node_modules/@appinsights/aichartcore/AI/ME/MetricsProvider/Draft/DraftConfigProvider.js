"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Constants_1 = require("../../Constants");
var ServiceContainer_1 = require("../../ServiceContainer");
exports.DraftHosts = {
    "dogfood": ["https://api1.int.applicationinsights.io", "https://api2.int.applicationinsights.io", "https://api3.int.applicationinsights.io", "https://api4.int.applicationinsights.io", "https://api5.int.applicationinsights.io"],
    "aimon": ["https://api1.aimon.applicationinsights.io", "https://api2.aimon.applicationinsights.io", "https://api3.aimon.applicationinsights.io", "https://api4.aimon.applicationinsights.io", "https://api5.aimon.applicationinsights.io"],
    "prod": ["https://api1.applicationinsights.io", "https://api2.applicationinsights.io", "https://api3.applicationinsights.io", "https://api4.applicationinsights.io", "https://api5.applicationinsights.io"],
    "fairfax": ["api.applicationinsights.us"],
};
exports.LiveHosts = {
    "dogfood": "https://quickpulse-int.aisvc-int.visualstudio.com",
    "aimon": "https://quickpulse.aimon.applicationinsights.io",
    "prod": "https://rt.services.visualstudio.com",
    "fairfax": "https://quickpulse.applicationinsights.us",
};
var DraftDemoAppEndPoint = "https://api.applicationinsights.io";
function getEnvironmentName(location, enviromentName) {
    var loc = location && location.toLowerCase();
    var envName = (enviromentName || ServiceContainer_1.ServiceContainer.Instance().get(Constants_1.TypeNames.EnvironmentName) || "prod").toLowerCase();
    if (envName !== "dogfood" && loc === "westcentralus") {
        return "aimon";
    }
    else if (loc === "usgovvirginia") {
        return "fairfax";
    }
    else if (["dogfood", "aimon", "prod", "fairfax"].indexOf(envName) >= 0) {
        return envName;
    }
    return "prod";
}
exports.getEnvironmentName = getEnvironmentName;
function getAllDraftHosts() {
    var allDraftHosts = [DraftDemoAppEndPoint];
    Object.keys(exports.DraftHosts).forEach(function (key) {
        allDraftHosts = allDraftHosts.concat(exports.DraftHosts[key]);
    });
    return allDraftHosts;
}
exports.getAllDraftHosts = getAllDraftHosts;
function getAILiveHost(appLocation) {
    var location = appLocation || ServiceContainer_1.ServiceContainer.Instance().get(Constants_1.TypeNames.Location);
    var environmentName = getEnvironmentName(location);
    return exports.LiveHosts[environmentName];
}
exports.getAILiveHost = getAILiveHost;
/**
 * Resolve Draft url path with cycling CNames to improve perf. urlSubpath will be appended.
 * This allows the caller to specify whether hitting /metrics or /metrics/metadata different endpoints
 */
var cycledCNamesIndex = 0;
function resolveDraftUrlPath(appId, urlSubpath, location) {
    var hostUrl;
    // Determine whether we're inside/outside Ibiza
    if (appId) {
        var loc = location || ServiceContainer_1.ServiceContainer.Instance().get(Constants_1.TypeNames.Location);
        var envName = getEnvironmentName(loc);
        var cnames = exports.DraftHosts[envName];
        hostUrl = cnames && cnames[cycledCNamesIndex % cnames.length];
        cycledCNamesIndex++;
    }
    else {
        // Running outside Ibiza; use DEMO_APP
        hostUrl = DraftDemoAppEndPoint; // "https://api.applicationinsights.io"
        appId = Constants_1.DraftDEMO_APPAppId; // "DEMO_APP"
    }
    var urlPath = hostUrl + "/beta/apps/" + appId;
    if (urlSubpath) {
        // Append sub path. Prepend "/", if needed.
        urlPath += (urlSubpath[0] === "/" ? urlSubpath : "/" + urlSubpath);
    }
    // Tag along "?useKusto=true&useMDM=false&prefer=ai.include-query-payload;ai.include-metadata"
    urlPath += "?useKusto=true&useMDM=false&prefer=ai.include-metadata";
    return urlPath;
}
exports.resolveDraftUrlPath = resolveDraftUrlPath;
//# sourceMappingURL=DraftConfigProvider.js.map