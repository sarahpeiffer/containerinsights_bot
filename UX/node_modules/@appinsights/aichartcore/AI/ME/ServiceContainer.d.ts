import { IServiceContainer } from "./SharedInterfaces";
export declare class ServiceContainer implements IServiceContainer {
    private static _instance;
    private _dependencyMap;
    /**
     * Returns the singleton instance of ServiceContainer
     */
    static Instance(): ServiceContainer;
    static _reset(): void;
    constructor();
    /**
     * Registers the given callBack as a producer for the specified type.
     * Overrides any previous registrations for the previous type.
     */
    register(typeToResolve: string, callBack: any): void;
    /**
     * Registers the given callBack as a producer for the specified type.
     * Will not override an existing registration for that specified type.
     * Returns true if registration succeeds, false if it fails due to prior registration.
     */
    registerIfUnset(typeToResolve: string, callBack: any): boolean;
    registerProperties(properties: StringMap<any>): void;
    get<T>(typeToResolve: string, ...params: any[]): T;
}
export interface DependencyMap {
    [typeToResolve: string]: any;
}
