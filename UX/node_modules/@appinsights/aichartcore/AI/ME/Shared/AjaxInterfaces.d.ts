import { HttpMethodType } from "../Constants";
import { QueryMetadata } from "../SharedInterfaces";
export interface IDebouncer<T> {
    execute: (data: T[], optionalData?: boolean) => void;
    flush: () => Q.Promise<void>;
}
/**
 * If you need to implement DebouncerDataMerger, you need to handle both T|T[].
 * default is to use MsPortalFx.merge which call array.prototype.concat to do things correctly.
 */
export interface DebouncerDataMerger<T> {
    (oldData: T | T[], newData: T | T[]): T[];
}
export interface DebouncerExecutor<T> {
    (data: T[]): Q.Promise<any>;
}
export interface DebouncerOptions {
    /**
     * The time period after which each batch of optional data should be processed.
     */
    optionalDataInterval?: number;
    /**
     * The maximum batch size supported by the execution method. It combines both required data and optional data.
     */
    maxBatchSize?: number;
}
export interface AdditionalPayload {
    [key: string]: string;
}
export interface BatchRequestResponse<T> {
    request: BatchRequest;
    responseDeferred: Q.Deferred<T>;
}
export interface BatchRequest {
    /**
     * The URI to call.
     */
    uri: string;
    /**
     * Additional payload to include in the request
     */
    additionalPayload?: AdditionalPayload;
    /**
     * The http method for the call. Defaults to GET
     * Note that ARM only supports GET calls in batch.
     */
    httpMethod?: string;
    /**
     * The query metadata for the request.
     */
    queryMetadata?: QueryMetadata;
    options: FetchOptions;
}
export interface FetchOptions {
    type: HttpMethodType;
    contentType?: any;
    uri?: string;
    resourceId?: string;
    data?: any;
    dataType?: string;
    headers?: {
        [key: string]: any;
    };
    timeout?: number;
    invokeApi?: string;
    setAuthorizationHeader?: boolean;
    getAuthorizationToken?: () => Q.Promise<string>;
    useRawAjax?: boolean;
    additionalPayload?: any;
}
export interface ArmBatchRequest {
    /**
     * The relative url in each batch.
     */
    relativeUrl: string;
    /**
     * The http method for the call. Defaults to GET
     * Note that ARM only supports GET calls in batch.
     */
    httpMethod?: string;
}
export interface BatchResponse<T> {
    /**
     * The success response from ARM.
     */
    responses: BatchResponseItem<T>[];
}
export interface BatchResponseItem<T> extends BaseHttpResponse {
    /**
     * The response content. Can be success or failure.
     */
    content: T | ArmErrorResponse;
    /**
     * The response headers.
     */
    headers: StringMap<string>;
    /**
     * The response status code.
     */
    httpStatusCode: number;
}
export interface BaseHttpResponse {
    readonly response?: any;
    readonly responseText?: string;
    readonly status?: number;
    readonly statusText?: string;
    readonly message?: string;
    readonly stack?: string;
}
export interface ArmErrorResponse {
    error: {
        message: string;
        code: string;
    };
}
