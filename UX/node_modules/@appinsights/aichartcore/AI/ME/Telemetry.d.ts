import * as Constants from "./Constants";
import { CustomMetrics, CustomProperties, IMetricsExplorerItemDataModel, InsightsTelemetryContext, QueryMetadata, UserDataStatusWithError } from "./SharedInterfaces";
import { IOperationTimer } from "./TelemetryInterfaces";
export declare function PerformanceNow(): number;
export declare const telemetryContextMap: StringMap<InsightsTelemetryContext>;
export declare function getClientRequestId(responseHeaders: StringMap<string>): string;
/**
 * Make sure call this function to get telemetry context.
 */
export declare function getOrCreateTelemetryContext(itemDataModel?: IMetricsExplorerItemDataModel): InsightsTelemetryContext;
export declare function addPromiseToTelemetryContext(context: InsightsTelemetryContext, promiseType: string, promise: Q.Promise<any>): void;
export declare function setCommonTelemetryProperties(customProperties: CustomProperties): void;
export declare function logError(message: string, context: InsightsTelemetryContext, rejectedReason?: any, customProperties?: CustomProperties, customMetrics?: CustomMetrics): void;
export declare function logCustomEvent(eventName: string, context: InsightsTelemetryContext, customProperties?: CustomProperties, customMetrics?: CustomMetrics): void;
export declare function traceMessage(message: string, context: InsightsTelemetryContext, customProperties?: CustomProperties, customMetrics?: CustomMetrics): void;
/**
 * log event with event name: AIWarningLogging
 */
export declare function logWarning(warningMessage: string, context: InsightsTelemetryContext, customProperties?: CustomProperties, customMetrics?: CustomMetrics): void;
export declare function logContainerLoad(context: InsightsTelemetryContext, containerName: string, refreshReason: Constants.RefreshReason, loadResult?: Constants.Result, dataStatus?: UserDataStatusWithError, customProperties?: CustomProperties, customMetrics?: CustomMetrics): void;
export declare function logAjaxQuery(context: InsightsTelemetryContext, queryMetaData: QueryMetadata, queryResult: Constants.Result, response?: any, customProperties?: CustomProperties, customMetrics?: CustomMetrics, loggableQueryPayload?: string): void;
export declare function populateItemDataModelProperties(dataModel: IMetricsExplorerItemDataModel, properties: CustomProperties, customMetrics: CustomMetrics): void;
export interface IOperationTimerAndActions {
    opTimer: IOperationTimer;
    opStop: () => void;
}
export declare function CreateOrAddOperation(operationName: string, operationTelemetry?: IOperationTimer): IOperationTimerAndActions;
export declare class OperationTimer implements IOperationTimer {
    /** The (user?) operation that started this chain of events */
    readonly originOperation: string;
    private readonly _stats;
    constructor(originOperation: string);
    createOperationTimer(operationName: string): () => void;
    getStats(): CustomMetrics;
}
