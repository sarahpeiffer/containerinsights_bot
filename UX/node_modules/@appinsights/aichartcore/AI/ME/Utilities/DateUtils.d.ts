import { DateSpan } from "../DateSpan";
import { Grain } from "../MELiteShared";
import * as TimeUnits from "./TimeUnits";
/**
 * Represents the number of milliseconds in the specified time unit.
 * DEPRECATED - PLEASE USE TimeUnits INSTEAD
 */
export declare const unitsInMilliseconds: {
    /** 1/10,000 of a millisecond for data returned from Elastic Search */
    Ticks: number;
    /** 1 ms */
    Milliseconds: number;
    /** 1 s = 1,000 ms */
    Seconds: number;
    /** 1 m = 60,000 ms */
    Minutes: number;
    /** 1 h = 3,600,000 ms */
    Hours: number;
    /** 1 d = 86,400,000 ms */
    Days: number;
    /** 1 y = 31,536,000,000 ms */
    Years: number;
};
export declare const priorPeriodOffsetMs: number;
/**
 * Convert a string to a date object
 */
export declare function ToDate(datetimeStr: string): Date;
export declare function addDate(date: Date, value: number, unit: TimeUnits.TimeUnit): Date;
/**
 * Returns a new Date that adds the specified number of days to the specified date.
 *
 * @param value The number of days to add. Value can be positive or negative, and can include a fractional part of a day.
 */
export declare function addDays(date: Date, value: number): Date;
/**
 * Returns a new Date that adds the specified number of hours to the specified date.
 *
 * @param value The number of hours to add. Value can be positive or negative, and can include a fractional part of an hour.
 */
export declare function addHours(date: Date, value: number): Date;
/**
 * Returns a new Date that adds the specified number of milliseconds to the specified date.
 *
 * @param value The number of milliseconds to add. Value can be positive or negative.
 *              Values that include a fractional part of a millisecond will be rounded to the nearest millisecond.
 */
export declare function addMilliseconds(date: Date, value: number): Date;
/**
 * Returns a new Date that adds the specified number of minutes to the specified date.
 *
 * @param value The number of minutes to add. Value can be positive or negative, and can include a fractional part of a minute.
 */
export declare function addMinutes(date: Date, value: number): Date;
/**
 * Returns a new Date that adds the specified number of seconds to the specified date.
 *
 * @param value The number of seconds to add. Value can be positive or negative, and can include a fractional part of a seconds.
 */
export declare function addSeconds(date: Date, value: number): Date;
/**
 * Compares two dates and returns the difference between them in ms. If either date is null/undefined, NaN will be returned.
 */
export declare function compare(endDate: Date, startDate: Date): number;
/**
 * Check if date is in range between start and end time
 */
export declare function inRange(dateToValidate: Date, start: Date, end: Date): boolean;
/**
 * Returns a new Date that is rounded to the nearest specified date unit (e.g. month, day, minute).
 *
 * @param dateUnit A DateKind enum representing the unit to round the date to, e.g. month, day, minute.
 * @param roundDown (Optional) If true, the date will always round down. Otherwise, the time will be rounded as normal.
 * @param roundUp (Optional) If true while roundDown is false, the date will always round up. Otherwise, the time will be rounded as normal.
 * @param interval (Optional) A number indicating the interval which the date should be rounded to, e.g. 2 minutes, 5 minutes.
 */
export declare function roundDate(date: Date, unit: TimeUnits.TimeUnit, roundDown?: boolean, roundUp?: boolean, interval?: number): Date;
export declare function dateSpanToSeconds(dateSpan: DateSpan): number;
export declare function GetMidNightLastMonday(date: Date): Date;
/**
 *  Convert the ISO 8601 formatted duration (e.g PT30M) to number of milliseconds
 */
export declare function convertISODurationToMilliseconds(input: string): number;
export declare function ToGrain(isoGrain: string): Grain;
/**
 * Get the buckets that the duration is in
 *
 * @param {number} durationMs - Duration in the unit of ms
 * @return {string} - Description of the bucket, e.g. "10 mins"
 */
export declare function _getDurationBucket(durationMs: number): string;
