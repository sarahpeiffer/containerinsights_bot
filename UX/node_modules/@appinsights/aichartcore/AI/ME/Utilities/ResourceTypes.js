"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ResourceTypeService_1 = require("../../../Utils/ResourceTypeService");
var Constants_1 = require("../Constants");
exports.legacyNamespacesMap = {
    "microsoft.documentdb/databaseaccounts/classic": true,
    "microsoft.customerinsights/hubs": true,
    "microsoft.insights/webtests": true,
    "microsoft.compute/virtualmachines/guest": true,
    "microsoft.compute/virtualmachinescalesets/guest": true,
    "microsoft.classiccompute/virtualmachines/guest": true,
    // Classic Storage
    "microsoft.classicstorage/storageaccounts/services/blob": true,
    "microsoft.classicstorage/storageaccounts/services/file": true,
    "microsoft.classicstorage/storageaccounts/services/queue": true,
    "microsoft.classicstorage/storageaccounts/services/table": true,
    // Storage [microsoft.storage/storageaccounts] querying for classic metrics (Legacy endpoint)
    "microsoft.storage/storageaccounts/services/blob": true,
    "microsoft.storage/storageaccounts/services/file": true,
    "microsoft.storage/storageaccounts/services/queue": true,
    "microsoft.storage/storageaccounts/services/table": true,
};
function getSubscriptionId(resourceId) {
    if (resourceId === Constants_1.DraftDEMO_APPAppId) {
        return "Demo_App";
    }
    var resourceDescriptor = ResourceTypeService_1.parseResourceDescriptor(resourceId);
    return resourceDescriptor && resourceDescriptor.subscription;
}
exports.getSubscriptionId = getSubscriptionId;
function getResourceName(resourceId) {
    if (resourceId === Constants_1.DraftDEMO_APPAppId) {
        return resourceId;
    }
    var resourceDescriptor = ResourceTypeService_1.parseResourceDescriptor(resourceId);
    return resourceDescriptor && resourceDescriptor.resource ? resourceDescriptor.resource : resourceId;
}
exports.getResourceName = getResourceName;
/**
 * Default namespaces for various resource types.
 * Special case: Storage and VMs have multiple default namespaces.
 */
var defaultNamespacesMap = {
    "microsoft.classicstorage/storageaccounts": [
        { name: Constants_1.ResourceTypes.StorageClassic + "/services/blob", category: Constants_1.NamespaceOptionType.Standard },
        { name: Constants_1.ResourceTypes.StorageClassic + "/services/file", category: Constants_1.NamespaceOptionType.Standard },
        { name: Constants_1.ResourceTypes.StorageClassic + "/services/queue", category: Constants_1.NamespaceOptionType.Standard },
        { name: Constants_1.ResourceTypes.StorageClassic + "/services/table", category: Constants_1.NamespaceOptionType.Standard },
    ],
    "microsoft.storage/storageaccounts": [
        { name: "" + Constants_1.ResourceTypes.Storage, category: Constants_1.NamespaceOptionType.Standard },
        { name: Constants_1.ResourceTypes.Storage + "/blobservices", category: Constants_1.NamespaceOptionType.Standard },
        { name: Constants_1.ResourceTypes.Storage + "/fileservices", category: Constants_1.NamespaceOptionType.Standard },
        { name: Constants_1.ResourceTypes.Storage + "/queueservices", category: Constants_1.NamespaceOptionType.Standard },
        { name: Constants_1.ResourceTypes.Storage + "/tableservices", category: Constants_1.NamespaceOptionType.Standard },
    ],
    "microsoft.compute/virtualmachines": [{ name: Constants_1.ResourceTypes.VirtualMachines, category: Constants_1.NamespaceOptionType.Standard }],
    "microsoft.compute/virtualmachinescalesets": [{ name: Constants_1.ResourceTypes.VirtualMachinesScaleSets, category: Constants_1.NamespaceOptionType.Standard }],
    "microsoft.insights/components": [
        { name: Constants_1.AIKustoNamespace, category: Constants_1.NamespaceOptionType.Standard },
        { name: Constants_1.ResourceTypes.ApplicationInsights, category: Constants_1.NamespaceOptionType.Standard },
    ],
    "microsoft.classiccompute/domainnames": [{ name: "", category: Constants_1.NamespaceOptionType.Standard }],
};
/**
 * Return the default namespaces for a resource.
 */
function getDefaultNamespaces(resourceId) {
    var resourceType = getResourceProvider(resourceId);
    return defaultNamespacesMap[resourceType] || [{ name: resourceType, category: Constants_1.NamespaceOptionType.Standard }];
}
exports.getDefaultNamespaces = getDefaultNamespaces;
/**
 * Builds a resource type from a resource ID.
 * Taken from Shell 8/14/2018.
 */
function getResourceProvider(resourceId) {
    if (resourceId && resourceId !== Constants_1.DraftDEMO_APPAppId) {
        var resourceDescriptor = ResourceTypeService_1.parseResourceDescriptor(resourceId);
        if (resourceDescriptor && resourceDescriptor.provider) {
            var resourceType = resourceDescriptor.provider;
            resourceType = joinWithSlash(resourceType, joinWithSlash.apply(void 0, resourceDescriptor.types));
            return resourceType && resourceType.toLowerCase();
        }
    }
    return undefined;
}
exports.getResourceProvider = getResourceProvider;
function isValidResourceid(resourceId, telemetryContext) {
    // The reason that not use isNullOrWhiteSpace in Util is because Util reference ResourceTypes, so avoid circulate references.
    if (!resourceId || resourceId.length === 0) {
        return false;
    }
    else if (resourceId === Constants_1.DraftDEMO_APPAppId) {
        return true;
    }
    try {
        var resourceDescriptor = ResourceTypeService_1.parseResourceDescriptor(resourceId);
        return !!(resourceDescriptor && resourceDescriptor.subscription && resourceDescriptor.resourceGroup && resourceDescriptor.type && resourceDescriptor.provider);
    }
    catch (e) {
        // When resourceId is invalid, the parse will throw.
        return false;
    }
}
exports.isValidResourceid = isValidResourceid;
function isAILiveMetric(metric) {
    return metric && isAIMetric(metric) && metric.namespace && metric.namespace.name === Constants_1.AILiveNamespace;
}
exports.isAILiveMetric = isAILiveMetric;
function isAILiveChart(dm) {
    return dm && dm.MetricCount() === 1 && isAILiveMetric(dm.metrics[0].id);
}
exports.isAILiveChart = isAILiveChart;
function isAIMetric(metric) {
    return metric && (metric.resourceDefinition.id === Constants_1.DraftDEMO_APPAppId || getResourceProvider(metric.resourceDefinition.id) === Constants_1.ResourceTypes["ApplicationInsights"]);
}
exports.isAIMetric = isAIMetric;
function isMetricLegacy(metricId) {
    var nspace = metricId && metricId.namespace;
    var name = nspace && nspace.name && nspace.name.toLowerCase();
    return !!exports.legacyNamespacesMap[name];
}
exports.isMetricLegacy = isMetricLegacy;
function getMetricBackendProviderType(metric) {
    if (isAIMetric(metric)) {
        return "AI";
    }
    else if (isMetricLegacy(metric)) {
        return "Legacy";
    }
    else {
        return "MDM";
    }
}
exports.getMetricBackendProviderType = getMetricBackendProviderType;
function isMdmClassicVMMetric(metricName) {
    return Constants_1.MdmClassicVMMetrics.indexOf(((metricName || "").toLowerCase())) >= 0;
}
exports.isMdmClassicVMMetric = isMdmClassicVMMetric;
/**
 * The following code is take from the Ibiza shell in order to parse out the resource type correctly.
 */
var joinWithSlash = getJoinFunc("/");
var array_join = _uncurryThis(Array.prototype.join);
/**
 * Return a function that will perform join with that separator.
 */
function getJoinFunc(sep) {
    return function () {
        return array_join(arguments, sep);
    };
}
// See Mark Millerâ€™s explanation of what this does.
// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming
//
// For example:
// const array_slice: <T>(target: T[]|IArguments, start?: number, end?: number) => T[] = uncurryThis(Array.prototype.slice);
// Then the call can be strong typed, rather than call/apply with only runtime check.
function _uncurryThis(f) {
    return function () {
        return Function.call.apply(f, arguments);
    };
}
//# sourceMappingURL=ResourceTypes.js.map