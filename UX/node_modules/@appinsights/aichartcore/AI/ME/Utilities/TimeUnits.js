"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Strings = require("../../../Scripts/Strings/src/MELiteStrings");
exports.yearLengthInDays = 365;
exports.monthLengthInDays = exports.yearLengthInDays / 12;
exports.weekLengthInDays = 7;
var TimeUnitsDisplay = Strings.TimeUnitsDisplay;
exports.ticks = { name: TimeUnitsDisplay.ticks, scalar: 10000 * 1000 * 60 * 60 * 24 }; // There are 10000 ticks in one millisecond
exports.milliseconds = { name: TimeUnitsDisplay.milliseconds, scalar: 1000 * 60 * 60 * 24 };
exports.seconds = { name: TimeUnitsDisplay.seconds, scalar: 60 * 60 * 24 };
exports.minutes = { name: TimeUnitsDisplay.minutes, scalar: 60 * 24 };
exports.hours = { name: TimeUnitsDisplay.hours, scalar: 24 };
exports.days = { name: TimeUnitsDisplay.days, scalar: 1 };
exports.weeks = { name: TimeUnitsDisplay.weeks, scalar: 1 / exports.weekLengthInDays };
exports.months = { name: TimeUnitsDisplay.months, scalar: 1 / exports.monthLengthInDays };
exports.years = { name: TimeUnitsDisplay.years, scalar: 1 / exports.yearLengthInDays };
/** @subtitle: In the subtitle string alone we prefer to use 1 hour instead of 60 minutes but 24/48 hours and not days */
function getDisplayUnit(value, currentUnit, isSubtitle) {
    if (isSubtitle === void 0) { isSubtitle = false; }
    var rescaled = convert(value, currentUnit, exports.milliseconds);
    if (value === 0) {
        // Don't convert down if the value is 0
        return currentUnit;
    }
    else if (rescaled < 1000) {
        // <= 1s: Use ms
        return exports.milliseconds;
    }
    else if (rescaled === 1000) {
        return isSubtitle ? exports.seconds : exports.milliseconds;
    }
    else if (rescaled < (60 * 1000)) {
        // <= 1min: Use seconds
        return exports.seconds;
    }
    else if (rescaled === (60 * 1000)) {
        return isSubtitle ? exports.minutes : exports.seconds;
    }
    else if (rescaled < (60 * 60 * 1000)) {
        // <= 1h: Use minutes
        return exports.minutes;
    }
    else if (rescaled === (60 * 60 * 1000)) {
        return isSubtitle ? exports.hours : exports.minutes;
    }
    else if (rescaled <= (24 * 60 * 60 * 1000)) {
        // <= 24h: Use hours
        return exports.hours;
    }
    else if (rescaled <= (48 * 60 * 60 * 1000)) {
        // <= 48h: Use hours for subtitle, else days
        return isSubtitle ? exports.hours : exports.days;
    }
    else {
        // >24h: Use days
        return exports.days;
    }
}
exports.getDisplayUnit = getDisplayUnit;
function getScalar(fromUnit, toUnit) {
    return toUnit.scalar / fromUnit.scalar;
}
exports.getScalar = getScalar;
function convert(value, fromUnit, toUnit) {
    return (value * toUnit.scalar) / fromUnit.scalar;
}
exports.convert = convert;
//# sourceMappingURL=TimeUnits.js.map