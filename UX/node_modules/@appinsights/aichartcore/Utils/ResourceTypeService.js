"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ResourceDescriptorImpl = /** @class */ (function () {
    function ResourceDescriptorImpl() {
        this.types = [];
        this.resources = [];
        this.resourceMap = {};
    }
    return ResourceDescriptorImpl;
}());
// following code are copy from ibiza shell.
// [^\/\s]+ is at least one character that is not a whitespace or forward slash (/).
// {...} in the docs means we capture the value.
// Partial matching / extractors:
// - Matches (/something/something)* + /providers/{provider} + (/{type}/{instance})+
var regExpProviderExtractor = /(?!(?:\/[^\/]+\/[^\/]+)+\/providers)\/providers\/([^\/]+)((:?\/[^\/]+\/[^\/]+)*)$/i;
// - Matches (/{type}/{instance})+
var regExpResourceTypeExtractor = /\/([^\/]+)\/([^\/]+)/ig;
// - Matches /subscriptions/{subscriptionId} + (/resourcegroups/{resourcegroup})?
var regExpSubscriptionAndResourceGroupExtractor = /\/subscriptions\/([^\/\s]+)(?:\/resourcegroups\/([^\/\s]+))?/i;
/**
 * Helper to parse resourceId to a ResourceDescriptor. No throw to allow low end browser to optimize better.
 *
 * @param sourceId resource string
 * @return a ResourceDescriptor if it is valid. undefined if not valid
 */
function parseResourceDescriptor(id) {
    var result = new ResourceDescriptorImpl();
    // Extract the subscription id and resource group id.
    var subAndRGTokens = regExpSubscriptionAndResourceGroupExtractor.exec(id);
    if (subAndRGTokens && subAndRGTokens.length) {
        result.subscription = subAndRGTokens[1];
        result.resourceGroup = subAndRGTokens[2];
    }
    if (!result.subscription) {
        return undefined;
    }
    // Extract the provider and resources.
    // Produces [ id, provider, resources ]
    var providerTokens = regExpProviderExtractor.exec(id);
    if (providerTokens) {
        // [id, provider, resources]
        var partialType = result.provider = providerTokens[1];
        var resources = providerTokens[2];
        // Extract all resource types and instances.
        var resourceTypeTokens = void 0;
        while (resourceTypeTokens = regExpResourceTypeExtractor.exec(resources)) {
            if (!resourceTypeTokens) {
                return result; // not well form resources. bail out now.
            }
            result.types.push(result.type = resourceTypeTokens[1]); // Keeps last.
            result.resources.push(result.resource = resourceTypeTokens[2]); // Keeps last.
            partialType += "/" + result.type;
            result.resourceMap[partialType] = result.resource;
        }
    }
    return result;
}
exports.parseResourceDescriptor = parseResourceDescriptor;
function getResourceGroupId(resourceId) {
    var resourceDescriptor = parseResourceDescriptor(resourceId);
    return "/subscriptions/" + resourceDescriptor.subscription + "/resourceGroups/" + resourceDescriptor.resourceGroup;
}
exports.getResourceGroupId = getResourceGroupId;
function isValidResourceId(resourceId) {
    try {
        if (!resourceId) {
            return false;
        }
        var resourceDescriptor = parseResourceDescriptor(resourceId);
        return !!(resourceDescriptor.subscription && resourceDescriptor.resourceGroup && resourceDescriptor.resource && resourceDescriptor.type);
    }
    catch (e) {
        return false;
    }
}
exports.isValidResourceId = isValidResourceId;
function isValidResourceGroupId(resourceId) {
    try {
        if (!resourceId) {
            return false;
        }
        var resourceDescriptor = parseResourceDescriptor(resourceId);
        return !!(resourceDescriptor.subscription && resourceDescriptor.resourceGroup && !resourceDescriptor.resource && !resourceDescriptor.type);
    }
    catch (e) {
        return false;
    }
}
exports.isValidResourceGroupId = isValidResourceGroupId;
//# sourceMappingURL=ResourceTypeService.js.map