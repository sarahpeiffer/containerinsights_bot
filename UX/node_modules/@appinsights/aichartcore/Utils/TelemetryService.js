"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Util = require("../AI/ME/Utilities/Util");
var MapppedUtils_1 = require("./MapppedUtils");
var _appInsights = window && window.appInsights;
var _commonTelemetryContext = {};
function setCommonTelemetryContext(telemetryContext) {
    if (telemetryContext) {
        _commonTelemetryContext = telemetryContext;
        _commonTelemetryContext.entryPoint = Util.GetEntryPoint();
        if (_appInsights) {
            // make a function to initialize user.id with user info that was passed
            var initUserId = function () {
                if (_appInsights.context && _appInsights.context.user) {
                    _appInsights.context.user.id = telemetryContext.userId;
                    _appInsights.setAuthenticatedUserContext(telemetryContext.userId);
                }
            };
            // is appInsights context available already (AI script loaded?)
            if (_appInsights.context) {
                initUserId();
            }
            else {
                // otherwise, schedule this initialization when AI script loaded
                _appInsights.queue.push(initUserId);
            }
        }
    }
}
exports.setCommonTelemetryContext = setCommonTelemetryContext;
function getCommonTelemetryContext() {
    return _commonTelemetryContext;
}
exports.getCommonTelemetryContext = getCommonTelemetryContext;
function logTelemetry(eventType, eventName, customProperties, customMetrics) {
    try {
        if (!_appInsights) {
            return;
        }
        // Sanitize the properties map
        var insightProperties = Util.toStringMap(customProperties);
        var insightMetrics = Util.toStringMap(customMetrics);
        // Log event
        switch (eventType) {
            case 4 /* Error */:
                var error = customProperties.ErrorObject;
                if (error) {
                    delete customProperties.ErrorObject;
                }
                var handledAt = customProperties.HandledAt;
                if (handledAt) {
                    delete customProperties.HandledAt;
                }
                _appInsights.trackException(error, handledAt, insightProperties, insightMetrics);
                return;
            case 2 /* Trace */:
                _appInsights.trackTrace(eventName, insightProperties);
                return;
            default:
                _appInsights.trackEvent(eventName, insightProperties, insightMetrics);
                return;
        }
    }
    catch (exception) { /*Ignore errors in telemetry */ }
}
exports.logTelemetry = logTelemetry;
function Register(messageSvc, messageName) {
    return messageSvc.SubscribeMessage(messageName, function (properties) {
        if (properties) {
            if (!_commonTelemetryContext.additionalTelemetryInfo) {
                _commonTelemetryContext.additionalTelemetryInfo = properties;
            }
            else {
                MapppedUtils_1.extend(_commonTelemetryContext.additionalTelemetryInfo, properties);
            }
        }
    });
}
exports.Register = Register;
//# sourceMappingURL=TelemetryService.js.map