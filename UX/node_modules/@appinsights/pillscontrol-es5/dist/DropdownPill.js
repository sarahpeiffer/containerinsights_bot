"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var Select = require("@appinsights/react-select");
var Strings = require("PillResources");
var VirtualizedSelectMenu_1 = require("./VirtualizedSelectMenu");
var DropdownIcon_1 = require("./Images/DropdownIcon");
var Utils_1 = require("./Utils");
require("@appinsights/react-select/dist/react-select.css");
require("./Styles/DropdownPill");
var DropdownPill = /** @class */ (function (_super) {
    __extends(DropdownPill, _super);
    function DropdownPill(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.instanceIndex = ++DropdownPill.globalInstanceIndex;
        _this.handleSelectionChange = _this.handleSelectionChange.bind(_this);
        _this.menuRenderer = VirtualizedSelectMenu_1.createVirtualizedMenuRenderFunction();
        return _this;
    }
    DropdownPill.prototype.componentWillMount = function () {
        this.updateAriaLabel(this.props.selection);
    };
    DropdownPill.prototype.componentWillReceiveProps = function (nextProps, nextContext) {
        // Update configured status when entering edit mode
        if (nextProps.editMode && !this.props.editMode) {
            nextProps.updateConfiguredStatus(this._isConfigured(nextProps.selection));
        }
        // Remove self if user removed all values
        if (!nextProps.editMode && this.props.editMode) {
            if (Utils_1.isNullOrUndefined(nextProps.selection) ||
                nextProps.selection.length === 0) {
                nextProps.removeSelf();
            }
        }
        this.updateAriaLabel(nextProps.selection);
    };
    DropdownPill.prototype.render = function () {
        if (this.props.editMode) {
            return this.renderDropdowns();
        }
        else {
            return this.renderCollapsed();
        }
    };
    DropdownPill.prototype.renderDropdowns = function () {
        var className = Utils_1.getDropdownWrapperClassName(this.props.showLabels, "dropdown-pill ");
        return React.createElement("div", { className: className }, this.renderDropdownWithLabel(this.renderValuesDropdown(), Strings.values));
    };
    DropdownPill.prototype.renderCollapsed = function () {
        var selection = this.props.selection;
        var displayedValue = React.createElement("span", { className: "not-configured" }, Strings.notConfigured);
        if (this._isConfigured(this.props.selection)) {
            displayedValue = React.createElement("div", { className: "configured" },
                React.createElement("div", { className: "values" }, this._getSelectionString(selection)));
        }
        return React.createElement("span", { className: "pillcontent" }, displayedValue);
    };
    DropdownPill.prototype.renderDropdownWithLabel = function (DropdownFn, label) {
        return React.createElement("div", { className: "aim-pill-dropdown-with-labels" },
            this.props.showLabels ? React.createElement("label", null, label) : null,
            DropdownFn);
    };
    DropdownPill.prototype.renderValuesDropdown = function () {
        var _this = this;
        var selectedValue = undefined;
        if (this.props.enableValueMultiSelect) {
            selectedValue = this.props.selection;
        }
        else if (this._isConfigured(this.props.selection)) {
            selectedValue = this.props.selection[0];
        }
        return React.createElement(Select.default, { id: "dropdown" + this.instanceIndex, name: "selectedValues", "aria-labelledby": this.props.showLabels ? "aim-pill-label-values" : undefined, "aria-label": !this.props.showLabels ? Strings.values : undefined, className: "aim-pill-dropdown virtualized" + (!!this.props.enableValueMultiSelect ? " multiselect" : ""), clearable: false, placeholder: Strings.selectValues, value: selectedValue, onChange: function (newVal) { return _this.handleSelectionChange(newVal); }, options: this.props.valuesList, isLoading: this.props.areValuesLoading, arrowRenderer: DropdownIcon_1.DropdownIcon, openAfterFocus: true, openOnFocus: true, multi: this.props.enableValueMultiSelect, onSelectResetsInput: !this.props.enableValueMultiSelect, closeOnSelect: !this.props.enableValueMultiSelect, showCheckbox: this.props.enableValueMultiSelect, showTags: false, autoFocus: !!(this.props.autoOpen), menuRenderer: this.menuRenderer, optionRenderer: this.props.optionRenderer, valueRenderer: this.props.valueRenderer, backspaceRemoves: false, tabSelectsValue: false, onInputChange: function (newVal) {
                if (_this.props.onDropdownPillInputChange) {
                    _this.props.onDropdownPillInputChange(newVal);
                }
            }, inputProps: { autoComplete: "off", autoCorrect: "off", spellCheck: "off" } });
    };
    DropdownPill.prototype.updateAriaLabel = function (selection) {
        var newLabel = Strings.notConfigured;
        if (this._isConfigured(selection)) {
            newLabel = this._getSelectionString(selection);
        }
        this.props.updateAriaLabel(newLabel);
    };
    DropdownPill.prototype.handleSelectionChange = function (newValue) {
        var newSelection = this.props.selection;
        // Keeping consistent external interface by treating single-select as single value in array
        if (newValue instanceof Array) {
            newSelection = newValue;
        }
        else {
            newSelection = [newValue];
        }
        this.props.updateConfiguredStatus(this._isConfigured(newSelection));
        this.props.onSelectionChange(newSelection);
        this.updateAriaLabel(newSelection);
    };
    DropdownPill.prototype._isConfigured = function (selection) {
        return selection && selection.length > 0;
    };
    DropdownPill.prototype._getSelectionString = function (selection) {
        if (this._isConfigured(selection)) {
            return selection.map(function (option) { return option.label; }).join(", ");
        }
        return "";
    };
    DropdownPill.globalInstanceIndex = 0;
    return DropdownPill;
}(React.Component));
exports.DropdownPill = DropdownPill;
//# sourceMappingURL=DropdownPill.js.map