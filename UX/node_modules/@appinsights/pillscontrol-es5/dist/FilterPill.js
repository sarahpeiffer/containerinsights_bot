"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var Strings = require("PillResources");
var react_select_1 = require("@appinsights/react-select"), Select = react_select_1; // Can't use Select.default inside Typescript, so need to import default class separately
var DropdownIcon_1 = require("./Images/DropdownIcon");
var Utils_1 = require("./Utils");
var VirtualizedSelectMenu_1 = require("./VirtualizedSelectMenu");
require("@appinsights/react-select/dist/react-select.css");
require("./Styles/DropdownPill");
var typescript_string_operations_1 = require("typescript-string-operations");
var Utils_2 = require("./Utils");
var SelectionChangeType;
(function (SelectionChangeType) {
    SelectionChangeType[SelectionChangeType["None"] = 0] = "None";
    SelectionChangeType[SelectionChangeType["Dimension"] = 1] = "Dimension";
    SelectionChangeType[SelectionChangeType["Operator"] = 2] = "Operator";
    SelectionChangeType[SelectionChangeType["Values"] = 3] = "Values";
})(SelectionChangeType = exports.SelectionChangeType || (exports.SelectionChangeType = {}));
var FilterPill = /** @class */ (function (_super) {
    __extends(FilterPill, _super);
    function FilterPill(props, context) {
        var _this = _super.call(this, props, context) || this;
        var operator = null;
        // preselect the default (first) operator if there is one
        if (props && props.pickerLists && props.pickerLists.operatorsList && props.pickerLists.operatorsList.length > 0) {
            operator = props.pickerLists.operatorsList[0];
            operator.isSelected = true;
        }
        var selection = props && props.selection ?
            props.selection
            : {
                selectedDimension: null,
                selectedOperator: operator,
                selectedValues: null,
            };
        _this.state = {
            valuesList: props && props.pickerLists && props.pickerLists.valuesList,
            selection: selection,
            lkgSelection: props.selection,
            menuRenderer: VirtualizedSelectMenu_1.createVirtualizedMenuRenderFunction()
        };
        _this._instanceIndex = ++FilterPill.globalInstanceIndex;
        _this._handleSelectionChange = _this._handleSelectionChange.bind(_this);
        _this._shouldExpandDropdowns = true;
        return _this;
    }
    FilterPill.prototype.componentWillMount = function () {
        this.updateAriaLabel(this.state.selection);
    };
    FilterPill.prototype.componentWillReceiveProps = function (nextProps, nextContext) {
        var _this = this;
        this.setState(function (prevState) {
            var updatedState = {
                selection: prevState.selection,
                lkgSelection: prevState.lkgSelection,
                valuesList: prevState.valuesList,
            };
            if (nextProps.selection) {
                updatedState.selection = nextProps.selection;
            }
            // Entered edit mode, set LKG
            if (nextProps.editMode && !_this.props.editMode) {
                if (_this._isConfigured(updatedState.selection) && Utils_1.isNullOrUndefined(updatedState.lkgSelection)) {
                    updatedState.lkgSelection = Utils_1.extendObject({}, updatedState.selection);
                    updatedState.lkgSelection.selectedValues = updatedState.lkgSelection.selectedValues.slice();
                }
                _this._shouldExpandDropdowns = true;
                nextProps.updateConfiguredStatus(_this._isConfigured(updatedState.selection));
            }
            // Exited edit mode, verify state and revert if needed
            if (!nextProps.editMode && _this.props.editMode) {
                if (!_this._isConfigured(updatedState.selection)) {
                    if (updatedState.lkgSelection) {
                        updatedState.selection = updatedState.lkgSelection;
                        nextProps.onSelectionChange(SelectionChangeType.None, updatedState.selection, _this._isConfigured(updatedState.selection), updatedState.valuesList);
                    }
                    else {
                        // Remove self if we have no LKG to go back to
                        nextProps.removeSelf();
                    }
                }
                updatedState.lkgSelection = undefined;
            }
            var filterValues = nextProps.pickerLists && nextProps.pickerLists.valuesList;
            // Update Filter options
            if (filterValues && filterValues.length > 0) {
                updatedState.valuesList = filterValues;
            }
            else if (nextProps.areValuesLoading) {
                updatedState.valuesList = [Utils_1.getLoadingEntry()];
            }
            else {
                updatedState.valuesList = nextProps.canCreateValueEntries ? [] : [Utils_1.getNoResultsEntry()];
            }
            _this.updateAriaLabel(updatedState.selection);
            return updatedState;
        });
    };
    FilterPill.prototype.render = function () {
        if (this.props.editMode) {
            return this.renderDropdowns();
        }
        else {
            return this.renderCollapsed();
        }
    };
    FilterPill.prototype.renderDropdowns = function () {
        var className = Utils_1.getDropdownWrapperClassName(this.props.showLabels, "filter-pill ");
        var uniqueId = Utils_1.newGuid().toLowerCase();
        return React.createElement("div", { className: className },
            this.renderDropdownWithLabel(this.renderDimensionDropdown(uniqueId), Strings.property, "Property-" + uniqueId),
            this.renderDropdownWithLabel(this.renderOperatorDropdown(uniqueId), Strings.operator, "Operator-" + uniqueId),
            this.renderDropdownWithLabel(this.renderValuesDropdown(uniqueId), Strings.values, "Values-" + uniqueId));
    };
    FilterPill.prototype.renderCollapsed = function () {
        var selection = this.state.selection;
        var displayedValue = React.createElement("span", { className: "not-configured" }, Strings.notConfigured);
        var operatorLabel = selection.selectedOperator && selection.selectedOperator.label;
        if (!operatorLabel && this.props.hideOperatorSelection) {
            operatorLabel = ":";
        }
        if (this._isConfigured(selection)) {
            displayedValue = (React.createElement("div", { className: "configured" },
                React.createElement("div", { className: "dimension" }, selection.selectedDimension.label),
                React.createElement("div", { className: "operator" }, operatorLabel),
                React.createElement("div", { className: "values" }, this._getSelectedValuesString(selection))));
        }
        return React.createElement("span", { className: "pillcontent" }, displayedValue);
    };
    FilterPill.prototype.renderDropdownWithLabel = function (dropdownFn, label, labelName) {
        return React.createElement("div", { className: "aim-pill-dropdown-with-labels" },
            this.props.showLabels ? React.createElement("label", { id: "aim-pill-label-" + labelName.toLowerCase() }, label) : null,
            dropdownFn);
    };
    FilterPill.prototype.renderDimensionDropdown = function (uniqueId) {
        var _this = this;
        var menuRenderer = this.state.menuRenderer;
        var className = "aim-pill-dropdown aim-filter-dimension virtualized";
        var optionRenderer = this.props.customOptionRenderers && this.props.customOptionRenderers.dimensionRenderer;
        var valueRenderer = this.props.customValueRenderers && this.props.customValueRenderers.dimensionRenderer;
        return React.createElement(react_select_1.default, { id: "dropdown-dimension" + this._instanceIndex, "aria-labelledby": this.props.showLabels ? "aim-pill-label-property-" + uniqueId : undefined, "aria-label": !this.props.showLabels ? Strings.property : undefined, ref: function (element) {
                var hasRef = !!_this._dimensionRef;
                _this._dimensionRef = element;
                if (!hasRef) {
                    _this._autoExpandDropdowns(_this.state.selection);
                }
            }, name: "selectedDimension", className: className, clearable: false, placeholder: Strings.selectProperty, value: this.state.selection.selectedDimension, onChange: function (newVal) { return _this._handleSelectionChange(SelectionChangeType.Dimension, newVal); }, options: this.props.pickerLists.dimensionsList, isLoading: this.props.areDimensionsLoading, arrowRenderer: DropdownIcon_1.DropdownIcon, openOnFocus: true, menuRenderer: menuRenderer, optionRenderer: optionRenderer, valueRenderer: valueRenderer, matchProp: "label", backspaceRemoves: false, tabSelectsValue: false, inputProps: { autoComplete: "off", autoCorrect: "off", spellCheck: "off" } });
    };
    FilterPill.prototype.renderOperatorDropdown = function (uniqueId) {
        var _this = this;
        var selection = this.state.selection;
        if (this.props.hideOperatorSelection) {
            var operator = "";
            if (selection && selection.selectedOperator) {
                operator = selection.selectedOperator.label;
            }
            return React.createElement("div", { className: "operator-fixed" }, operator);
        }
        else {
            var optionRenderer = this.props.customOptionRenderers && this.props.customOptionRenderers.operatorRenderer;
            var valueRenderer = this.props.customValueRenderers && this.props.customValueRenderers.operatorRenderer;
            return React.createElement(react_select_1.default, { id: "dropdown-operator" + this._instanceIndex, "aria-labelledby": this.props.showLabels ? "aim-pill-label-operator-" + uniqueId : undefined, "aria-label": !this.props.showLabels ? Strings.operator : undefined, ref: function (element) {
                    var hasRef = !!_this._operatorRef;
                    _this._operatorRef = element;
                    if (!hasRef) {
                        _this._autoExpandDropdowns(_this.state.selection);
                    }
                }, name: "selectedOperator", className: "aim-pill-dropdown aim-filter-operator", clearable: false, placeholder: Strings.selectOperator, value: selection.selectedOperator, onChange: function (newVal) { return _this._handleSelectionChange(SelectionChangeType.Operator, newVal); }, options: this.props.pickerLists.operatorsList, isLoading: this.props.areOperatorsLoading, arrowRenderer: DropdownIcon_1.DropdownIcon, openOnFocus: true, optionRenderer: optionRenderer, valueRenderer: valueRenderer, matchProp: "label", backspaceRemoves: false, tabSelectsValue: false, inputProps: { autoComplete: "off", autoCorrect: "off", spellCheck: "off" } });
        }
    };
    FilterPill.prototype.renderValuesDropdown = function (uniqueId) {
        var _this = this;
        var selectedValue = undefined;
        if (this.props.enableValueMultiSelect) {
            selectedValue = this.state.selection.selectedValues;
        }
        else if (this.state.selection.selectedValues && this.state.selection.selectedValues.length > 0) {
            selectedValue = this.state.selection.selectedValues[0];
        }
        var menuRenderer = this.state.menuRenderer;
        var className = "aim-pill-dropdown aim-filter-values virtualized";
        if (this.props.enableValueMultiSelect) {
            className += " multiselect";
        }
        var optionRenderer = this.props.customOptionRenderers && this.props.customOptionRenderers.valueRenderer;
        var valueRenderer = this.props.customValueRenderers && this.props.customValueRenderers.valueRenderer;
        var selectProps = {
            id: "dropdown-values" + this._instanceIndex,
            "aria-labelledby": this.props.showLabels ? "aim-pill-label-values-" + uniqueId : undefined,
            "aria-label": !this.props.showLabels ? Strings.values : undefined,
            name: "selectedValues",
            className: className,
            clearable: false,
            placeholder: this.props.canCreateValueEntries ? Strings.selectOrAddNewValues : Strings.selectValues,
            value: selectedValue,
            onChange: function (newVal) { return _this._handleSelectionChange(SelectionChangeType.Values, newVal); },
            options: this.state.valuesList,
            isLoading: this.props.areValuesLoading,
            arrowRenderer: DropdownIcon_1.DropdownIcon,
            openAfterFocus: true,
            openOnFocus: true,
            multi: this.props.enableValueMultiSelect,
            onSelectResetsInput: !this.props.enableValueMultiSelect,
            closeOnSelect: !this.props.enableValueMultiSelect,
            showCheckbox: this.props.enableValueMultiSelect,
            showTags: false,
            menuRenderer: menuRenderer,
            optionRenderer: optionRenderer,
            valueRenderer: valueRenderer,
            matchProp: "label",
            backspaceRemoves: false,
            tabSelectsValue: false,
            inputProps: { autoComplete: "off", autoCorrect: "off", spellCheck: "off" },
            ref: !this.props.canCreateValueEntries ? function (element) {
                var hasRef = !!_this._valuesRef;
                _this._valuesRef = element;
                if (!hasRef) {
                    _this._autoExpandDropdowns(_this.state.selection);
                }
            } : undefined,
            promptTextCreator: this.props.valueEntryCreatorPromptTextFormat ? function (filterText) {
                var textBuilder = new typescript_string_operations_1.StringBuilder();
                textBuilder.AppendFormat(_this.props.valueEntryCreatorPromptTextFormat, filterText);
                return textBuilder.ToString();
            } : undefined,
        };
        return this.props.canCreateValueEntries ? React.createElement(Select.Creatable, selectProps) : React.createElement(react_select_1.default, selectProps);
    };
    FilterPill.prototype.updateAriaLabel = function (selection) {
        var newLabel = Strings.notConfigured;
        if (this._isConfigured(selection)) {
            newLabel = this._getSelectionString(selection);
        }
        this.props.updateAriaLabel(newLabel);
    };
    FilterPill.prototype._handleSelectionChange = function (changeType, newValue) {
        var _this = this;
        var newSelection = Utils_2.clone(this.state.selection);
        switch (changeType) {
            case SelectionChangeType.Dimension:
                newSelection.selectedDimension = newValue;
                break;
            case SelectionChangeType.Operator:
                newSelection.selectedOperator = newValue;
                break;
            case SelectionChangeType.Values:
                // Keeping consistent external interface by treating single-select as single value in array
                if (newValue instanceof Array) {
                    newSelection.selectedValues = newValue;
                }
                else {
                    newSelection.selectedValues = [newValue];
                }
                break;
        }
        // Change the appropriate selection
        this.setState(function () {
            return {
                selection: newSelection,
            };
        });
        var isConfigured = this._isConfigured(newSelection);
        this.props.updateConfiguredStatus(isConfigured);
        this.props.onSelectionChange(changeType, newSelection, isConfigured, Utils_2.clone(this.state.valuesList)).then(function (finalSelection) {
            _this._shouldExpandDropdowns = true;
            _this._autoExpandDropdowns(finalSelection);
            _this.updateAriaLabel(finalSelection);
        });
    };
    FilterPill.prototype._getSelectionString = function (selection) {
        if (this._isConfigured(selection)) {
            return (selection.selectedDimension.label +
                " " +
                (this.props.hideOperatorSelection || selection.selectedOperator ? ":" : selection.selectedOperator.label) +
                " " +
                selection.selectedValues.map(function (option) { return option.label; }).join(", "));
        }
        return null;
    };
    FilterPill.prototype._getSelectedValuesString = function (selection) {
        if (selection && selection.selectedValues && selection.selectedValues.length > 0) {
            return selection.selectedValues.map(function (option) { return option.label; }).join(", ");
        }
        return "";
    };
    FilterPill.prototype._isConfigured = function (selection) {
        return this._hasSelection(selection, this.props.hideOperatorSelection);
    };
    FilterPill.prototype._hasSelection = function (selection, hideOperatorSelection) {
        return (selection &&
            !Utils_1.isNullOrUndefined(selection.selectedDimension) &&
            (!Utils_1.isNullOrUndefined(selection.selectedOperator) || hideOperatorSelection) &&
            !Utils_1.isNullOrUndefined(selection.selectedValues) &&
            selection.selectedValues.length > 0);
    };
    FilterPill.prototype._autoExpandDropdowns = function (selection) {
        if (this.props.autoOpen && this._shouldExpandDropdowns) {
            if (!selection.selectedDimension) {
                if (this._dimensionRef) {
                    this._dimensionRef.focus();
                    this._shouldExpandDropdowns = false;
                }
            }
            else if (!selection.selectedOperator && !this.props.hideOperatorSelection) {
                if (this._operatorRef) {
                    this._operatorRef.focus();
                    this._shouldExpandDropdowns = false;
                }
            }
            else if (!selection.selectedValues || selection.selectedValues.length === 0) {
                if (this._valuesRef) {
                    this._valuesRef.focus();
                    this._shouldExpandDropdowns = false;
                }
            }
        }
    };
    FilterPill.globalInstanceIndex = 0;
    return FilterPill;
}(React.Component));
exports.FilterPill = FilterPill;
//# sourceMappingURL=FilterPill.js.map