import { OptionRendererHandler, ValueRendererHandler } from "@appinsights/react-select";
import { IPillContentConfig } from "./IPillContent";
import { PillOption } from "./CommonInterfaces";
export declare type FilterOption = PillOption;
export interface FilterPillConfigData extends IPillContentConfig {
    /** Whether dimensions are loading */
    areDimensionsLoading: boolean;
    /** Whether operators are loading */
    areOperatorsLoading: boolean;
    /** Whether values are loading */
    areValuesLoading: boolean;
    pickerLists: FilterLists;
    /** Determines if users can create their own value entries in the dropdown */
    canCreateValueEntries?: boolean;
    /** The prompt text when users create their own value entries in the drop down. By default, the format is Create option "{0}" */
    valueEntryCreatorPromptTextFormat?: string;
    /** Allow multi-selection on the values dropdown */
    enableValueMultiSelect?: boolean;
    /** If true, first operator provided to getOperators() is used and dropdown is not shown */
    hideOperatorSelection?: boolean;
    /** Provide preselected values */
    selection?: FilterSelection;
    /**
     * If true, labels are shown for each dropdown. Otherwise, they are hidden.
     */
    showLabels?: boolean;
    /**
     * If true, first unselected dropdown is opened automatically on expansion and user edit.
     */
    autoOpen?: boolean;
    /**
     * Custom renderer for dropdown options
     */
    customOptionRenderers?: {
        /**
         * Custom option renderer for the dimensions dropdown
         */
        dimensionRenderer?: OptionRendererHandler;
        /**
         * Custom option renderer for the operator dropdown
         */
        operatorRenderer?: OptionRendererHandler;
        /**
         * Custom option renderer for the value dropdown
         */
        valueRenderer?: OptionRendererHandler;
    };
    /**
     * Custom renderer for dropdown values
     */
    customValueRenderers?: {
        /**
         * Custom value renderer for the dimensions dropdown
         */
        dimensionRenderer?: ValueRendererHandler;
        /**
         * Custom value renderer for the operator dropdown
         */
        operatorRenderer?: ValueRendererHandler;
        /**
         * Custom value renderer for the value dropdown
         */
        valueRenderer?: ValueRendererHandler;
    };
}
export interface FilterPillConfig extends FilterPillConfigData {
    /** React to dimension value changing. */
    onSelectionChange(changeType: SelectionChangeType, newSelection: FilterSelection, isConfigured: boolean, valuesList?: FilterOption[]): Promise<FilterSelection>;
}
export interface FilterPillProps extends FilterPillConfig {
    editMode: boolean;
    updateConfiguredStatus: (configured: boolean) => void;
    updateAriaLabel: (newLabel: string) => void;
    removeSelf: () => void;
}
export interface FilterSelection {
    selectedDimension: FilterOption;
    selectedOperator: FilterOption;
    selectedValues: FilterOption[];
}
export interface FilterLists {
    dimensionsList: FilterOption[];
    operatorsList: FilterOption[];
    valuesList: FilterOption[];
}
export declare enum SelectionChangeType {
    None = 0,
    Dimension = 1,
    Operator = 2,
    Values = 3
}
