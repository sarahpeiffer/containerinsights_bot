import { IPillContentConfig } from "./IPillContent";
import { OptionRendererHandler, ValueRendererHandler } from "@appinsights/react-select";
import { PillOption } from "./CommonInterfaces";
export declare type GroupOption = PillOption;
export interface GroupPillConfigData extends IPillContentConfig {
    /** Whether values are loading */
    areValuesLoading: boolean;
    /** Group option lists to display when expanded */
    pickerLists: GroupLists;
    /** Enable limit on group pill */
    enableLimit?: boolean;
    /** Enable sort on group pill */
    enableSort?: boolean;
    /** Min limit value text box value*/
    minLimitValue: number;
    /** Max limit value text box value*/
    maxLimitValue: number;
    /** Provide preselected values */
    selection?: GroupSelection;
    /** Show Value of Group Pill on collapsed and it needs enableLimit to be true */
    showValueCollapsed?: boolean;
    /** Show Limit of Group Pill on collapsed and it needs enableSort to be true */
    showLimitCollapsed?: boolean;
    /** Show Sort of Group Pill on Collapsed */
    showSortCollapsed?: boolean;
    /**
     * Used only to check if pill has changed state(new Limit entered and new Sort selected)
     * when compared to default limit and sort passed and use it with above collapsed field
     */
    showChangedValueOnCollapse?: boolean;
    /**
     * Default limit value entered
     */
    defaultLimitValue: number;
    /**
     * Default sort value selected
     */
    defaultSortValue?: number;
    /**
     * If true, labels are shown for each Group. Otherwise, they are hidden.
     */
    showLabels?: boolean;
    /**
     * Whether dropdown should automatically open on pill expansion.
     */
    autoOpen?: boolean;
    /**
     * Custom renderer for dropdown options
     */
    customOptionRenderers?: {
        /**
         * Custom option renderer for the dimensions dropdown
         */
        valueRenderer?: OptionRendererHandler;
        /**
         * Custom option renderer for the value dropdown
         */
        sortRenderer?: OptionRendererHandler;
    };
    /**
     * Custom renderer for dropdown values
     */
    customValueRenderers?: {
        /**
         * Custom value renderer for the dimensions dropdown
         */
        valueRenderer?: ValueRendererHandler;
        /**
         * Custom value renderer for the value dropdown
         */
        sortRenderer?: ValueRendererHandler;
    };
}
export interface GroupPillConfig extends GroupPillConfigData {
    /** React to value selection changing. */
    onSelectionChange(changeType: SelectionGroupChangeType, newSelection: GroupSelection, isConfigured: boolean, pickerList?: GroupLists, limit?: number): void;
}
export interface GroupPillProps extends GroupPillConfig {
    editMode: boolean;
    updateConfiguredStatus: (configuration: boolean) => void;
    updateAriaLabel: (newLabel: string) => void;
    removeSelf: () => void;
    editingComplete: () => void;
}
export interface GroupSelection {
    selectedValue: GroupOption;
    selectedSort: GroupOption;
}
export interface GroupLists {
    valueList: GroupOption[];
    sortList: GroupOption[];
}
export declare enum SelectionGroupChangeType {
    None = 0,
    Value = 1,
    Limit = 2,
    Sort = 3
}
