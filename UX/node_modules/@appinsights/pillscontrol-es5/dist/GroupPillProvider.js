"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react"); // tslint:disable-line:no-unused-variable
/**
 * Creates the IPillContentProvider for creating GroupPill components.
 */
function getGroupContentProvider(contentProps) {
    var pillContent = {
        createContent: function (editMode, props, updateConfiguredStatus, updateAriaLabel, editingComplete, removeSelf) {
            return Promise.resolve().then(function () { return require(/* webpackMode: "lazy", webpackChunkName: "GroupPill" */ "./GroupPill"); }).then(function (GroupPill) {
                return React.createElement(GroupPill.GroupPill, { editMode: editMode, disableEdit: props.disableEdit, areValuesLoading: props.areValuesLoading, pickerLists: props.pickerLists, selection: props.selection, onSelectionChange: props.onSelectionChange, enableLimit: props.enableLimit, enableSort: props.enableSort, minLimitValue: props.minLimitValue, maxLimitValue: props.maxLimitValue, showValueCollapsed: props.showValueCollapsed, showLimitCollapsed: props.showLimitCollapsed, showSortCollapsed: props.showSortCollapsed, showChangedValueOnCollapse: props.showChangedValueOnCollapse, defaultLimitValue: props.defaultLimitValue, defaultSortValue: props.defaultSortValue, showLabels: props.showLabels, autoOpen: props.autoOpen, customOptionRenderers: props.customOptionRenderers, customValueRenderers: props.customValueRenderers, updateConfiguredStatus: updateConfiguredStatus, updateAriaLabel: updateAriaLabel, removeSelf: removeSelf, editingComplete: editingComplete });
            });
        },
        contentProps: contentProps,
    };
    return pillContent;
}
exports.getGroupContentProvider = getGroupContentProvider;
//# sourceMappingURL=GroupPillProvider.js.map