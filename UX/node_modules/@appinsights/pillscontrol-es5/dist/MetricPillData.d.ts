/// <reference types="react" />
import { OptionRendererHandler, ValueRendererHandler } from "@appinsights/react-select";
import { IPillContentConfig } from "./IPillContent";
import { PillOption } from "./CommonInterfaces";
export declare type MetricOption = PillOption;
export interface ResourceOption extends PillOption {
    resourceType: string;
    subscription: string;
    resourceGroup: string;
}
export interface MetricPillConfigData extends IPillContentConfig {
    /** Whether namespaces are loading */
    areNamespacesLoading: boolean;
    /** Whether metrics are loading */
    areMetricsLoading: boolean;
    /** Whether aggregations are loading */
    areAggregationsLoading: boolean;
    pickerLists: MetricLists;
    /** Allow multi-selection on the aggregation dropdown */
    enableAggregationMultiSelect?: boolean;
    /** Hides the namespace dropdown */
    showNamespaceSelection?: boolean;
    /** Disables the namespace dropdown */
    disableNamespaceSelection?: boolean;
    /** Disables the metric dropdown */
    disableMetricSelection?: boolean;
    /** Disables the aggregation dropdown */
    disableAggregationSelection?: boolean;
    /** Controls if the selected resource value is displayed when collapsed */
    showResourceCollapsed: boolean;
    /** Controls if the selected namespace value is displayed when collapsed */
    showNamespaceCollapsed: boolean;
    /** Controls if the selected metric value is displayed when collapsed */
    showMetricCollapsed: boolean;
    /** Controls if the selected aggregation value(s) are displayed when collapsed */
    showAggregationCollapsed: boolean;
    /** Provide preselected values */
    selection?: MetricSelection;
    /**
     * If true, labels are shown for each dropdown. Otherwise, they are hidden.
     */
    showLabels?: boolean;
    /**
     * If true, first unselected dropdown is opened automatically on expansion and user edit.
     */
    autoOpen?: boolean;
    resourceButtonSettings: {
        callback: () => void;
        className?: string;
    };
    /**
     * Custom renderer for dropdown options
     */
    customOptionRenderers?: {
        /**
         * Custom option renderer for the namespace dropdown
         */
        namespaceRenderer?: OptionRendererHandler;
        /**
         * Custom option renderer for the metric dropdown
         */
        metricRenderer?: OptionRendererHandler;
        /**
         * Custom option renderer for the aggregation dropdown
         */
        aggregationRenderer?: OptionRendererHandler;
    };
    /**
     * Custom renderer for dropdown values
     */
    customValueRenderers?: {
        /**
         * Custom value renderer for the namespace dropdown
         */
        namespaceRenderer?: ValueRendererHandler;
        /**
         * Custom value renderer for the metric dropdown
         */
        metricRenderer?: ValueRendererHandler;
        /**
         * Custom value renderer for the aggregation dropdown
         */
        aggregationRenderer?: ValueRendererHandler;
    };
    /** Additional JSX Element appended to end of menu */
    additionalContent?: {
        metricDropdownContent?: JSX.Element;
        namespaceDropdownContent?: JSX.Element;
    };
    /** Banner JSX element appended to the top of the menu */
    banner?: {
        metricDropdownContent?: JSX.Element;
        namespaceDropdownContent?: JSX.Element;
    };
    metricDropdownSettings?: {
        /** The default row height of the metric option; it is 26 if not specified */
        defaultMetricOptionRowHeight?: number;
        /** React to open the metric drop down */
        onOpenMetricDropdown?: (pillId: string, resourceOption: ResourceOption, namespaceOption: PillOption) => void;
        /** The UI element to customize the default simple "No Results Found" UI on searching */
        noResultsText?: JSX.Element;
    };
    namespaceDropdownSettings?: {
        /** React to open the namespace drop down */
        onOpenNamespaceDropdown?: (pillId: string, resourceOption: ResourceOption) => void;
        className?: string;
        label?: JSX.Element;
    };
    /** id of the pill */
    pillId?: string;
}
export interface MetricPillConfig extends MetricPillConfigData {
    /** Hides the recent view if true */
    hideRecent?: boolean;
    /** React to dimension value changing. */
    onSelectionChange(changeType: ChangeType, newSelection: MetricSelection, isConfigured: boolean): Promise<MetricSelection>;
    /** React to dropdown view switch between recent and search mode */
    onViewChange?(recentView: boolean): void;
}
export interface MetricPillProps extends MetricPillConfig {
    editMode: boolean;
    updateConfiguredStatus: (configured: boolean) => void;
    updateAriaLabel: (newLabel: string) => void;
}
export interface MetricSelection {
    selectedResource: ResourceOption;
    selectedNamespace: MetricOption;
    selectedMetric: MetricOption;
    selectedAggregation: MetricOption[];
}
export interface MetricLists {
    namespaceList: MetricOption[];
    metricsList: MetricOption[];
    aggregationsList: MetricOption[];
}
export declare enum ChangeType {
    None = 0,
    Resource = 1,
    Namespace = 2,
    Metric = 3,
    Aggregation = 4
}
