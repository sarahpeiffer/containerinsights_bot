"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react"); // tslint:disable-line:no-unused-variable
/**
 * Creates the IPillContentProvider for creating MetricPill components.
 */
function getMetricContentProvider(contentProps) {
    var pillContent = {
        createContent: function (editMode, props, updateConfiguredStatus, updateAriaLabel, editingComplete, removeSelf) {
            return Promise.resolve().then(function () { return require(/* webpackMode: "lazy", webpackChunkName: "MetricPill" */ "./MetricPill"); }).then(function (MetricPill) {
                return (React.createElement(MetricPill.MetricPill, { disableEdit: props.disableEdit, editMode: editMode, areNamespacesLoading: props.areNamespacesLoading, areMetricsLoading: props.areMetricsLoading, areAggregationsLoading: props.areAggregationsLoading, pickerLists: props.pickerLists, enableAggregationMultiSelect: props.enableAggregationMultiSelect, showNamespaceSelection: props.showNamespaceSelection, disableNamespaceSelection: props.disableNamespaceSelection, disableMetricSelection: props.disableMetricSelection, disableAggregationSelection: props.disableAggregationSelection, showResourceCollapsed: props.showResourceCollapsed, showNamespaceCollapsed: props.showNamespaceCollapsed, showMetricCollapsed: props.showMetricCollapsed, showAggregationCollapsed: props.showAggregationCollapsed, selection: props.selection, onSelectionChange: props.onSelectionChange, onViewChange: props.onViewChange, showLabels: props.showLabels, autoOpen: props.autoOpen, pillId: props.pillId, customOptionRenderers: props.customOptionRenderers, customValueRenderers: props.customValueRenderers, additionalContent: props.additionalContent, banner: props.banner, hideRecent: props.hideRecent, updateConfiguredStatus: updateConfiguredStatus, updateAriaLabel: updateAriaLabel, resourceButtonSettings: props.resourceButtonSettings, metricDropdownSettings: props.metricDropdownSettings, namespaceDropdownSettings: props.namespaceDropdownSettings }));
            });
        },
        contentProps: contentProps,
    };
    return pillContent;
}
exports.getMetricContentProvider = getMetricContentProvider;
//# sourceMappingURL=MetricPillProvider.js.map