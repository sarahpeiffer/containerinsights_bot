import * as React from "react";
import { IPillContentProvider } from "./IPillContent";
import "./Styles/Pill";
export interface PillParameters {
    /**
     * The unique id for this pill (pill id's should be unique per container).
     */
    pillId: string;
    /**
     * Determines the content that is displayed in the pill.
     */
    pillContent: IPillContentProvider<any>;
    /**
     * Aria label to prepend to default one.
     */
    ariaLabel?: string;
    /**
     * Whether pill should expand on creation.
    */
    autoExpand?: boolean;
    /**
     * A custom class to apply on the pill.
     */
    className?: string;
    /**
     * The icon for this pill. If none is given, no icon is shown.
     */
    icon?: JSX.Element;
    pillName?: string;
    /**
     * Controls if the remove button is displayed.
     */
    unRemovable?: boolean;
    /**
     * Label displayed inside the pill
     */
    pillLabel?: string;
    /**
     * Whether pill should show checkbox to indicate all properties are selected.
    */
    showCheckboxComplete?: boolean;
}
export interface PillProps extends PillParameters {
    /**
     * Not really used but required by React.
     */
    key: string;
    /**
     * Id of the PillContainer that contains this pill.
     */
    containerId: string;
    /**
     * Called when the remove button is clicked. Passed through by the PillContainer to the PillContainer consumer.
     */
    onRemove(containerId: string, pillId: string): void;
    /**
     * Called on edit mode changes to allow async loading
     */
    onEditModeChange?(containerId: string, pillId: string, inEditMode: boolean): void;
    /**
     * Called when an editing disabled pill is clicked
     */
    onClick?(containerId: string, pillId: string): void;
}
export interface PillState {
    /** Indicates if the pill should display it's edit UI */
    editMode: boolean;
    /** Internally-set aria label. */
    ariaLabel: string;
    /** If the pill is completely configured vs in an partial or un configured state */
    configured: boolean;
    /** Determines if a render should occur based on if there is newer pill content */
    contentUpdateCounter: number;
    /** content from the pill content provider to display inside the pill */
    content: JSX.Element;
}
export declare class Pill extends React.Component<PillProps, PillState> {
    private _contentDiv;
    constructor(props?: PillProps, context?: any);
    componentWillMount(): void;
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: PillProps, nextState: PillState, nextContext: any): boolean;
    private _updateContent;
    render(): JSX.Element;
    private _generateLabel;
    private _generateAriaLabel;
    private _onClickPill;
    private _generateRemoveButton;
    private _generateCompletedButton;
    private _removePill;
    private _handleKeyUp;
    private _handleClickOutside;
    private _handleEditStart;
    private _handleEditComplete;
    private _updateConfiguredStatus;
    private _updateAriaLabel;
    private _isEditingDisabled;
}
