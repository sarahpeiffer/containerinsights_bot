"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var Strings = require("PillResources");
var CompletedIcon_1 = require("./Images/CompletedIcon");
var Utils_1 = require("./Utils");
var RemoveIcon_1 = require("./Images/RemoveIcon");
require("./Styles/Pill");
var Pill = /** @class */ (function (_super) {
    __extends(Pill, _super);
    function Pill(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.state = { editMode: false, ariaLabel: "", configured: false, contentUpdateCounter: 0, content: null };
        _this._handleClickOutside = _this._handleClickOutside.bind(_this);
        _this._handleKeyUp = _this._handleKeyUp.bind(_this);
        _this._handleEditStart = _this._handleEditStart.bind(_this);
        _this._updateConfiguredStatus = _this._updateConfiguredStatus.bind(_this);
        _this._updateAriaLabel = _this._updateAriaLabel.bind(_this);
        _this._handleEditComplete = _this._handleEditComplete.bind(_this);
        _this._removePill = _this._removePill.bind(_this);
        _this._onClickPill = _this._onClickPill.bind(_this);
        return _this;
    }
    Pill.prototype.componentWillMount = function () {
        if (this.props && this.props.autoExpand) {
            this._handleEditStart();
            if (this.props.onEditModeChange) {
                this.props.onEditModeChange(this.props.containerId, this.props.pillId, true);
            }
        }
    };
    Pill.prototype.componentDidMount = function () {
        this._updateContent(this.state.editMode, this.props);
    };
    Pill.prototype.shouldComponentUpdate = function (nextProps, nextState, nextContext) {
        var disableEdit = nextProps.pillContent && nextProps.pillContent.contentProps && nextProps.pillContent.contentProps.disableEdit;
        var nextEditMode = !disableEdit && nextState.editMode;
        if (this.props.onEditModeChange && this.state.editMode !== nextEditMode) {
            this.props.onEditModeChange(nextProps.containerId, nextProps.pillId, nextEditMode);
        }
        if (this.state.contentUpdateCounter !== nextState.contentUpdateCounter) {
            return true;
        }
        else {
            this._updateContent(nextEditMode, nextProps);
            return false;
        }
    };
    Pill.prototype._updateContent = function (editMode, passedProps) {
        var _this = this;
        var contentPromise = passedProps.pillContent.createContent(editMode, passedProps.pillContent.contentProps, this._updateConfiguredStatus, this._updateAriaLabel, this._handleEditComplete, this._removePill);
        contentPromise.then(function (content) {
            _this.setState(function (prevState) {
                return {
                    contentUpdateCounter: prevState.contentUpdateCounter + 1,
                    content: content
                };
            });
        });
    };
    Pill.prototype.render = function () {
        var _this = this;
        var pillContentClass = "aim-pill-content-container";
        var removeButton = undefined;
        var completedButton = undefined;
        var isEditingDisabled = this._isEditingDisabled();
        if (!this.props.unRemovable) {
            removeButton = this._generateRemoveButton();
        }
        else {
            pillContentClass += " aim-pill-content-unRemovable";
        }
        if (this.props.showCheckboxComplete && this.state.configured && this.state.editMode) {
            completedButton = this._generateCompletedButton();
        }
        var pillClass = "aim-pill";
        if (this.state.editMode) {
            pillClass += " aim-pill-editing";
        }
        else if (!isEditingDisabled) {
            pillClass += " aim-pill-editable";
        }
        var icon;
        if (this.props.icon) {
            icon = React.createElement("div", { className: "aim-pill-icon aim-custom-icon" }, this.props.icon);
            pillClass += " with-icon";
        }
        var pillLabel;
        if (this.props.pillLabel) {
            pillLabel = React.createElement("div", { className: "aim-pill-label" }, this.props.pillLabel);
        }
        if (this.props.unRemovable) {
            pillClass += " unremovable";
        }
        if (isEditingDisabled && !this.props.onClick) {
            pillClass += " aim-disabled";
        }
        if (this.props.className) {
            pillClass += (" " + this.props.className);
        }
        return React.createElement("div", { id: this.props.pillId, className: pillClass, ref: function (element) { _this._contentDiv = element; }, role: this.state.editMode ? "group" : "button", "aria-expanded": this.state.editMode, onKeyUp: this._handleKeyUp, tabIndex: 0, "aria-label": this._generateAriaLabel(this._generateLabel()), title: this.state.editMode ? undefined : this._generateLabel(), onClick: isEditingDisabled ? this._onClickPill : this._handleEditStart },
            pillLabel,
            icon,
            React.createElement("div", { className: pillContentClass }, this.state.content),
            completedButton || removeButton);
    };
    Pill.prototype._generateLabel = function (label) {
        if (label === void 0) { label = this.state.ariaLabel; }
        var pillContentAriaLabel = this.props.pillContent && this.props.pillContent.contentProps && this.props.pillContent.contentProps.ariaLabel;
        if (pillContentAriaLabel) {
            label = pillContentAriaLabel + " " + label;
        }
        if (this.props.ariaLabel) {
            label = this.props.ariaLabel + " " + label;
        }
        return label;
    };
    Pill.prototype._generateAriaLabel = function (label) {
        if (label === void 0) { label = this.state.ariaLabel; }
        if (this.props.pillLabel) {
            label = this.props.pillLabel + label;
        }
        if (this.props.unRemovable) {
            label = label + " " + Strings.unremovable;
        }
        if (this._isEditingDisabled()) {
            label = label + " " + Strings.uneditable;
        }
        return label;
    };
    Pill.prototype._onClickPill = function () {
        this.props.onClick(this.props.containerId, this.props.pillId);
    };
    Pill.prototype._generateRemoveButton = function () {
        var _this = this;
        var removeButtonClass = "aim-pill-remove";
        if (this.props && this.props.pillContent && this.props.pillContent.contentProps && this.props.pillContent.contentProps.showLabels) {
            removeButtonClass += " is-labeled";
        }
        return React.createElement("div", { role: "button", "aria-label": Strings.removePill.replace("{0}", this.props.pillName || Strings.pill), title: Strings.removePill.replace("{0}", this.props.pillName || Strings.pill), className: removeButtonClass, onClick: function (e) { return _this._removePill(); }, onKeyUp: function (e) { Utils_1.keyHandler(e, "Enter", _this._removePill); }, tabIndex: 0 },
            React.createElement(RemoveIcon_1.RemoveIcon, null));
    };
    Pill.prototype._generateCompletedButton = function () {
        var _this = this;
        return React.createElement("div", { role: "button", "aria-label": Strings.completePill.replace("{0}", this.props.pillName || ""), title: Strings.completePill.replace("{0}", this.props.pillName || ""), className: "aim-pill-complete", onClick: function (e) { return _this._handleEditComplete(); }, onKeyUp: function (e) { Utils_1.keyHandler(e, "Enter", _this._handleEditComplete); }, tabIndex: 0 },
            React.createElement(CompletedIcon_1.CompletedIcon, null));
    };
    Pill.prototype._removePill = function () {
        this.props.onRemove(this.props.containerId, this.props.pillId);
    };
    Pill.prototype._handleKeyUp = function (event) {
        Utils_1.keyHandler(event, "Enter", this._handleEditStart);
        Utils_1.keyHandler(event, "Escape", this._handleEditComplete);
    };
    Pill.prototype._handleClickOutside = function (event) {
        // Any-casted event.target in order to be able to search using it
        if ((!this._contentDiv || !this._contentDiv.contains(event.target)) && this.state.configured) {
            this._handleEditComplete();
        }
    };
    Pill.prototype._handleEditStart = function () {
        // If we're not in edit mode, and we support edit mode, enter edit mode!
        if (!this._isEditingDisabled() && !this.state.editMode) {
            this.setState(function () {
                return { editMode: true };
            });
        }
        document.addEventListener("click", this._handleClickOutside);
    };
    Pill.prototype._handleEditComplete = function () {
        // Force close if the pill content is telling us editing is done
        this.setState(function () {
            return { editMode: false };
        });
        document.removeEventListener("click", this._handleClickOutside);
    };
    Pill.prototype._updateConfiguredStatus = function (status) {
        this.setState(function () {
            return { configured: status };
        });
    };
    Pill.prototype._updateAriaLabel = function (newLabel) {
        if (newLabel !== this.state.ariaLabel) {
            this.setState(function () {
                return { ariaLabel: newLabel };
            });
        }
    };
    Pill.prototype._isEditingDisabled = function () {
        return this.props.pillContent && this.props.pillContent.contentProps && this.props.pillContent.contentProps.disableEdit;
    };
    return Pill;
}(React.Component));
exports.Pill = Pill;
//# sourceMappingURL=Pill.js.map