"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react"); // tslint:disable-line:no-unused-variable
var Strings = require("PillResources");
var DefaultAddIcon_1 = require("./Images/DefaultAddIcon");
var Utils_1 = require("./Utils");
var Pill_1 = require("./Pill");
require("./Styles/PillContainer");
require("./Styles/Pill");
/**
 * If set to Enabled (default value), add button is shown and enabled
 * If set to Disabled, add button is shown and disabled
 * If set to Hidden, add button is hidden and disabled
 */
var AddButtonStatus;
(function (AddButtonStatus) {
    AddButtonStatus[AddButtonStatus["Enabled"] = 0] = "Enabled";
    AddButtonStatus[AddButtonStatus["Disabled"] = 1] = "Disabled";
    AddButtonStatus[AddButtonStatus["Hidden"] = 2] = "Hidden";
})(AddButtonStatus = exports.AddButtonStatus || (exports.AddButtonStatus = {}));
exports.PillContainer = function (props) {
    var childPills = props.pills.map(function (pillProps) {
        // undefined should result in a pill not being displayed
        if (!pillProps) {
            return undefined;
        }
        // If pill container autoExpand is not set, then use the pill autoExpand prop.
        var autoExpand = Utils_1.isNullOrUndefined(props.autoExpand) ? pillProps.autoExpand : props.autoExpand;
        return React.createElement(Pill_1.Pill, { containerId: props.containerId, pillId: pillProps.pillId, key: props.containerId + pillProps.pillId, pillContent: pillProps.pillContent, onRemove: props.onRemove, onEditModeChange: props.onEditModeChange, onClick: props.onClick, unRemovable: pillProps.unRemovable, icon: pillProps.icon, pillLabel: pillProps.pillLabel, ariaLabel: pillProps.ariaLabel, autoExpand: autoExpand, showCheckboxComplete: pillProps.showCheckboxComplete, pillName: pillProps.pillName, className: pillProps.className });
    });
    var addButton;
    if (props.addButtonStatus !== AddButtonStatus.Hidden) {
        var addLabel = undefined;
        var addClass = "aim-pill aim-pill-addbutton";
        if (props.addButtonStatus === AddButtonStatus.Disabled) {
            addClass += " aim-disabled";
        }
        if ((props.alwaysShowLabel || props.pills.length === 0) && !Utils_1.isNullOrWhiteSpace(props.addLabel)) {
            addLabel = React.createElement("span", { className: "aim-pill-label" }, props.addLabel);
        }
        var addIconClass = "aim-pill-icon";
        if (props.addIcon) {
            addIconClass += " aim-custom-icon";
        }
        var onAddHelper_1 = function () {
            if (!props.addButtonStatus) {
                props.onAdd(props.containerId);
            }
        };
        addButton = React.createElement("div", { className: addClass, role: "button", title: Strings.addPillTooltip, onClick: function (e) { return onAddHelper_1(); }, onKeyPress: function (e) { return Utils_1.keyHandler(e, "Enter", onAddHelper_1); }, tabIndex: 0, "aria-disabled": !!props.addButtonStatus },
            React.createElement("div", { className: addIconClass }, props.addIcon ? props.addIcon : React.createElement(DefaultAddIcon_1.DefaultAddIcon, null)),
            addLabel);
    }
    var containerClass = "aim-pillcontainer";
    if (props.className) {
        containerClass += (" " + props.className);
    }
    return React.createElement("div", { id: props.containerId, className: containerClass },
        childPills,
        addButton);
};
//# sourceMappingURL=PillContainer.js.map