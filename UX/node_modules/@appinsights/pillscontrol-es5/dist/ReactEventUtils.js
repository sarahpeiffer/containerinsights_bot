"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 Provides higher-level abstractions for mouse events on top of the core React element events.
 */
var ReactEventUtils = /** @class */ (function () {
    function ReactEventUtils() {
    }
    /**
     Appends an event handler to an existing event handler.
     Since each event in a React element can have only one event handler, this method is useful
     in that it allows you to chain several handlers together into one.
     @param existingEventHandler The existing event handler to append to.  If there is no existing event handler, then
            newEventHandler will simply be returned as the resulting handler.
     @param newEventHandler The event handler to append.
     @returns A handler that invokes both existingEventHandler, if it is set, and newEventHandler.
     */
    ReactEventUtils.appendHandler = function (existingEventHandler, newEventHandler) {
        if (!existingEventHandler) {
            return newEventHandler;
        }
        return function (ev) {
            existingEventHandler(ev);
            newEventHandler(ev);
        };
    };
    ReactEventUtils.appendKeyHandler = function (existingEventHandler, newEventHandler) {
        if (!existingEventHandler) {
            return newEventHandler;
        }
        return function (ev) {
            existingEventHandler(ev);
            newEventHandler(ev);
        };
    };
    return ReactEventUtils;
}());
exports.ReactEventUtils = ReactEventUtils;
//# sourceMappingURL=ReactEventUtils.js.map