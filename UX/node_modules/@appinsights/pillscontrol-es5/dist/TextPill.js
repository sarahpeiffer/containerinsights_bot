"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
require("./Styles/TextPill");
var TextPill = /** @class */ (function (_super) {
    __extends(TextPill, _super);
    function TextPill(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.state = { textValue: props && props.text };
        _this._handleChange = _this._handleChange.bind(_this);
        _this._handleKeyDown = _this._handleKeyDown.bind(_this);
        return _this;
    }
    TextPill.prototype.componentWillMount = function () {
        this.props.updateAriaLabel(this.state.textValue);
        // Text pills by default have a value
        this.props.updateConfiguredStatus(true);
    };
    TextPill.prototype.componentWillReceiveProps = function (nextProps) {
        if (!nextProps.editMode && this.props.editMode) {
            // Just transitioned from editMode to non-edit, need to push out changes
            this._finishEdit();
        }
        else if (nextProps.text) {
            this.setState(function (prevState, currentProps) {
                currentProps.updateAriaLabel(nextProps.text);
                return { textValue: nextProps.text };
            });
        }
    };
    TextPill.prototype.render = function () {
        if (this.props.editMode) {
            return React.createElement("input", { type: "text", className: "aim-pill-text-input", autoFocus: true, value: this.state.textValue, onChange: this._handleChange, onKeyDown: this._handleKeyDown });
        }
        else {
            return React.createElement("span", { className: "pillcontent" }, this.props.text);
        }
    };
    TextPill.prototype._handleChange = function (event) {
        var newText = event.target.value;
        this.setState(function () {
            return { textValue: newText };
        });
    };
    TextPill.prototype._handleKeyDown = function (event) {
        if (event.key === "Enter" && this.props.editMode) {
            this._finishEdit();
        }
    };
    TextPill.prototype._finishEdit = function () {
        if (this.state.textValue && this.state.textValue.trim().length > 0) {
            this.props.onTextUpdated(this.state.textValue);
            this.props.editingComplete();
            this.props.updateAriaLabel(this.state.textValue);
        }
    };
    return TextPill;
}(React.Component));
exports.TextPill = TextPill;
//# sourceMappingURL=TextPill.js.map