"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var moment = require("moment");
var Strings = require("PillResources");
var typescript_string_operations_1 = require("typescript-string-operations");
var TimeInterfaces_1 = require("./TimeInterfaces");
function isRelative(timeData) {
    var relativeData = timeData;
    return !!(relativeData && relativeData.relative);
}
exports.isRelative = isRelative;
function isAbsolute(timeData) {
    var absoluteData = timeData;
    return !!(absoluteData && absoluteData.absolute);
}
exports.isAbsolute = isAbsolute;
function clone(timeData) {
    if (!timeData) {
        return undefined;
    }
    var clonedOptions = {};
    if (timeData.options) {
        clonedOptions.appliedISOGrain = timeData.options.appliedISOGrain;
        clonedOptions.showUTCTime = timeData.options.showUTCTime;
        if (timeData.options.actualGrain) {
            clonedOptions.actualGrain = timeData.options.actualGrain;
        }
        clonedOptions.hideActualGrain = timeData.options.hideActualGrain;
    }
    if (isAbsolute(timeData)) {
        var clonedTimeRange = {
            startTime: new Date(timeData.absolute.startTime.getTime()),
            endTime: new Date(timeData.absolute.endTime.getTime()),
        };
        var clonedAbsolute = {
            options: clonedOptions,
            absolute: clonedTimeRange,
        };
        return clonedAbsolute;
    }
    else {
        var clonedRelative = {
            options: clonedOptions,
            relative: {
                duration: timeData.relative.duration,
            },
        };
        return clonedRelative;
    }
}
exports.clone = clone;
function isTimeDataEqual(leftTimeData, rightTimeData) {
    if (!leftTimeData && !rightTimeData) {
        return true;
    }
    else if (!leftTimeData || !rightTimeData) {
        return false;
    }
    if (!isOptionDataEqual(leftTimeData.options, rightTimeData.options)) {
        return false;
    }
    if (isAbsolute(leftTimeData)) {
        if (isAbsolute(rightTimeData)) {
            return (leftTimeData.absolute.startTime.getTime() === rightTimeData.absolute.startTime.getTime() &&
                leftTimeData.absolute.endTime.getTime() === rightTimeData.absolute.endTime.getTime());
        }
        else {
            return false;
        }
    }
    else {
        if (isRelative(rightTimeData)) {
            return leftTimeData.relative.duration === rightTimeData.relative.duration;
        }
        else {
            return false;
        }
    }
}
exports.isTimeDataEqual = isTimeDataEqual;
function isOptionDataEqual(leftOptions, rightOptions) {
    if (!leftOptions && !rightOptions) {
        return true;
    }
    else if (!leftOptions || !rightOptions) {
        return false;
    }
    if (leftOptions.appliedISOGrain !== rightOptions.appliedISOGrain) {
        return false;
    }
    if (leftOptions.showUTCTime !== rightOptions.showUTCTime) {
        return false;
    }
    return true;
}
exports.isOptionDataEqual = isOptionDataEqual;
function toDisplayString(timeData) {
    if (isRelative(timeData)) {
        return getRelativeDisplayString(timeData.relative.duration);
    }
    else {
        var start = moment(timeData.absolute.startTime);
        var end = moment(timeData.absolute.endTime);
        if (timeData.options.showUTCTime) {
            start = start.utc();
            end = end.utc();
        }
        var dateFormat = moment.localeData().longDateFormat("l");
        var formatEndDate = true;
        if (timeData.absolute.startTime.getFullYear() === timeData.absolute.endTime.getFullYear()) {
            if (timeData.absolute.startTime.getDate() === timeData.absolute.endTime.getDate()
                && timeData.absolute.startTime.getMonth() === timeData.absolute.endTime.getMonth()) {
                formatEndDate = false;
            }
            // Only display the year if the year is actually different
            // see https://stackoverflow.com/questions/27360102/locale-and-specific-date-format-with-moment-js
            dateFormat = dateFormat.replace(/[^MD]*YYYY[^MD]*?(?=M|$| [Hh])/, "");
        }
        else {
            // use 2 digit year format
            dateFormat = dateFormat.replace("YYYY", "YY");
        }
        // use moment for formatting because Date.toLocaleDateString output varies between browsers
        // Returns date/time in the form 3/2/18 17:38 - 3/9/18 17:38
        var dateDisplayString = typescript_string_operations_1.String.Format(Strings.absoluteTimeRangeDisplayFormat, start.format(dateFormat), start.format("LT"), formatEndDate ? end.format(dateFormat) : "", end.format("LT"));
        return dateDisplayString;
    }
}
exports.toDisplayString = toDisplayString;
function getRelativeDisplayString(durationMs) {
    switch (durationMs) {
        case TimeInterfaces_1.TimeValues.Last30Minutes:
            return typescript_string_operations_1.String.Format(Strings.lastMinutes, "30");
        case TimeInterfaces_1.TimeValues.LastHour:
            return Strings.lastHour;
        case TimeInterfaces_1.TimeValues.Last4Hours:
            return typescript_string_operations_1.String.Format(Strings.lastHours, "4");
        case TimeInterfaces_1.TimeValues.Last6Hours:
            return typescript_string_operations_1.String.Format(Strings.lastHours, "6");
        case TimeInterfaces_1.TimeValues.Last12Hours:
            return typescript_string_operations_1.String.Format(Strings.lastHours, "12");
        case TimeInterfaces_1.TimeValues.LastDay:
            return typescript_string_operations_1.String.Format(Strings.lastHours, "24");
        case TimeInterfaces_1.TimeValues.Last2Days:
            return typescript_string_operations_1.String.Format(Strings.lastHours, "48");
        case TimeInterfaces_1.TimeValues.Last3Days:
            return typescript_string_operations_1.String.Format(Strings.lastDays, "3");
        case TimeInterfaces_1.TimeValues.Last7Days:
            return typescript_string_operations_1.String.Format(Strings.lastDays, "7");
        case TimeInterfaces_1.TimeValues.Last30Days:
            return typescript_string_operations_1.String.Format(Strings.lastDays, "30");
        case TimeInterfaces_1.TimeValues.Last90Days:
            return typescript_string_operations_1.String.Format(Strings.lastDays, "90");
        default:
            throw new Error("Unexpected duration value: " + durationMs);
    }
}
exports.getRelativeDisplayString = getRelativeDisplayString;
function getTimeValueDisplayString(time) {
    if (time === TimeInterfaces_1.TimeValues.Custom) {
        return Strings.custom;
    }
    else {
        return getRelativeDisplayString(time);
    }
}
exports.getTimeValueDisplayString = getTimeValueDisplayString;
function getTimeValue(timeData) {
    if (isAbsolute(timeData)) {
        return TimeInterfaces_1.TimeValues.Custom;
    }
    else {
        return timeData.relative.duration;
    }
}
exports.getTimeValue = getTimeValue;
function getDefaultTimeData() {
    return {
        options: {
            appliedISOGrain: "Auto",
            showUTCTime: false,
        },
        relative: {
            duration: TimeInterfaces_1.TimeValues.LastDay,
        },
    };
}
exports.getDefaultTimeData = getDefaultTimeData;
function toISOString(timeGrain) {
    switch (timeGrain) {
        case TimeInterfaces_1.TimeGrains.Minute:
            return "PT1M";
        case TimeInterfaces_1.TimeGrains.FiveMinute:
            return "PT5M";
        case TimeInterfaces_1.TimeGrains.TenMinute:
            return "PT10M";
        case TimeInterfaces_1.TimeGrains.FifteenMinute:
            return "PT15M";
        case TimeInterfaces_1.TimeGrains.ThirtyMinute:
            return "PT30M";
        case TimeInterfaces_1.TimeGrains.Hour:
            return "PT1H";
        case TimeInterfaces_1.TimeGrains.SixHours:
            return "PT6H";
        case TimeInterfaces_1.TimeGrains.TwelveHours:
            return "PT12H";
        case TimeInterfaces_1.TimeGrains.Day:
            return "P1D";
        case TimeInterfaces_1.TimeGrains.Week:
            return "P1W";
        case TimeInterfaces_1.TimeGrains.Month:
            return "P1M";
        case TimeInterfaces_1.TimeGrains.Auto:
        default:
            return "Auto";
    }
}
exports.toISOString = toISOString;
function timeGrainDisplayString(timeGrain) {
    switch (timeGrain) {
        case TimeInterfaces_1.TimeGrains.Minute:
            return Strings.oneMinute;
        case TimeInterfaces_1.TimeGrains.FiveMinute:
            return typescript_string_operations_1.String.Format(Strings.minutes, "5");
        case TimeInterfaces_1.TimeGrains.TenMinute:
            return typescript_string_operations_1.String.Format(Strings.minutes, "10");
        case TimeInterfaces_1.TimeGrains.FifteenMinute:
            return typescript_string_operations_1.String.Format(Strings.minutes, "15");
        case TimeInterfaces_1.TimeGrains.ThirtyMinute:
            return typescript_string_operations_1.String.Format(Strings.minutes, "30");
        case TimeInterfaces_1.TimeGrains.Hour:
            return Strings.oneHour;
        case TimeInterfaces_1.TimeGrains.SixHours:
            return typescript_string_operations_1.String.Format(Strings.hours, "6");
        case TimeInterfaces_1.TimeGrains.TwelveHours:
            return typescript_string_operations_1.String.Format(Strings.hours, "12");
        case TimeInterfaces_1.TimeGrains.Day:
            return Strings.oneDay;
        case TimeInterfaces_1.TimeGrains.Week:
            return Strings.oneWeek;
        case TimeInterfaces_1.TimeGrains.Month:
            return Strings.oneMonth;
        case TimeInterfaces_1.TimeGrains.Auto:
        default:
            return Strings.automatic;
    }
}
exports.timeGrainDisplayString = timeGrainDisplayString;
function fromISOStringToTimeGrain(isoTimeSpan) {
    switch (isoTimeSpan) {
        case "Auto":
            return TimeInterfaces_1.TimeGrains.Auto;
        case "PT1M":
            return TimeInterfaces_1.TimeGrains.Minute;
        case "PT5M":
            return TimeInterfaces_1.TimeGrains.FiveMinute;
        case "PT10M":
            return TimeInterfaces_1.TimeGrains.TenMinute;
        case "PT15M":
            return TimeInterfaces_1.TimeGrains.FifteenMinute;
        case "PT30M":
            return TimeInterfaces_1.TimeGrains.ThirtyMinute;
        case "PT1H":
            return TimeInterfaces_1.TimeGrains.Hour;
        case "PT6H":
            return TimeInterfaces_1.TimeGrains.SixHours;
        case "PT12H":
            return TimeInterfaces_1.TimeGrains.TwelveHours;
        case "P1D":
            return TimeInterfaces_1.TimeGrains.Day;
        case "P1W":
            return TimeInterfaces_1.TimeGrains.Week;
        case "P1M":
            return TimeInterfaces_1.TimeGrains.Month;
        default:
            return TimeInterfaces_1.TimeGrains.Auto;
    }
}
exports.fromISOStringToTimeGrain = fromISOStringToTimeGrain;
function fromISOStringToDisplayString(isoTimeSpan) {
    if (isoTimeSpan === "Variable") {
        return Strings.variable;
    }
    return timeGrainDisplayString(fromISOStringToTimeGrain(isoTimeSpan));
}
exports.fromISOStringToDisplayString = fromISOStringToDisplayString;
function getStartTime(endTime, duration) {
    var scalar = 1000 * 60 * 60 * 24;
    var startTime = new Date(endTime.getTime() - Math.round(duration * scalar) / scalar);
    return startTime;
}
exports.getStartTime = getStartTime;
//# sourceMappingURL=TimeUtils.js.map