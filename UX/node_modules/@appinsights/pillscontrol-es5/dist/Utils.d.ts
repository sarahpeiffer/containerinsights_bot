/// <reference types="react" />
import { PillOption } from "./CommonInterfaces";
/**
 * Indicates whether the specified object is null or undefined.
 * @param value The value to test.
 * @returns True if the value parameter is null or undefined; otherwise, false.
 */
export declare function isNullOrUndefined(value: any): boolean;
/**
 * Checks if the string is null, undefined or whitespace.
 * @param  value The target string.
 * @return true if the string is null, undefined or whitespace; otherwise, false.
 */
export declare function isNullOrWhiteSpace(value: any): boolean;
/**
 * Merge the source object into target object. Returns the extended object.
 */
export declare function extendObject(target: any, source: any): any;
/**
 * Executes `fn` only when the key pressed in `event` matches passed in `key`.
 */
export declare function keyHandler(event: React.KeyboardEvent<any>, key: string, fn: () => void): void;
export declare function getDropdownWrapperClassName(showLabels: boolean, wrapperClassName?: string): string;
export declare function getNoResultsEntry(label?: string): PillOption;
export declare function getLoadingEntry(): PillOption;
export declare function debounce(context: any, func: (value: string) => void, wait: number): () => void;
export declare function isIE11(): boolean;
export declare function newGuid(): string;
export declare function clone<T>(source: T, deep?: boolean): T;
export declare function extend<T, U>(target: T, source: U, deep?: boolean): T & U;
