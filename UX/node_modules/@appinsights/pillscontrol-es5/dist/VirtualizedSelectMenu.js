"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var react_virtualized_1 = require("react-virtualized");
var React = require("react");
var maxHeight = 198;
function createVirtualizedMenuRenderFunction(banner, additionalContent, optionRowHeight, selectAllCallback, selectNoneCallback) {
    if (optionRowHeight === void 0) { optionRowHeight = 26; }
    return function renderVirtualizedMenu(menuProps) {
        var height = getListHeight(menuProps.options, optionRowHeight);
        var scrollToIndex = menuProps.options.indexOf(menuProps.focusedOption);
        var rowRenderer = function (rowProps) {
            var OptionComponent = menuProps.optionComponent;
            var option = menuProps.options[rowProps.index];
            var valueKey = menuProps.valueKey;
            var valueArray = menuProps.valueArray;
            var isSelected = valueArray && valueArray.some(function (x) { return x[valueKey] === option[valueKey]; });
            var isFocused = option && menuProps.focusedOption && option[valueKey] === menuProps.focusedOption[valueKey];
            var classNames = ["Select-option"];
            if (isFocused) {
                classNames.push("is-focused");
            }
            if (option.disabled) {
                classNames.push("is-disabled");
            }
            if (isSelected) {
                classNames.push("is-selected");
            }
            if (menuProps.optionClassName) {
                classNames.push(menuProps.optionClassName);
            }
            var optionClass = classNames.join(" ");
            var key = "option-" + rowProps.index + "-" + option[menuProps.valueKey];
            return (React.createElement("div", { style: rowProps.style, key: "outer" + key, className: "Virtualized-select-option" },
                React.createElement(OptionComponent, { className: optionClass, focusOption: menuProps.focusOption, inputValue: menuProps.inputValue, instancePrefix: menuProps.instancePrefix, isDisabled: option.disabled, isFocused: isFocused, isSelected: isSelected, key: key, onFocus: menuProps.onFocus, onSelect: menuProps.onSelect, option: option, optionIndex: rowProps.index, ref: function (ref) { menuProps.onOptionRef(ref, isFocused); }, removeValue: menuProps.removeValue, selectValue: menuProps.selectValue, showCheckbox: menuProps.showCheckbox }, menuProps.optionRenderer(option, rowProps.index, menuProps.inputValue))));
        };
        var noRowsRenderer = function () {
            return React.createElement("span", null, "No entries found");
        };
        // Callback from react-select to ask for row height. Pending on additionalQualifierRowHeight presence, add additional height.
        var calculateRowHeight = function (info) {
            var option = menuProps.options[info.index];
            if (option.customHeight > 1) {
                return option.customHeight;
            }
            return optionRowHeight;
        };
        var selectLinks;
        if (selectAllCallback && selectNoneCallback) {
            var allLength = (menuProps.options && menuProps.options.length) || 0;
            var selectedLength = (menuProps.valueArray && menuProps.valueArray.length) || 0;
            var checked_1 = allLength === selectedLength;
            var indeterminate_1 = allLength > selectedLength && selectedLength !== 0;
            var onClickCheck = function () {
                if (checked_1) {
                    selectNoneCallback();
                }
                else {
                    selectAllCallback();
                }
            };
            selectLinks = React.createElement("div", { className: "aim-select-links", onClick: onClickCheck },
                React.createElement("input", { ref: function (ref) { return ref && (ref.indeterminate = indeterminate_1); }, type: "checkbox", checked: checked_1, onChange: onClickCheck }),
                React.createElement("span", null, "Select all"));
        }
        return React.createElement("div", { className: "aim-virtualized-menu" },
            banner,
            selectLinks,
            React.createElement("div", { style: { flex: "1 1 auto", height: height } },
                React.createElement(react_virtualized_1.AutoSizer, { disableHeight: true }, function (_a) {
                    var width = _a.width;
                    return (React.createElement("div", null,
                        React.createElement(react_virtualized_1.List, { height: height, width: width - 1, estimatedRowSize: optionRowHeight, rowCount: menuProps.options.length, rowHeight: calculateRowHeight, rowRenderer: rowRenderer, noRowsRenderer: noRowsRenderer, scrollToIndex: scrollToIndex, tabIndex: -1, containerRole: "" // Need to remove default in order to make narrator work
                         })));
                })),
            additionalContent);
    };
}
exports.createVirtualizedMenuRenderFunction = createVirtualizedMenuRenderFunction;
function getOptionHeight(option, defaultHeight) {
    if (option.customHeight > 1) {
        return option.customHeight;
    }
    return defaultHeight;
}
function getListHeight(options, defaultOptionHeight) {
    var requestedHeight = 0;
    // calling options.reduce would be much cleaner but I want to stop processing options as soon as possible (there can be thousands of options)
    for (var i = 0; i < options.length; i++) {
        requestedHeight += getOptionHeight(options[i], defaultOptionHeight);
        if (requestedHeight > maxHeight) {
            return maxHeight;
        }
    }
    return requestedHeight;
}
//# sourceMappingURL=VirtualizedSelectMenu.js.map