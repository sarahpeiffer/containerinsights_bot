import * as tslib_1 from "tslib";
import { AccessibleSet } from './AccessibleSet';
var AccessibleMenu = /** @class */ (function (_super) {
    tslib_1.__extends(AccessibleMenu, _super);
    function AccessibleMenu(horizontal, items, index, isCircular, filterOnChars) {
        if (items === void 0) { items = []; }
        if (index === void 0) { index = 0; }
        if (isCircular === void 0) { isCircular = true; }
        if (filterOnChars === void 0) { filterOnChars = true; }
        var _this = _super.call(this, horizontal, items && items.length, index, isCircular) || this;
        _this.items = items;
        _this.filterOnChars = filterOnChars;
        return _this;
    }
    Object.defineProperty(AccessibleMenu.prototype, "items", {
        get: function () {
            return this._items;
        },
        set: function (value) {
            this._items = value;
            this.count = value ? value.length : 0;
        },
        enumerable: true,
        configurable: true
    });
    AccessibleMenu.prototype.onKeyDown = function (e) {
        _super.prototype.onKeyDown.call(this, e);
        if (this.filterOnChars && this.isPrintableCharacter(e.key)) {
            e.stopPropagation();
            this.setFocusByFirstChar(e.key);
        }
        return this.index;
    };
    AccessibleMenu.prototype.setFocusByFirstChar = function (char) {
        var i = this.index + 1;
        var list = this.items;
        char = char.toLocaleLowerCase();
        // Loop through the list of menu items circularly, so restarting at index 0 when the end of the list is reached
        // until we reach the currently focused menu item.
        while (i !== this.index) {
            if (typeof list[i] === 'string') {
                var item = list[i].toString();
                if (item && item.length && item.charAt(0).toLocaleLowerCase() === char) {
                    // we've found a menu item with first char matching the selected one. Leave the loop and set focus index to the match.
                    this.index = i;
                    break;
                }
            }
            i++;
            if (i >= list.length) {
                // restart the index so we can loop in a circle
                i = 0;
            }
        }
    };
    AccessibleMenu.prototype.isPrintableCharacter = function (str) {
        return str.length === 1 && str.match(/\S/);
    };
    return AccessibleMenu;
}(AccessibleSet));
export { AccessibleMenu };
//# sourceMappingURL=AccessibleMenu.js.map