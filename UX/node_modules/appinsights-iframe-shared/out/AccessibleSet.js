import * as KeyCodes from './KeyCodes';
var AccessibleSet = /** @class */ (function () {
    function AccessibleSet(horizontal, count, index, isCircular) {
        if (count === void 0) { count = 0; }
        if (index === void 0) { index = 0; }
        if (isCircular === void 0) { isCircular = true; }
        this.isHorizontal = horizontal;
        this.count = count;
        this.index = index;
        this.isCircular = isCircular;
    }
    AccessibleSet.prototype.onKeyDown = function (e) {
        var nextItem = this.isHorizontal ? KeyCodes.RIGHT_ARROW : KeyCodes.DOWN_ARROW;
        var prevItem = this.isHorizontal ? KeyCodes.LEFT_ARROW : KeyCodes.UP_ARROW;
        if (e.keyCode === nextItem) {
            e.preventDefault();
            this.setFocusToNextItem();
        }
        else if (e.keyCode === prevItem) {
            e.preventDefault();
            this.setFocusToPrevItem();
        }
        else if (e.keyCode === KeyCodes.END) {
            e.preventDefault();
            this.setFocusToLastItem();
        }
        else if (e.keyCode === KeyCodes.HOME) {
            e.preventDefault();
            this.setFocusToFirstItem();
        }
        return this.index;
    };
    AccessibleSet.prototype.setFocusToFirstItem = function () {
        this.index = 0;
        return this.index;
    };
    AccessibleSet.prototype.setFocusToLastItem = function () {
        this.index = this.count - 1;
    };
    AccessibleSet.prototype.setFocusToNextItem = function () {
        this.index = this.index + 1 < this.count ? this.index + 1 : this.isCircular ? 0 : this.index;
    };
    AccessibleSet.prototype.setFocusToPrevItem = function () {
        this.index = this.index - 1 >= 0 ? this.index - 1 : this.isCircular ? this.count - 1 : this.index;
    };
    return AccessibleSet;
}());
export { AccessibleSet };
//# sourceMappingURL=AccessibleSet.js.map