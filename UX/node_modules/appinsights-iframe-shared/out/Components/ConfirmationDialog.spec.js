import { ConfirmationDialog } from './ConfirmationDialog';
import { TestUtilities } from '../TestUtilities';
var ConfirmationDialogBuilder = /** @class */ (function () {
    function ConfirmationDialogBuilder() {
        this.props = {
            onClicked: function (option) { },
            primary: {
                text: 'Yes',
                value: 'yes'
            },
            secondary: {
                text: 'No',
                value: 'no'
            },
            questionText: 'Are you sure?',
            title: 'Test Dialog'
        };
        spyOn(this.props, 'onClicked');
    }
    ConfirmationDialogBuilder.prototype.build = function () {
        return ConfirmationDialog(this.props);
    };
    return ConfirmationDialogBuilder;
}());
describe('ConfirmationDialog', function () {
    var builder;
    beforeEach(function () {
        builder = new ConfirmationDialogBuilder();
    });
    describe('render', function () {
        it('should have a title', function () {
            var element = builder.build();
            var title = TestUtilities.FindSingle(element, function (e) { return e.type === 'h2'; });
            expect(title).not.toBeNull();
            expect(title.props.children).toBe(builder.props.title);
        });
        it('should have question text', function () {
            var element = builder.build();
            var text = TestUtilities.FindSingle(element, function (e) { return e.props.className === 'dialog-text'; });
            expect(text).not.toBeNull();
            expect(text.props.children).toBe(builder.props.questionText);
        });
        it('should have primary button', function () {
            var element = builder.build();
            var buttons = TestUtilities.FindElements(element, function (e) { return e.type === 'button'; });
            var button = buttons[0];
            expect(button).not.toBeNull();
            expect(button.props.value).toBe(builder.props.primary.value);
            expect(button.props.children).toBe(builder.props.primary.text);
            button.props.onClick();
            expect(builder.props.onClicked).toHaveBeenCalledWith(builder.props.primary);
        });
        it('should have secondary button', function () {
            var element = builder.build();
            var buttons = TestUtilities.FindElements(element, function (e) { return e.type === 'button'; });
            var button = buttons[1];
            expect(button).not.toBeNull();
            expect(button.props.value).toBe(builder.props.secondary.value);
            expect(button.props.children).toBe(builder.props.secondary.text);
            button.props.onClick();
            expect(builder.props.onClicked).toHaveBeenCalledWith(builder.props.secondary);
        });
    });
});
//# sourceMappingURL=ConfirmationDialog.spec.js.map