import { EnhancedSearchPanel, SearchStyle } from './EnhancedSearchPanel';
import { SearchPanel } from './SearchPanel';
import { TimeContext } from '../TimeContext';
import { TestUtilities } from '..';
var EnhancedSearchPanelBuilder = /** @class */ (function () {
    function EnhancedSearchPanelBuilder() {
        var _this = this;
        this.iconProvider = {
            onPropsChange: jasmine.createSpy('onPropsChange', function (obj, props) {
                // do nothing
            }),
            generateIcon: jasmine.createSpy('generateIcon', function (data, state) {
                // do nothing
            })
        };
        this.props = {
            filterData: {
                filterItems: [
                    { kql: 'test == test', label: { name: 'test', value: 'value' } }
                ], table: 'requests'
            },
            selectedItemId: '',
            onClick: jasmine.createSpy('onClick'),
            onClose: jasmine.createSpy('onClose'),
            showWarningIfSampled: false,
            timeContext: new TimeContext(0, new Date(0)),
            title: 'Title',
            strings: {
                'searchPanelDurationField': 'Duration',
                'searchPanelResponseCodeField': 'Response code',
                'searchPanelProblemIdField': 'Problem Id',
                'attributeMetadataDescriptionViewUrl': 'Page view URL',
                'metricMetadataDescriptionViewDurationMetricValue': 'Page view load time',
                'attributeMetadataDescriptionContextDeviceBrowserVersion': 'Browser version',
                'searchResultSuggestedText': 'Suggested',
                'searchResultAllText': 'All',
                'millisecondsAbbr': '{0} ms',
                'secondsAbbr': '{0} s',
                'minuteAbbr': '{0} min',
                'minutesAbbr': '{0} mins',
                'hourAbbr': '{0} hr',
                'hoursAbbr': '{0} hrs',
                'dayAbbr': '{0} day',
                'daysAbbr': '{0} days'
            },
            queryRunner: jasmine.createSpy('queryRunner', function () {
                return {
                    then: function (c) {
                        c(_this.queryData);
                        return Promise.resolve();
                    }
                };
            }).and.callThrough()
        };
    }
    EnhancedSearchPanelBuilder.prototype.withQueryData = function (queryData) {
        this.queryData = queryData;
        return this;
    };
    EnhancedSearchPanelBuilder.prototype.withTable = function (table) {
        this.props.filterData.table = table;
        return this;
    };
    EnhancedSearchPanelBuilder.prototype.build = function (showSnapshot, isClassic) {
        if (showSnapshot === void 0) { showSnapshot = false; }
        if (isClassic === void 0) { isClassic = false; }
        var newProps = Object.assign({}, this.props);
        if (showSnapshot) {
            newProps.iconProvider = this.iconProvider;
        }
        if (isClassic) {
            newProps.searchStyle = SearchStyle.Classic;
        }
        var enh = new EnhancedSearchPanel(newProps);
        spyOn(enh, 'setState').and.callFake(function (statefn, cb) {
            enh.state = TestUtilities.SetState(enh.state, enh.props, statefn);
            if (cb) {
                cb();
            }
        });
        return enh;
    };
    return EnhancedSearchPanelBuilder;
}());
describe('EnhancedSearchPanel', function () {
    var builder;
    beforeEach(function () {
        builder = new EnhancedSearchPanelBuilder();
    });
    describe('ctor', function () {
        it('should trigger queries', function () {
            var build = builder.build();
            var queryRunner = build.props.queryRunner;
            expect(queryRunner).toHaveBeenCalledTimes(1);
            expect(queryRunner.calls.first().args[0]).toBe('SearchPanel_RelevantSamples');
            expect(queryRunner.calls.first().args[1]).toBe("let min_length_8 = (s: string) {\n            let len = strlen(s);\n            case(len == 1, strcat(s, s, s, s, s, s, s, s),\n                len == 2 or len == 3, strcat(s, s, s, s),\n                len == 4 or len == 5 or len == 6 or len == 7, strcat(s, s),\n                s)\n        };\n        let ai_hash = (s: string) {\n            abs(toint(__hash_djb2(min_length_8(s))))\n        };\n        \n        let total = requests\n            | where timestamp > datetime(\"1970-01-01T00:00:00.000Z\") and timestamp < datetime(\"1970-01-01T00:00:00.000Z\")\n            | where test == test\n            | summarize arg_min(ai_hash(operation_Id), *) by operation_Id | count;\n        let samples = requests\n            | where timestamp > datetime(\"1970-01-01T00:00:00.000Z\") and timestamp < datetime(\"1970-01-01T00:00:00.000Z\")\n            | where test == test\n            | summarize arg_min(ai_hash(operation_Id), *) by operation_Id | top 250 by min_ asc;\n        union total, samples");
            expect(builder.iconProvider.onPropsChange).not.toHaveBeenCalled();
        });
        it('should trigger queries (classic)', function () {
            var build = builder.build(false, true);
            var queryRunner = build.props.queryRunner;
            expect(queryRunner).toHaveBeenCalledTimes(1);
            expect(queryRunner.calls.first().args[0]).toBe('SearchPanel_ChronologicalSamples');
            expect(queryRunner.calls.first().args[1]).toBe("\n            let total = requests\n            | where timestamp > datetime(\"1970-01-01T00:00:00.000Z\") and timestamp < datetime(\"1970-01-01T00:00:00.000Z\")\n            | where test == test | count;\n            let samples = requests\n            | where timestamp > datetime(\"1970-01-01T00:00:00.000Z\") and timestamp < datetime(\"1970-01-01T00:00:00.000Z\")\n            | where test == test | top 250 by timestamp desc;\n            union total, samples");
            expect(builder.iconProvider.onPropsChange).not.toHaveBeenCalled();
        });
        it('should trigger queries if show icon enabled', function () {
            var build = builder.build(true);
            var queryRunner = build.props.queryRunner;
            expect(queryRunner).toHaveBeenCalledTimes(1);
            var allArgs = queryRunner.calls.allArgs();
            expect(allArgs[0][0]).toBe('SearchPanel_RelevantSamples');
            expect(allArgs[0][1]).toBe("let min_length_8 = (s: string) {\n            let len = strlen(s);\n            case(len == 1, strcat(s, s, s, s, s, s, s, s),\n                len == 2 or len == 3, strcat(s, s, s, s),\n                len == 4 or len == 5 or len == 6 or len == 7, strcat(s, s),\n                s)\n        };\n        let ai_hash = (s: string) {\n            abs(toint(__hash_djb2(min_length_8(s))))\n        };\n        \n        let total = requests\n            | where timestamp > datetime(\"1970-01-01T00:00:00.000Z\") and timestamp < datetime(\"1970-01-01T00:00:00.000Z\")\n            | where test == test\n            | summarize arg_min(ai_hash(operation_Id), *) by operation_Id | count;\n        let samples = requests\n            | where timestamp > datetime(\"1970-01-01T00:00:00.000Z\") and timestamp < datetime(\"1970-01-01T00:00:00.000Z\")\n            | where test == test\n            | summarize arg_min(ai_hash(operation_Id), *) by operation_Id | top 250 by min_ asc;\n        union total, samples");
            var onPropsChange = builder.iconProvider.onPropsChange;
            expect(onPropsChange).toHaveBeenCalledTimes(1);
            expect(onPropsChange).toHaveBeenCalledWith(build, build.props);
            onPropsChange.calls.reset();
        });
    });
    describe('componentWillReceiveProps', function () {
        it('should kick off queries if props changed', function () {
            var build = builder.build();
            var queryRunner = build.props.queryRunner;
            queryRunner.calls.reset();
            expect(queryRunner).toHaveBeenCalledTimes(0);
            var newProps = Object.assign({}, build.props);
            newProps.filterData = null;
            build.componentWillReceiveProps(newProps);
            expect(queryRunner).toHaveBeenCalledTimes(1);
            expect(queryRunner.calls.first().args[0]).toBe('SearchPanel_RelevantSamples');
        });
        it('should not kick off queries if props are the same', function () {
            var build = builder.build();
            var queryRunner = build.props.queryRunner;
            queryRunner.calls.reset();
            expect(queryRunner).toHaveBeenCalledTimes(0);
            build.componentWillReceiveProps(build.props);
            expect(queryRunner).toHaveBeenCalledTimes(0);
        });
        it('should reset state if props changed', function () {
            var build = builder.build();
            build.state.isFailedRelevant = true;
            var newProps = Object.assign({}, build.props);
            newProps.filterData = null;
            build.componentWillReceiveProps(newProps);
            expect(build.state.isFailedRelevant).toBe(false);
        });
        it('should not reset state if props are the same', function () {
            var build = builder.build();
            build.state.isFailedRelevant = true;
            build.componentWillReceiveProps(build.props);
            expect(build.state.isFailedRelevant).toBe(true);
        });
        it('should kick off queries if show snapshot enabled', function () {
            var build = builder.build();
            var queryRunner = build.props.queryRunner;
            queryRunner.calls.reset();
            expect(queryRunner).toHaveBeenCalledTimes(0);
            var newProps = Object.assign({}, build.props);
            newProps.filterData = null;
            newProps.showSnapshot = true;
            build.componentWillReceiveProps(newProps);
            expect(queryRunner).toHaveBeenCalledTimes(1);
        });
    });
    describe('render', function () {
        it('should create a SearchPanel', function () {
            var build = builder.build();
            var panel = build.render();
            expect(panel.type).toBe(SearchPanel);
            expect(panel.props.title).toBe('Title');
            expect(panel.props.limit).toBe(250);
            expect(panel.props.strings).toBe(build.props.strings);
            expect(panel.props.results).toEqual([]);
            expect(panel.props.suggestedResults).toEqual([]);
            expect(panel.props.filterLabels).toEqual([{ name: 'test', value: 'value' }]);
            expect(panel.props.isLoading).toBe(true);
            expect(panel.props.isFailed).toBe(false);
            expect(panel.props.onClose).toBe(build.props.onClose);
        });
        it('should kick off two queries if changed to chronological sort mode', function () {
            var build = builder.build();
            var panel = build.render();
            var queryRunner = build.props.queryRunner;
            queryRunner.calls.reset();
            panel.props.onSortOrderChanged({ value: true });
            var allArgs = queryRunner.calls.allArgs();
            expect(queryRunner).toHaveBeenCalledTimes(2);
            expect(allArgs[0][0]).toBe('SearchPanel_RelevantSamples');
            expect(allArgs[1][0]).toBe('SearchPanel_ChronologicalSamples');
        });
        it('should kick off one query if changed back to relevant sort mode', function () {
            var build = builder.build();
            var panel = build.render();
            var queryRunner = build.props.queryRunner;
            panel.props.onSortOrderChanged({ value: true });
            queryRunner.calls.reset();
            panel.props.onSortOrderChanged({ value: false });
            var allArgs = queryRunner.calls.allArgs();
            expect(queryRunner).toHaveBeenCalledTimes(1);
            expect(allArgs[0][0]).toBe('SearchPanel_RelevantSamples');
        });
        it('should generate searchpaneldata for request', function () {
            var build = builder.withQueryData([{ Count: 1 }, {
                    itemId: 'a',
                    operation_Id: 'oa',
                    timestamp: new Date().toISOString(),
                    name: 'name',
                    duration: 200,
                    resultCode: 500,
                    itemType: 'request'
                }]).withTable('requests').build();
            var newProps = Object.assign({}, build.props);
            newProps.filterData = null; // Hack to get around guards in componentWillReceiveProps
            build.componentWillReceiveProps(newProps);
            var panel = build.render();
            var data = panel.props.results[0];
            expect(data.timestamp).toEqual(build.state.relevantSamples[0].timestamp);
            expect(data.data).toBe('name');
            expect(data.extraFields[0]).toEqual({ name: 'Duration', value: '200 ms' });
            expect(data.extraFields[1]).toEqual({ name: 'Response code', value: '500' });
            expect(data.icon).toBeUndefined();
            expect(build.props.onClick).toHaveBeenCalledTimes(0);
            data.onClick();
            expect(build.props.onClick).toHaveBeenCalledTimes(1);
        });
        it('should generate searchpaneldata for dependency', function () {
            var build = builder.withQueryData([{ Count: 1 }, {
                    itemId: 'a',
                    operation_Id: 'oa',
                    timestamp: new Date().toISOString(),
                    target: 'name',
                    duration: 200,
                    resultCode: 500,
                    itemType: 'dependency'
                }]).withTable('dependencies').build();
            var newProps = Object.assign({}, build.props);
            newProps.filterData = null; // Hack to get around guards in componentWillReceiveProps
            build.componentWillReceiveProps(newProps);
            var panel = build.render();
            var data = panel.props.results[0];
            expect(data.timestamp).toEqual(build.state.relevantSamples[0].timestamp);
            expect(data.data).toBe('name');
            expect(data.extraFields[0]).toEqual({ name: 'Duration', value: '200 ms' });
            expect(data.extraFields[1]).toEqual({ name: 'Response code', value: '500' });
            expect(data.icon).toBeUndefined();
            expect(build.props.onClick).toHaveBeenCalledTimes(0);
            data.onClick();
            expect(build.props.onClick).toHaveBeenCalledTimes(1);
        });
        it('should generate searchpaneldata for exception', function () {
            var build = builder.withQueryData([{ Count: 1 }, {
                    itemId: 'a',
                    operation_Id: 'oa',
                    timestamp: new Date().toISOString(),
                    outerMessage: 'name',
                    problemId: 'problem',
                    itemType: 'exception'
                }]).withTable('exceptions').build();
            var newProps = Object.assign({}, build.props);
            newProps.filterData = null; // Hack to get around guards in componentWillReceiveProps
            build.componentWillReceiveProps(newProps);
            var panel = build.render();
            var data = panel.props.results[0];
            expect(data.timestamp).toEqual(build.state.relevantSamples[0].timestamp);
            expect(data.data).toBe('name');
            expect(data.extraFields[0]).toEqual({ name: 'Problem Id', value: 'problem' });
            expect(data.icon).toBeUndefined();
            expect(build.props.onClick).toHaveBeenCalledTimes(0);
            data.onClick();
            expect(build.props.onClick).toHaveBeenCalledTimes(1);
        });
        it('should generate searchpaneldata for trace', function () {
            var build = builder.withQueryData([{ Count: 1 }, {
                    itemId: 'a',
                    operation_Id: 'oa',
                    timestamp: new Date().toISOString(),
                    message: 'name',
                    severityLevel: 0,
                    itemType: 'trace'
                }]).withTable('traces').build();
            var newProps = Object.assign({}, build.props);
            newProps.filterData = null; // Hack to get around guards in componentWillReceiveProps
            build.componentWillReceiveProps(newProps);
            var panel = build.render();
            var data = panel.props.results[0];
            expect(data.timestamp).toEqual(build.state.relevantSamples[0].timestamp);
            expect(data.data).toBe('name');
            expect(data.extraFields[0]).toEqual({ name: 'Severity level', value: 'Verbose' });
            expect(data.icon).toBeUndefined();
            expect(build.props.onClick).toHaveBeenCalledTimes(0);
            data.onClick();
            expect(build.props.onClick).toHaveBeenCalledTimes(1);
        });
        it('should generate searchpaneldata for pageview', function () {
            var build = builder.withQueryData([{ Count: 1 }, {
                    itemId: 'a',
                    operation_Id: 'oa',
                    timestamp: new Date().toISOString(),
                    name: 'name',
                    itemType: 'pageView',
                    url: 'url',
                    duration: 123,
                    client_Browser: 'browser'
                }]).withTable('pageViews').build();
            var newProps = Object.assign({}, build.props);
            newProps.filterData = null; // Hack to get around guards in componentWillReceiveProps
            build.componentWillReceiveProps(newProps);
            var panel = build.render();
            var data = panel.props.results[0];
            expect(data.timestamp).toEqual(build.state.relevantSamples[0].timestamp);
            expect(data.data).toBe('name');
            expect(data.extraFields[0]).toEqual({ name: 'Page view URL', value: 'url' });
            expect(data.extraFields[1]).toEqual({ name: 'Page view load time', value: '123 ms' });
            expect(data.extraFields[2]).toEqual({ name: 'Browser version', value: 'browser' });
            expect(data.icon).toBeUndefined();
            expect(build.props.onClick).toHaveBeenCalledTimes(0);
            data.onClick();
            expect(build.props.onClick).toHaveBeenCalledTimes(1);
        });
        it('should generate searchpaneldata for custom event', function () {
            var build = builder.withQueryData([{ Count: 1 }, {
                    itemId: 'a',
                    operation_Id: 'oa',
                    timestamp: new Date().toISOString(),
                    name: 'name',
                    itemType: 'customEvent'
                }]).withTable('customEvents').build();
            var newProps = Object.assign({}, build.props);
            newProps.filterData = null; // Hack to get around guards in componentWillReceiveProps
            build.componentWillReceiveProps(newProps);
            var panel = build.render();
            var data = panel.props.results[0];
            expect(data.timestamp).toEqual(build.state.relevantSamples[0].timestamp);
            expect(data.data).toBe('name');
            expect(data.extraFields[0]).toEqual(undefined);
            expect(data.icon).toBeUndefined();
            expect(build.props.onClick).toHaveBeenCalledTimes(0);
            data.onClick();
            expect(build.props.onClick).toHaveBeenCalledTimes(1);
        });
        it('should generate searchpaneldata for availability', function () {
            var build = builder.withQueryData([{ Count: 1 }, {
                    itemId: 'a',
                    operation_Id: 'oa',
                    timestamp: new Date().toISOString(),
                    name: 'name',
                    success: '1',
                    location: 'Test location',
                    duration: 200,
                    itemType: 'availabilityResult'
                }]).withTable('availabilityResults').build();
            var newProps = Object.assign({}, build.props);
            newProps.filterData = null; // Hack to get around guards in componentWillReceiveProps
            build.componentWillReceiveProps(newProps);
            var panel = build.render();
            var data = panel.props.results[0];
            expect(data.timestamp).toEqual(build.state.relevantSamples[0].timestamp);
            expect(data.data).toBe('name');
            expect(data.extraFields[0]).toEqual({ name: 'Availability result', value: 'Successful' });
            expect(data.extraFields[1]).toEqual({ name: 'Availability location', value: 'Test location' });
            expect(data.extraFields[2]).toEqual({ name: 'Duration', value: '200 ms' });
            expect(data.icon).toBeUndefined();
            expect(build.props.onClick).toHaveBeenCalledTimes(0);
            data.onClick();
            expect(build.props.onClick).toHaveBeenCalledTimes(1);
        });
        it('should generate searchpaneldata for request (show icon)', function () {
            var build = builder.withQueryData([{ Count: 1 }, {
                    itemId: 'a',
                    operation_Id: 'oa',
                    timestamp: new Date().toISOString(),
                    name: 'name',
                    duration: 200,
                    resultCode: 500,
                    itemType: 'request'
                }]).withTable('requests').build(true);
            var newProps = Object.assign({}, build.props);
            newProps.filterData = null; // Hack to get around guards in componentWillReceiveProps
            build.componentWillReceiveProps(newProps);
            var panel = build.render();
            var data = panel.props.results[0];
            expect(data.timestamp).toEqual(build.state.relevantSamples[0].timestamp);
            expect(data.data).toBe('name');
            expect(data.extraFields[0]).toEqual({ name: 'Duration', value: '200 ms' });
            expect(data.extraFields[1]).toEqual({ name: 'Response code', value: '500' });
            expect(data.icon).not.toBeNull();
            expect(build.props.onClick).toHaveBeenCalledTimes(0);
            data.onClick();
            expect(build.props.onClick).toHaveBeenCalledTimes(1);
            builder.iconProvider.onPropsChange.calls.reset();
            var generateIcon = builder.iconProvider.generateIcon;
            expect(generateIcon).toHaveBeenCalledTimes(2);
            expect(generateIcon).toHaveBeenCalledWith(build.state.relevantSamples[0].kqlItem, build.props, build.state);
            generateIcon.calls.reset();
        });
        it('should generate searchpaneldata for dependency (show icon)', function () {
            var build = builder.withQueryData([{ Count: 1 }, {
                    itemId: 'a',
                    operation_Id: 'oa',
                    timestamp: new Date().toISOString(),
                    target: 'name',
                    duration: 200,
                    resultCode: 500,
                    itemType: 'dependency'
                }]).withTable('dependencies').build(true);
            var newProps = Object.assign({}, build.props);
            newProps.filterData = null; // Hack to get around guards in componentWillReceiveProps
            build.componentWillReceiveProps(newProps);
            var panel = build.render();
            var data = panel.props.results[0];
            expect(data.timestamp).toEqual(build.state.relevantSamples[0].timestamp);
            expect(data.data).toBe('name');
            expect(data.extraFields[0]).toEqual({ name: 'Duration', value: '200 ms' });
            expect(data.extraFields[1]).toEqual({ name: 'Response code', value: '500' });
            expect(data.icon).not.toBeNull();
            expect(build.props.onClick).toHaveBeenCalledTimes(0);
            data.onClick();
            expect(build.props.onClick).toHaveBeenCalledTimes(1);
            builder.iconProvider.onPropsChange.calls.reset();
            var generateIcon = builder.iconProvider.generateIcon;
            expect(generateIcon).toHaveBeenCalledTimes(2);
            expect(generateIcon).toHaveBeenCalledWith(build.state.relevantSamples[0].kqlItem, build.props, build.state);
            generateIcon.calls.reset();
        });
        it('should generate searchpaneldata for exception (show snapshot)', function () {
            var build = builder.withQueryData([{ Count: 1 }, {
                    itemId: 'a',
                    operation_Id: 'oa',
                    timestamp: new Date().toISOString(),
                    outerMessage: 'name',
                    problemId: 'problem',
                    itemType: 'exception'
                }]).withTable('exceptions').build(true);
            var newProps = Object.assign({}, build.props);
            newProps.filterData = null; // Hack to get around guards in componentWillReceiveProps
            build.componentWillReceiveProps(newProps);
            var panel = build.render();
            var data = panel.props.results[0];
            expect(data.timestamp).toEqual(build.state.relevantSamples[0].timestamp);
            expect(data.data).toBe('name');
            expect(data.extraFields[0]).toEqual({ name: 'Problem Id', value: 'problem' });
            expect(data.icon).not.toBeNull();
            expect(build.props.onClick).toHaveBeenCalledTimes(0);
            data.onClick();
            expect(build.props.onClick).toHaveBeenCalledTimes(1);
            builder.iconProvider.onPropsChange.calls.reset();
            var generateIcon = builder.iconProvider.generateIcon;
            expect(generateIcon).toHaveBeenCalledTimes(2);
            expect(generateIcon).toHaveBeenCalledWith(build.state.relevantSamples[0].kqlItem, build.props, build.state);
            generateIcon.calls.reset();
        });
    });
});
//# sourceMappingURL=EnhancedSearchPanel.spec.js.map