import { DropdownWithLinks, ComboBoxHeader } from './dropdown';
import { SmileHappySvg, SmileSadSvg, ExternalLinkSvg } from '../Svgs';
import { FeedbackDropdown } from './FeedbackDropdown';
var FeedbackDropdownBuilder = /** @class */ (function () {
    function FeedbackDropdownBuilder() {
        this.props = {
            messageService: {
                PostMessage: function () { }
            },
            strings: {
                feedbackDropdown: 'feedback btn',
                sendFeedback: 'send feedback',
                sendSmile: 'send smile',
                sendFrown: 'send frown'
            },
            telemetryContext: {
                RecordClick: function () { }
            },
            message: 'SendFeedback'
        };
    }
    FeedbackDropdownBuilder.prototype.build = function () {
        return new FeedbackDropdown(this.props);
    };
    return FeedbackDropdownBuilder;
}());
describe('FeedbackDropdownDropdown', function () {
    var builder;
    beforeEach(function () {
        builder = new FeedbackDropdownBuilder();
    });
    describe('ctor', function () {
        it('should set onSelected', function () {
            var build = builder.build();
            expect(build._onSelected).not.toBe(null);
        });
    });
    describe('render', function () {
        it('should render a feedback dropdown with a header and three items', function () {
            var build = builder.build();
            var elem = build.render();
            expect(elem.type).toBe(DropdownWithLinks);
            expect(elem.props.onChange).toBe(build._onSelected);
            expect(elem.props.options.length).toBe(3);
            var header = elem.props.header;
            expect(header.type).toBe(ComboBoxHeader);
            expect(header.props.displayName).toBe('feedback btn');
            expect(header.props.icon.type).toBe(SmileHappySvg);
            var option1 = elem.props.options[0];
            expect(option1.id).toBe('SendSmile');
            expect(option1.displayName).toBe('send smile');
            expect(option1.message).toBe('SendFeedback');
            expect(option1.data.rating).toBe('5');
            expect(option1.icon.type).toBe(SmileHappySvg);
            var option2 = elem.props.options[1];
            expect(option2.id).toBe('SendFrown');
            expect(option2.displayName).toBe('send frown');
            expect(option2.message).toBe('SendFeedback');
            expect(option2.data.rating).toBe('1');
            expect(option2.icon.type).toBe(SmileSadSvg);
            var option3 = elem.props.options[2];
            expect(option3.id).toBe('SendFeedback');
            expect(option3.displayName).toBe('send feedback');
            expect(option3.url).toBe('https://feedback.azure.com/forums/357324-application-insights/');
            expect(option3.icon.type).toBe(ExternalLinkSvg);
        });
    });
    describe('onSelected', function () {
        it('onSelected should record a click', function () {
            var build = builder.build();
            var recordClickSpy = spyOn(build.props.telemetryContext, 'RecordClick');
            var selectedOption = {
                id: 'id1',
                displayName: 'name1'
            };
            build._onSelected(selectedOption);
            expect(recordClickSpy).toHaveBeenCalled();
            expect(recordClickSpy).toHaveBeenCalledWith('id1', null);
        });
    });
});
//# sourceMappingURL=FeedbackDropdown.spec.js.map