import { FocusTrapModal } from './FocusTrapModal';
describe('FocusTrapModal', function () {
    var focusTrap;
    var children = {};
    var addEventListener;
    var removeEventListener;
    var modal;
    var contains;
    var activeElement;
    var focus;
    beforeEach(function () {
        focusTrap = new FocusTrapModal({
            children: children
        });
        addEventListener = spyOn(document, 'addEventListener');
        removeEventListener = spyOn(document, 'removeEventListener');
        modal = {
            contains: function () { }
        };
        contains = spyOn(modal, 'contains');
        activeElement = {
            focus: function () { }
        };
        focus = spyOn(activeElement, 'focus');
        spyOn(focusTrap, '_activeElement').and.returnValue(activeElement);
    });
    it('should have a focus-trap div', function () {
        var result = focusTrap.render();
        expect(result.props.className).toBe('focus-trap-modal');
        expect(result.props.children).toBe(children);
    });
    it('should focus inside modal if modal doesnt contain event target', function () {
        var result = focusTrap.render();
        var target = {};
        contains.and.callFake(function (e) {
            if (e === target) {
                return false;
            }
            if (e === activeElement) {
                return true;
            }
        });
        result.ref(modal);
        focusTrap.componentDidMount();
        expect(addEventListener).toHaveBeenCalledTimes(1);
        expect(addEventListener).toHaveBeenCalledWith('focusin', jasmine.anything());
        var handler = addEventListener.calls.mostRecent().args[1];
        handler({
            target: target
        });
        expect(focus).toHaveBeenCalledTimes(1);
    });
    it('should not focus inside modal if previous focus not inside modal', function () {
        var result = focusTrap.render();
        var target = {};
        contains.and.callFake(function (e) {
            if (e === target) {
                return false;
            }
            if (e === activeElement) {
                return false;
            }
        });
        result.ref(modal);
        focusTrap.componentDidMount();
        expect(addEventListener).toHaveBeenCalledTimes(1);
        expect(addEventListener).toHaveBeenCalledWith('focusin', jasmine.anything());
        var handler = addEventListener.calls.mostRecent().args[1];
        handler({
            target: target
        });
        expect(focus).not.toHaveBeenCalled();
    });
    it('should not focus inside modal if modal contains event target', function () {
        var result = focusTrap.render();
        var target = {};
        contains.and.callFake(function (e) {
            if (e === target) {
                return true;
            }
            if (e === activeElement) {
                return true;
            }
        });
        result.ref(modal);
        focusTrap.componentDidMount();
        expect(addEventListener).toHaveBeenCalledTimes(1);
        expect(addEventListener).toHaveBeenCalledWith('focusin', jasmine.anything());
        var handler = addEventListener.calls.mostRecent().args[1];
        handler({
            target: target
        });
        expect(focus).not.toHaveBeenCalled();
    });
    it('should cleanup when disposed', function () {
        var result = focusTrap.render();
        var target = {};
        contains.and.callFake(function (e) {
            if (e === target) {
                return true;
            }
            if (e === activeElement) {
                return true;
            }
        });
        result.ref(modal);
        focusTrap.componentDidMount();
        expect(addEventListener).toHaveBeenCalledTimes(1);
        expect(addEventListener).toHaveBeenCalledWith('focusin', jasmine.anything());
        var handler = addEventListener.calls.mostRecent().args[1];
        focusTrap.componentWillUnmount();
        expect(removeEventListener).toHaveBeenCalledTimes(1);
        expect(removeEventListener).toHaveBeenCalledWith('focusin', handler);
    });
});
//# sourceMappingURL=FocusTrapModal.spec.js.map