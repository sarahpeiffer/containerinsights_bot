import { LoadingIcon } from './LoadingIcon';
import { LoadingSvg } from '../Svgs';
var LoadingIconBuilder = /** @class */ (function () {
    function LoadingIconBuilder() {
        this.props = {
            isLoading: false
        };
    }
    LoadingIconBuilder.prototype.isLoading = function () {
        this.props.isLoading = true;
        return this;
    };
    LoadingIconBuilder.prototype.build = function () {
        return LoadingIcon(this.props);
    };
    return LoadingIconBuilder;
}());
describe('LoadingIcon', function () {
    var builder;
    beforeEach(function () {
        builder = new LoadingIconBuilder();
    });
    describe('render', function () {
        it('should return empty div if not loading', function () {
            var component = builder.build();
            expect(component.type).toBe('div');
            expect(component.props.children).not.toBeDefined();
        });
        it('should return loading icon if loading', function () {
            var component = builder.isLoading().build();
            expect(component.type).toBe('div');
            expect(component.props.className).toBe('loading-icon');
            expect(component.props.children.type).toBe(LoadingSvg);
        });
    });
});
//# sourceMappingURL=LoadingIcon.spec.js.map