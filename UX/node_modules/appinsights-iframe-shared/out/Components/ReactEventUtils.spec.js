import { ReactEventUtils } from './ReactEventUtils';
describe('ReactEventUtils', function () {
    describe('appendHandler', function () {
        it('should invoke new handler when existing handler is null', function () {
            var testHandler = {
                handleEvent: function (ev) {
                }
            };
            spyOn(testHandler, 'handleEvent');
            var resultHandler = ReactEventUtils.appendHandler(null, testHandler.handleEvent);
            var event = {};
            resultHandler(event);
            expect(testHandler.handleEvent).toHaveBeenCalledWith(event);
        });
        it('should invoke both new handler and existing handler', function () {
            var newHandler = {
                handleEvent: function (ev) {
                }
            };
            var existingHandler = {
                handleEvent: function (ev) {
                }
            };
            spyOn(newHandler, 'handleEvent');
            spyOn(existingHandler, 'handleEvent');
            var resultHandler = ReactEventUtils.appendHandler(existingHandler.handleEvent, newHandler.handleEvent);
            var event = {};
            resultHandler(event);
            expect(newHandler.handleEvent).toHaveBeenCalledWith(event);
            expect(existingHandler.handleEvent).toHaveBeenCalledWith(event);
        });
    });
});
//# sourceMappingURL=ReactEventUtils.spec.js.map