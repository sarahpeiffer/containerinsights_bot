import * as tslib_1 from "tslib";
import * as React from 'react';
import { AlertSvg, AnalysisServicesServersSvg, AppServiceSvg, AutomationAutomationAccountsSvg, AutomationAutomationAccountsRunbooksSvg, CacheRedisSvg, CdnProfilesSvg, CdnProfilesEndpointsSvg, ClassicComputeDomainNamesSvg, ClassicComputeVirtualMachinesSvg, ClassicNetworkVirtualNetworksSvg, ClassicStorageStorageAccountsSvg, ComputeAvailabilitySetsSvg, ComputeSnapshotsSvg, ComputeVirtualMachinesSvg, ComputeVirtualMachineScaleSetsSvg, ContainerServiceManagedClustersSvg, DataFactoryDataFactoriesSvg, DataFactoryFactoriesSvg, DataLakeAnalyticsAccountsSvg, DevTestLabLabsVirtualMachinesSvg, EventHubNamespacesSvg, InsightsComponentsSvg, InsightsWebtestsSvg, KeyVaultVaultsSvg, LogicWorkflowsSvg, MachineLearningWebServicesSvg, NetworkNetworkinterfacesSvg, NetworkNetworkSecurityGroupsSvg, NetworkPublicIpAddressesSvg, NetworkTrafficmanagerprofilesSvg, NetworkVirtualNetworksSvg, OperationalInsightsWorkspacesSvg, OperationsManagementSolutionsSvg, SchedulerJobCollectionsSvg, ServiceBusNamespacesSvg, ServiceFabricClustersSvg, SqlServersSvg, SqlServersDatabasesSvg, StorageStorageAccountsSvg, StreamAnalyticsStreamingJobsSvg, WebConnectionsSvg, } from '../Svgs';
var ResourceTypeIcon = /** @class */ (function (_super) {
    tslib_1.__extends(ResourceTypeIcon, _super);
    function ResourceTypeIcon(props) {
        return _super.call(this, props) || this;
    }
    ResourceTypeIcon.isIconSupported = function (resourceTypeName) {
        switch (resourceTypeName.toLocaleLowerCase()) {
            case 'microsoft.analysisservices/servers':
            case 'microsoft.automation/automationaccounts':
            case 'microsoft.automation/automationaccounts/runbooks':
            case 'microsoft.cache/redis':
            case 'microsoft.cdn/profiles':
            case 'microsoft.cdn/profiles/endpoints':
            case 'microsoft.classiccompute/domainnames':
            case 'microsoft.classiccompute/virtualmachines':
            case 'microsoft.classicnetwork/virtualnetworks':
            case 'microsoft.classicstorage/storageaccounts':
            case 'microsoft.compute/availabilitysets':
            case 'microsoft.compute/snapshots':
            case 'microsoft.compute/virtualmachines':
            case 'microsoft.compute/virtualmachinescalesets':
            case 'microsoft.containerservice/managedclusters':
            case 'microsoft.datafactory/datafactories':
            case 'microsoft.datafactory/factories':
            case 'microsoft.datalakeanalytics/accounts':
            case 'microsoft.devtestlab/labs/virtualmachines':
            case 'microsoft.eventhub/namespaces':
            case 'microsoft.insights/components':
            case 'microsoft.insights/webtests':
            case 'microsoft.keyvault/vaults':
            case 'microsoft.logic/workflows':
            case 'microsoft.machinelearning/webservices':
            case 'microsoft.network/networkinterfaces':
            case 'microsoft.network/networksecuritygroups':
            case 'microsoft.network/publicipaddresses':
            case 'microsoft.network/trafficmanagerprofiles':
            case 'microsoft.network/virtualnetworks':
            case 'microsoft.operationalinsights/workspaces':
            case 'microsoft.operationalinsights/workspaces/actions':
            case 'microsoft.operationsmanagement/solutions':
            case 'microsoft.scheduler/jobcollections':
            case 'microsoft.servicebus/namespaces':
            case 'microsoft.servicefabric/clusters':
            case 'microsoft.sql/servers':
            case 'microsoft.sql/servers/databases':
            case 'microsoft.storage/storageaccounts':
            case 'microsoft.streamanalytics/streamingjobs':
            case 'microsoft.web/connections':
            case 'microsoft.web/sites':
            case 'microsoft.insights/alertrules':
            case 'microsoft.insights/metricalerts':
            case 'microsoft.insights/activitylogalerts':
                return true;
            default:
                return false;
        }
    };
    ResourceTypeIcon.prototype.render = function () {
        switch (this.props.type.toLocaleLowerCase()) {
            case 'microsoft.analysisservices/servers':
                return React.createElement(AnalysisServicesServersSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.automation/automationaccounts':
                return React.createElement(AutomationAutomationAccountsSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.automation/automationaccounts/runbooks':
                return React.createElement(AutomationAutomationAccountsRunbooksSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.cache/redis':
                return React.createElement(CacheRedisSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.cdn/profiles':
                return React.createElement(CdnProfilesSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.cdn/profiles/endpoints':
                return React.createElement(CdnProfilesEndpointsSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.classiccompute/domainnames':
                return React.createElement(ClassicComputeDomainNamesSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.classiccompute/virtualmachines':
                return React.createElement(ClassicComputeVirtualMachinesSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.classicnetwork/virtualnetworks':
                return React.createElement(ClassicNetworkVirtualNetworksSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.classicstorage/storageaccounts':
                return React.createElement(ClassicStorageStorageAccountsSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.compute/availabilitysets':
                return React.createElement(ComputeAvailabilitySetsSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.compute/snapshots':
                return React.createElement(ComputeSnapshotsSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.compute/virtualmachines':
                return React.createElement(ComputeVirtualMachinesSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.compute/virtualmachinescalesets':
                return React.createElement(ComputeVirtualMachineScaleSetsSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.containerservice/managedclusters':
                return React.createElement(ContainerServiceManagedClustersSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.datafactory/datafactories':
                return React.createElement(DataFactoryDataFactoriesSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.datafactory/factories':
                return React.createElement(DataFactoryFactoriesSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.datalakeanalytics/accounts':
                return React.createElement(DataLakeAnalyticsAccountsSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.devtestlab/labs/virtualmachines':
                return React.createElement(DevTestLabLabsVirtualMachinesSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.eventhub/namespaces':
                return React.createElement(EventHubNamespacesSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.insights/components':
                return React.createElement(InsightsComponentsSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.insights/webtests':
                return React.createElement(InsightsWebtestsSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.keyvault/vaults':
                return React.createElement(KeyVaultVaultsSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.logic/workflows':
                return React.createElement(LogicWorkflowsSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.machinelearning/webservices':
                return React.createElement(MachineLearningWebServicesSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.network/networkinterfaces':
                return React.createElement(NetworkNetworkinterfacesSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.network/networksecuritygroups':
                return React.createElement(NetworkNetworkSecurityGroupsSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.network/publicipaddresses':
                return React.createElement(NetworkPublicIpAddressesSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.network/trafficmanagerprofiles':
                return React.createElement(NetworkTrafficmanagerprofilesSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.network/virtualnetworks':
                return React.createElement(NetworkVirtualNetworksSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.operationalinsights/workspaces':
                return React.createElement(OperationalInsightsWorkspacesSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.operationsmanagement/solutions':
                return React.createElement(OperationsManagementSolutionsSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.web/sites':
                return React.createElement(AppServiceSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.scheduler/jobcollections':
                return React.createElement(SchedulerJobCollectionsSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.servicebus/namespaces':
                return React.createElement(ServiceBusNamespacesSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.servicefabric/clusters':
                return React.createElement(ServiceFabricClustersSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.sql/servers':
                return React.createElement(SqlServersSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.sql/servers/databases':
                return React.createElement(SqlServersDatabasesSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.storage/storageaccounts':
                return React.createElement(StorageStorageAccountsSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.streamanalytics/streamingjobs':
                return React.createElement(StreamAnalyticsStreamingJobsSvg, tslib_1.__assign({}, this.props));
            case 'microsoft.web/connections':
                return React.createElement(WebConnectionsSvg, tslib_1.__assign({}, this.props));
            // Alerts
            case 'microsoft.insights/alertrules':
            case 'microsoft.insights/metricalerts':
            case 'microsoft.insights/activitylogalerts':
            case 'microsoft.operationalinsights/workspaces/actions':
                return React.createElement(AlertSvg, tslib_1.__assign({}, this.props));
        }
        return null;
    };
    return ResourceTypeIcon;
}(React.Component));
export { ResourceTypeIcon };
//# sourceMappingURL=ResourceTypeIcon.js.map