import * as tslib_1 from "tslib";
import * as React from 'react';
import { AccessibilityUtils } from '../AccessibilityUtils';
import { CancelSvg, LoadingSvg } from '../Svgs';
import { Utils } from '../Utils';
import { Listbox } from './listbox';
import * as KeyCode from '../KeyCodes';
var colorMap = {
    'request': '#00188f',
    'dependency': '#fcd116',
    'exception': '#68217a',
    'trace': '#009e49',
    'availability': '#0072c6',
    'pageview': '#00b294',
    'customevent': '#bad80a',
};
/* This is used to render strings that contain highlight html elements safely (eg. without dangerouslySetInnerHTML) */
function highlightRenderer(s) {
    var highlightRegex = /<span class="msportalfx-highlight">(.+?)<\/span>/g;
    var parts = s.split(highlightRegex);
    if (parts.length === 1) {
        return s;
    }
    return parts.map(function (v, i) { return i % 2 ? React.createElement("span", { key: s + i, className: 'msportalfx-highlight' }, v) : React.createElement("span", { key: s + i }, v); });
}
export var SearchPanel = function (_a) {
    var strings = _a.strings, title = _a.title, onClose = _a.onClose, isLoading = _a.isLoading, isFailed = _a.isFailed, results = _a.results, filterLabels = _a.filterLabels, limit = _a.limit, notice = _a.notice, suggestedResults = _a.suggestedResults, isLoadingSuggested = _a.isLoadingSuggested, sortOrderOptions = _a.sortOrderOptions, onSortOrderChanged = _a.onSortOrderChanged, showTypes = _a.showTypes;
    // Keyboard navigation handler
    var onKeyDown = function (event) {
        var key = event.which || event.keyCode;
        var currentElm = event.target;
        var nextElm = null;
        var getList = function (elm, previous) {
            var next = (previous ? elm.previousElementSibling : elm.nextElementSibling);
            if (!next) {
                return null;
            }
            if (next.getAttribute('role') === 'list') {
                return next;
            }
            return getList(next, previous);
        };
        switch (key) {
            case KeyCode.UP_ARROW:
                nextElm = currentElm.previousElementSibling;
                if (!nextElm) {
                    var list = getList(currentElm.parentElement, true);
                    nextElm = list && list.children[list.children.length - 1];
                }
                break;
            case KeyCode.DOWN_ARROW:
                nextElm = currentElm.nextElementSibling;
                if (!nextElm) {
                    var list = getList(currentElm.parentElement, false);
                    nextElm = list && list.children[0];
                }
                break;
        }
        if (nextElm) {
            currentElm.tabIndex = -1;
            nextElm.tabIndex = 0;
            event.preventDefault();
            nextElm.focus();
        }
    };
    // Create data elements
    var keyCount = 0;
    var selectedIndex = 0;
    var suggestedSelectedIndex = 0;
    var converter = function (result, index, isSuggested) {
        keyCount++;
        if (!result || !result.timestamp || !result.timestamp.getTime) {
            return null;
        }
        var baseKey = result.timestamp.getTime() + result.data + keyCount;
        var className = 'search-item';
        if (result.isSelected) {
            className += ' selected';
            if (isSuggested) {
                suggestedSelectedIndex = index;
            }
            else {
                selectedIndex = index;
            }
        }
        var timestampString = result.timestamp.toLocaleString();
        if (result.type && showTypes) {
            result.type = result.type.replace('Result', '').replace(' ', '');
            var year = result.timestamp.getFullYear();
            var replace = "/" + year + "|" + year + "/|-" + year + "|" + year + "-|" + year; // Remove the year from the string
            var timestamp = timestampString.replace(new RegExp(replace), '');
            timestampString = timestamp + " - " + result.type;
        }
        return React.createElement("div", tslib_1.__assign({ className: className, key: baseKey, onKeyDown: onKeyDown, "aria-level": 1, role: 'listitem', "aria-selected": result.isSelected }, AccessibilityUtils.getAccessibilityProps({
            onClick: result.onClick,
            tabIndex: -1
        })),
            React.createElement("div", { className: 'timestamp' },
                result.type && showTypes && React.createElement("div", { className: 'colorbar', style: { background: colorMap[result.type.toLowerCase()] } }),
                timestampString,
                result.icon && React.createElement("div", { className: 'icon' }, result.icon)),
            React.createElement("div", { className: 'data' }, highlightRenderer(result.data)),
            React.createElement("div", { className: 'extra-fields' }, result.extraFields && result.extraFields.map(function (field) {
                return React.createElement("div", { className: 'field', key: baseKey + field.name },
                    React.createElement("div", { className: 'name' },
                        field.name,
                        ":"),
                    React.createElement("div", { className: 'value' }, highlightRenderer(field.value)));
            })));
    };
    var elements = results.map(function (a, b) { return converter(a, b, false); });
    var suggestedElements = suggestedResults && suggestedResults.map(function (a, b) { return converter(a, b, true); });
    var filters = filterLabels.map(function (label) {
        return React.createElement("div", { className: 'filter-label', role: 'presentation', key: label.name + label.value, title: label.name + " " + label.value },
            React.createElement("div", { className: 'label-name', role: 'presentation' }, label.name),
            React.createElement("div", { className: 'label-value', role: 'presentation' }, label.value));
    });
    // Accessibility references
    var ariaIdSuggested = AccessibilityUtils.getRandomElementId();
    var ariaIdAll = AccessibilityUtils.getRandomElementId();
    var ariaIdFilters = AccessibilityUtils.getRandomElementId();
    var ariaIdFullTitle = AccessibilityUtils.getRandomElementId();
    var focusing = 'none';
    var ariaFullTitle = title;
    var focus = function (elm) {
        // Trick to stop .focus() from stealing focus back on re-render
        if (elm && !elm._isFocused) {
            elm._isFocused = true;
            elm.tabIndex = 0;
            setTimeout(function () { return elm.focus(); }, 200); // Wait for page layouts to settle
        }
    };
    if (filters && filters.length > 0) {
        ariaFullTitle += ' ' + Utils.getString(strings, 'searchResultFilterText') + filterLabels.map(function (v) { return v.name + v.value + ', '; });
    }
    if (notice) {
        ariaFullTitle += ' ' + notice;
    }
    if (!isLoading && !isLoadingSuggested) {
        if (!selectedIndex && suggestedResults && suggestedResults.length > 0) {
            focusing = 'suggested';
        }
        else if (isFailed || (elements && elements.length)) {
            focusing = 'all';
        }
    }
    var showAllHeader = !isLoadingSuggested && suggestedResults && suggestedResults.length > 0;
    return React.createElement("div", { id: ariaIdFullTitle, className: 'search-panel', role: 'region', "aria-label": ariaFullTitle },
        React.createElement("div", { className: 'acc-hidden', "aria-live": 'polite', role: 'status' }, isLoading || isLoadingSuggested ?
            Utils.getString(strings, 'searchResultAriaLoading', '{0} is loading').format(title) :
            Utils.getString(strings, 'searchResultAriaReady', '{0} is ready').format(title)),
        React.createElement("div", { className: 'panel-title', role: 'presentation' },
            React.createElement("h2", null, title)),
        !!onClose && React.createElement("div", tslib_1.__assign({ className: 'panel-x', role: 'button', title: Utils.getString(strings, 'searchResultClose', 'Close') }, AccessibilityUtils.getAccessibilityProps({
            onClick: onClose
        })),
            React.createElement(CancelSvg, null)),
        React.createElement("div", { className: 'panel-filters', id: ariaIdFilters, role: 'presentation' },
            filters && filters.length > 0 && Utils.getString(strings, 'searchResultFilterText'),
            filters),
        !!notice && React.createElement("div", { className: 'panel-notice', role: 'presentation' }, notice),
        React.createElement("div", { className: 'panel-scroll' },
            !isLoadingSuggested && suggestedResults && suggestedResults.length > 0 &&
                React.createElement("div", { className: 'panel-sectiontitle', id: ariaIdSuggested }, Utils.getString(strings, 'searchResultSuggestedText')),
            (isLoadingSuggested || (suggestedResults && suggestedResults.length > 0)) &&
                React.createElement("div", { className: 'panel-content suggested', role: 'list', "aria-labelledby": ariaIdFullTitle + " " + ariaIdSuggested, ref: function (e) { return e && focusing === 'suggested' && focus(e.children[suggestedSelectedIndex]); } },
                    !isLoading && isLoadingSuggested && React.createElement("div", { className: 'loading' },
                        React.createElement(LoadingSvg, null)),
                    !isLoadingSuggested && suggestedElements),
            (sortOrderOptions || showAllHeader) && React.createElement("div", { className: 'panel-sectiontitle' },
                showAllHeader && React.createElement("span", { id: ariaIdAll, className: 'panel-text' }, Utils.getString(strings, 'searchResultAllText')),
                (!isLoading || !isLoadingSuggested) && sortOrderOptions && React.createElement("div", { className: 'panel-sortorder-container' },
                    React.createElement("div", { className: 'sortorder-label', role: 'presentation' }, Utils.getString(strings, 'searchResultSortBy', 'Sort by')),
                    React.createElement(Listbox, { id: 'panel-sortorder', options: sortOrderOptions, selectedIndex: sortOrderOptions.indexOf(sortOrderOptions.filter(function (v) { return v.selected; })[0]), label: Utils.getString(strings, 'searchResultSortBy', 'Sort by'), onChange: onSortOrderChanged }))),
            React.createElement("div", { className: 'panel-content', role: 'list', "aria-labelledby": ariaIdFullTitle + " " + ariaIdAll, ref: function (e) { return e && focusing === 'all' && focus(e.children[selectedIndex]); } },
                isLoading && React.createElement("div", { className: 'loading' },
                    React.createElement(LoadingSvg, null)),
                isFailed && React.createElement("div", { className: 'error-banner' },
                    React.createElement("span", { className: 'error-banner-text' }, Utils.getString(strings, 'errorRetrievingData'))),
                !isLoading && !isFailed && elements,
                !isLoading && !isFailed && elements.length === limit && React.createElement("div", { className: 'panel-limit' }, Utils.getString(strings, 'searchListLimit').format(limit.toString())))));
};
//# sourceMappingURL=SearchPanel.js.map