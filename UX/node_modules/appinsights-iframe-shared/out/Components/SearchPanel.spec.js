import * as React from 'react';
import { SearchPanel } from './SearchPanel';
import { Listbox } from './listbox';
describe('SearchPanel', function () {
    var strings = {
        'searchResultFilterText': 'sRFT',
        'searchResultAllText': 'All',
        'searchResultSuggestedText': 'Suggested'
    };
    var onClose = jasmine.createSpy('onClose');
    var onClick = jasmine.createSpy('onClick');
    var icon = {};
    var results = [{
            data: 'data',
            type: 'request',
            extraFields: [{ name: 'name', value: 'value' }],
            timestamp: new Date('2018-07-30T21:39:50.968Z'),
            onClick: onClick
        }, {
            data: 'data2',
            type: 'request',
            extraFields: [{ name: 'name2', value: 'value2' }],
            isSelected: true,
            timestamp: new Date('2018-07-30T21:39:50.968Z'),
            onClick: onClick,
            icon: icon
        }];
    var labels = [{
            name: 'name',
            value: 'value'
        }];
    it('should return expected elements', function () {
        var panel = SearchPanel({ strings: strings, title: 'title', onClose: onClose,
            limit: 3, isLoading: false, isFailed: false, results: results, filterLabels: labels });
        expect(panel.props.className).toBe('search-panel');
        expect(panel.props.children[0].props.className).toBe('acc-hidden');
        expect(panel.props.children[0].props.role).toBe('status');
        expect(panel.props.children[1].props.className).toBe('panel-title');
        expect(panel.props.children[1].props.children.props.children).toBe('title');
        expect(panel.props.children[2].props.className).toBe('panel-x');
        expect(panel.props.children[2].props.onClick).toBe(onClose);
        expect(panel.props.children[3].props.className).toBe('panel-filters');
        expect(panel.props.children[3].props.children[0]).toBe('sRFT');
        expect(panel.props.children[3].props.children[1][0].props.className).toBe('filter-label');
        expect(panel.props.children[3].props.children[1][0].props.children[0].props.children).toBe('name');
        expect(panel.props.children[3].props.children[1][0].props.children[1].props.children).toBe('value');
        expect(panel.props.children[4]).toBeFalsy();
        var scrollPanel = panel.props.children[5];
        expect(scrollPanel.props.className).toBe('panel-scroll');
        expect(scrollPanel.props.children[0]).toBeFalsy();
        expect(scrollPanel.props.children[1]).toBeFalsy();
        expect(scrollPanel.props.children[2]).toBeFalsy();
        expect(scrollPanel.props.children[3].props.className).toBe('panel-content');
        expect(scrollPanel.props.children[3].props.role).toBe('list');
        expect(scrollPanel.props.children[3].props.children[2][0].props.className).toBe('search-item');
        expect(scrollPanel.props.children[3].props.children[2][0].props.role).toBe('listitem');
        expect(scrollPanel.props.children[3].props.children[2][0].props.onClick).toBe(onClick);
        expect(scrollPanel.props.children[3].props.children[2][0].props.children[0].props.children[0])
            .toBe(undefined);
        expect(scrollPanel.props.children[3].props.children[2][0].props.children[0].props.children[1])
            .toBe(results[0].timestamp.toLocaleString());
        expect(scrollPanel.props.children[3].props.children[2][0].props.children[0].props.children[2])
            .toBe(undefined);
        expect(scrollPanel.props.children[3].props.children[2][0].props.children[1].props.children).toBe('data');
        expect(scrollPanel.props.children[3].props.children[2][0].props.children[2].props.className).toBe('extra-fields');
        expect(scrollPanel.props.children[3].props.children[2][0].props.children[2].props.children[0].props.className).toBe('field');
        expect(scrollPanel.props.children[3].props.children[2][0].props.children[2].props.children[0].props.children[0]
            .props.children[0]).toBe('name');
        expect(scrollPanel.props.children[3].props.children[2][0].props.children[2].props.children[0].props.children[1]
            .props.children).toBe('value');
        expect(scrollPanel.props.children[3].props.children[2][1].props.className).toBe('search-item selected');
        expect(scrollPanel.props.children[3].props.children[2][1].props.role).toBe('listitem');
        expect(scrollPanel.props.children[3].props.children[2][1].props.onClick).toBe(onClick);
        expect(scrollPanel.props.children[3].props.children[2][1].props.children[0].props.children[0])
            .toBe(undefined);
        expect(scrollPanel.props.children[3].props.children[2][1].props.children[0].props.children[1])
            .toBe(results[0].timestamp.toLocaleString());
        expect(scrollPanel.props.children[3].props.children[2][1].props.children[0].props.children[2].props.children)
            .toBe(icon);
        expect(scrollPanel.props.children[3].props.children[2][1].props.children[1].props.children).toBe('data2');
        expect(scrollPanel.props.children[3].props.children[2][1].props.children[2].props.className).toBe('extra-fields');
        expect(scrollPanel.props.children[3].props.children[2][1].props.children[2].props.children[0].props.className).toBe('field');
        expect(scrollPanel.props.children[3].props.children[2][1].props.children[2].props.children[0].props.children[0]
            .props.children[0]).toBe('name2');
        expect(scrollPanel.props.children[3].props.children[2][1].props.children[2].props.children[0].props.children[1]
            .props.children).toBe('value2');
    });
    it('should return expected elements (notice)', function () {
        var noticeElm = React.createElement('div');
        var panel = SearchPanel({ strings: strings, title: 'title', onClose: onClose, notice: noticeElm,
            limit: 3, isLoading: false, isFailed: false, results: results, filterLabels: labels });
        expect(panel.props.children[4].props.children).toBe(noticeElm);
    });
    it('should return expected elements (sort)', function () {
        var noticeElm = React.createElement('div');
        var panel = SearchPanel({ strings: strings, title: 'title', onClose: onClose, notice: noticeElm,
            limit: 3, isLoading: false, isFailed: false, results: results, filterLabels: labels, sortOrderOptions: [] });
        var scrollPanel = panel.props.children[5];
        var sortorderContainer = scrollPanel.props.children[2].props.children[1];
        expect(sortorderContainer.props.children[0].props.children).toBe('Sort by');
        expect(sortorderContainer.props.children[1].type).toBe(Listbox);
    });
    it('should return expected elements (type)', function () {
        var panel = SearchPanel({ strings: strings, title: 'title', onClose: onClose, showTypes: true,
            limit: 3, isLoading: false, isFailed: false, results: results, filterLabels: labels });
        var scrollPanel = panel.props.children[5];
        expect(scrollPanel.props.children[3].props.children[2][0].props.children[0].props.children[0].props.className)
            .toBe('colorbar');
        expect(scrollPanel.props.children[3].props.children[2][1].props.children[0].props.children[0].props.className)
            .toBe('colorbar');
    });
    it('should return expected elements (suggested)', function () {
        var panel = SearchPanel({ strings: strings, title: 'title', onClose: onClose, suggestedResults: results,
            limit: 3, isLoading: false, isFailed: false, results: results, filterLabels: labels });
        expect(panel.props.className).toBe('search-panel');
        expect(panel.props.children[0].props.className).toBe('acc-hidden');
        expect(panel.props.children[0].props.role).toBe('status');
        expect(panel.props.children[1].props.className).toBe('panel-title');
        expect(panel.props.children[1].props.children.props.children).toBe('title');
        expect(panel.props.children[2].props.className).toBe('panel-x');
        expect(panel.props.children[2].props.onClick).toBe(onClose);
        expect(panel.props.children[3].props.className).toBe('panel-filters');
        expect(panel.props.children[3].props.children[0]).toBe('sRFT');
        expect(panel.props.children[3].props.children[1][0].props.className).toBe('filter-label');
        expect(panel.props.children[3].props.children[1][0].props.children[0].props.children).toBe('name');
        expect(panel.props.children[3].props.children[1][0].props.children[1].props.children).toBe('value');
        expect(panel.props.children[4]).toBeFalsy();
        var scrollPanel = panel.props.children[5];
        expect(scrollPanel.props.className).toBe('panel-scroll');
        expect(scrollPanel.props.children[0].props.className).toBe('panel-sectiontitle');
        expect(scrollPanel.props.children[0].props.children).toBe('Suggested');
        expect(scrollPanel.props.children[1].props.className).toBe('panel-content suggested');
        expect(scrollPanel.props.children[1].props.children[1][0].props.className).toBe('search-item');
        expect(scrollPanel.props.children[1].props.children[1][0].props.onClick).toBe(onClick);
        expect(scrollPanel.props.children[1].props.children[1][0].props.children[0].props.children[0])
            .toBe(undefined);
        expect(scrollPanel.props.children[1].props.children[1][0].props.children[0].props.children[1])
            .toBe(results[0].timestamp.toLocaleString());
        expect(scrollPanel.props.children[1].props.children[1][0].props.children[0].props.children[2])
            .toBe(undefined);
        expect(scrollPanel.props.children[1].props.children[1][0].props.children[1].props.children).toBe('data');
        expect(scrollPanel.props.children[1].props.children[1][0].props.children[2].props.className).toBe('extra-fields');
        expect(scrollPanel.props.children[1].props.children[1][0].props.children[2].props.children[0].props.className).toBe('field');
        expect(scrollPanel.props.children[1].props.children[1][0].props.children[2].props.children[0].props.children[0]
            .props.children[0]).toBe('name');
        expect(scrollPanel.props.children[1].props.children[1][0].props.children[2].props.children[0].props.children[1]
            .props.children).toBe('value');
        expect(scrollPanel.props.children[2].props.className).toBe('panel-sectiontitle');
        expect(scrollPanel.props.children[2].props.children[0].props.children).toBe('All');
        expect(scrollPanel.props.children[2].props.children[1]).toBeFalsy();
        expect(scrollPanel.props.children[3].props.className).toBe('panel-content');
        expect(scrollPanel.props.children[3].props.children[2][0].props.className).toBe('search-item');
        expect(scrollPanel.props.children[3].props.children[2][0].props.onClick).toBe(onClick);
        expect(scrollPanel.props.children[3].props.children[2][0].props.children[0].props.children[0])
            .toBe(undefined);
        expect(scrollPanel.props.children[3].props.children[2][0].props.children[0].props.children[1])
            .toBe(results[0].timestamp.toLocaleString());
        expect(scrollPanel.props.children[3].props.children[2][0].props.children[0].props.children[2])
            .toBe(undefined);
        expect(scrollPanel.props.children[3].props.children[2][0].props.children[1].props.children).toBe('data');
        expect(scrollPanel.props.children[3].props.children[2][0].props.children[2].props.className).toBe('extra-fields');
        expect(scrollPanel.props.children[3].props.children[2][0].props.children[2].props.children[0].props.className).toBe('field');
        expect(scrollPanel.props.children[3].props.children[2][0].props.children[2].props.children[0].props.children[0]
            .props.children[0]).toBe('name');
        expect(scrollPanel.props.children[3].props.children[2][0].props.children[2].props.children[0].props.children[1]
            .props.children).toBe('value');
        expect(scrollPanel.props.children[3].props.children[2][1].props.className).toBe('search-item selected');
        expect(scrollPanel.props.children[3].props.children[2][1].props.onClick).toBe(onClick);
        expect(scrollPanel.props.children[3].props.children[2][1].props.children[0].props.children[0])
            .toBe(undefined);
        expect(scrollPanel.props.children[3].props.children[2][1].props.children[0].props.children[1])
            .toBe(results[0].timestamp.toLocaleString());
        expect(scrollPanel.props.children[3].props.children[2][1].props.children[0].props.children[2].props.children)
            .toBe(icon);
        expect(scrollPanel.props.children[3].props.children[2][1].props.children[1].props.children).toBe('data2');
        expect(scrollPanel.props.children[3].props.children[2][1].props.children[2].props.className).toBe('extra-fields');
        expect(scrollPanel.props.children[3].props.children[2][1].props.children[2].props.children[0].props.className).toBe('field');
        expect(scrollPanel.props.children[3].props.children[2][1].props.children[2].props.children[0].props.children[0]
            .props.children[0]).toBe('name2');
        expect(scrollPanel.props.children[3].props.children[2][1].props.children[2].props.children[0].props.children[1]
            .props.children).toBe('value2');
    });
});
//# sourceMappingURL=SearchPanel.spec.js.map