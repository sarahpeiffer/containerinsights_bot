/// <reference types="react" />
import * as React from 'react';
export declare enum TooltipPosition {
    None = "",
    Above = "above",
    Below = "below",
}
export interface TooltipServiceRendererState {
    visible: boolean;
    x: number;
    y: number;
    position: TooltipPosition;
    text: string;
    locked: boolean;
}
export declare class TooltipServiceRenderer extends React.Component<null, TooltipServiceRendererState> {
    /** Do not use directly! Use TooltipService.getRenderer  */
    constructor(props: null);
    updateState(newState: TooltipServiceRendererState): void;
    getTooltip(): JSX.Element;
    render(): JSX.Element;
}
/** A messenger between components requesting a tooltip and the tooltip renderer */
export declare class TooltipService {
    private static renderer;
    private static rendererUpdateState;
    private static lockState;
    private static generateDefaultTooltip();
    static hideActiveTooltip(): void;
    static registerRenderer(updateMethod: (state: TooltipServiceRendererState) => null): void;
    static registerTooltipForElement(elementAttributes: React.HTMLAttributes<any>, getDomElement: () => HTMLElement, text: string): void;
    /** Get the rendering canvas for the global tooltip layer.
     *  Place this at the root HTML element to cover all elements.
     *  This should only be used once
     */
    static getRenderer(): JSX.Element;
}
