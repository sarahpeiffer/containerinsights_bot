/// <reference types="react" />
import * as React from 'react';
import { StringMap } from '../../SharedInterfaces';
export interface AccordionItem {
    /** Accordion item expandable content */
    content: JSX.Element;
    /** Accordion item heading */
    heading: (isExpanded: boolean) => JSX.Element;
    /** IMPORTANT: Provide this label for accessibility compliance. */
    headingLabel: string;
    /**
     * ID of the accordion item. Must be unique
     */
    id: string;
    props?: React.HTMLProps<HTMLHeadingElement>;
    /** True if the accordion will be expanded by default */
    isExpanded: boolean;
    /** Forces the expand/collapse state to the value here if type is boolean */
    forcedisExpanded?: boolean;
}
export interface AccordionProps {
    items: AccordionItem[];
    onItemChanged?: (item: AccordionItem, isExpanded: boolean) => void;
    props?: React.HTMLProps<HTMLDivElement>;
}
export interface AccordionState {
    expanded: StringMap<boolean>;
}
/**
 * Accessible accordion that supports expanding and collapsing with all necessary keyboard actions supported.
 */
export declare class Accordion extends React.Component<AccordionProps, AccordionState> {
    private _onKeyDown;
    private _menu;
    private _div;
    private _ref;
    constructor(props: AccordionProps);
    componentWillReceiveProps(nextProps: AccordionProps): void;
    render(): JSX.Element;
    private getItems();
    private onKeyDown(e);
    private onItemKeyDown(e, item);
    private onItemClick(item);
    private toggleExpansion(item);
    focus(index: number): void;
}
