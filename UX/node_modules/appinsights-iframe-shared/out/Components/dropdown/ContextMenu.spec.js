import { ContextMenu } from './ContextMenu';
import { EllipsisSvg, TestUtilities } from '../..';
import { Flyout } from './Flyout';
describe('ContextMenu', function () {
    var props;
    var menu;
    var renderedMenu;
    var setStateSpy;
    beforeEach(function () {
        props = {
            options: [],
            messageService: {}
        };
        menu = new ContextMenu(props);
        setStateSpy = spyOn(menu, 'setState').and.callFake(function (p) {
            menu.state = TestUtilities.SetState(menu.state, menu.props, p);
        });
    });
    describe('focus', function () {
        it('focuses on the button', function () {
            var spy = jasmine.createSpy('focus');
            var mock = {
                focus: spy
            };
            menu['_button'] = mock;
            menu.focus();
            expect(spy).toHaveBeenCalledTimes(1);
        });
    });
    describe('onClick', function () {
        it('makes flyout visible when previously not visible', function () {
            menu.onClick();
            expect(setStateSpy).toHaveBeenCalledWith({ visible: true });
        });
        it('makes flyout not visible when previously visible', function () {
            menu.setState({ visible: true });
            menu.onClick();
            expect(setStateSpy).toHaveBeenCalledWith({ visible: false });
        });
    });
    describe('componentWillMount', function () {
        it('will add the window event handler', function () {
            var spy = spyOn(window, 'addEventListener');
            menu.componentWillMount();
            expect(spy).toHaveBeenCalledWith('click', jasmine.anything());
        });
    });
    describe('componentWillUnmount', function () {
        it('will remove the window event handler', function () {
            var spy = spyOn(window, 'removeEventListener');
            menu.componentWillUnmount();
            expect(spy).toHaveBeenCalledWith('click', jasmine.anything());
        });
    });
    describe('render', function () {
        it('should only render the ellipsis when not visible', function () {
            renderedMenu = menu.render();
            expect(renderedMenu.props.children[0]).toBeTruthy();
            expect(renderedMenu.props.children[0].type).toBe(EllipsisSvg);
            expect(renderedMenu.props.children[1]).toBeFalsy();
        });
        it('should render the ellipsis and flyout when visible', function () {
            menu.setState({ visible: true });
            menu['_container'] = document.createElement('div');
            renderedMenu = menu.render();
            expect(renderedMenu.props.children[0]).toBeTruthy();
            expect(renderedMenu.props.children[0].type).toBe(EllipsisSvg);
            expect(renderedMenu.props.children[1]).toBeTruthy();
            expect(renderedMenu.props.children[1].children).toBeTruthy();
            expect(renderedMenu.props.children[1].children.type).toBe(Flyout);
        });
    });
});
//# sourceMappingURL=ContextMenu.spec.js.map