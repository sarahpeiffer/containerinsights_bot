import { DropdownLinkOption } from './DropdownLinkOption';
import { MenuItem } from './MenuItem';
describe('DropdownLinkOption', function () {
    var props;
    var subProps;
    var option;
    beforeEach(function () {
        props = {
            name: 'my option',
            url: 'my url',
            onClick: function () { },
            offset: true,
            focusIndex: -1,
            group: 'my group',
            icon: {},
            index: -1,
            onHover: function () { },
            onHoverEnd: function () { }
        };
        subProps = (_a = {
                className: 'dropdown-option',
                onClick: function () { },
                onMouseEnter: function () { },
                onMouseLeave: function () { },
                ref: function () { },
                tabIndex: -1
            },
            _a['aria-label'] = 'label',
            _a);
        spyOn(props, 'onClick');
        spyOn(subProps, 'ref');
        option = new DropdownLinkOption(props);
        var _a;
    });
    it('should have a menu item', function () {
        var rendered = option.render();
        expect(rendered.type).toBe(MenuItem);
        expect(rendered.props.name).toBe(props.name);
        expect(rendered.props.onClick).toBe(props.onClick);
        expect(rendered.props.onHover).toBe(props.onHover);
        expect(rendered.props.onHoverEnd).toBe(props.onHoverEnd);
        expect(rendered.props.focusIndex).toBe(props.focusIndex);
        expect(rendered.props.index).toBe(props.index);
        expect(rendered.props.group).toBe(props.group);
    });
    it('should have a list item', function () {
        var rendered = option.render();
        var item = rendered.props.content(subProps);
        expect(item.type).toBe('li');
        expect(item.props.className).toBe('dropdown-option dropdown-link');
        expect(item.props.onMouseEnter).toBe(subProps.onMouseEnter);
        expect(item.props.onMouseLeave).toBe(subProps.onMouseLeave);
        expect(item.props.onFocus).toBe(props.onHover);
        var link = item.props.children;
        expect(link.type).toBe('a');
        expect(link.props.title).toBe(props.name);
        expect(link.props.href).toBe(props.url);
        expect(link.props.tabIndex).toBe(subProps.tabIndex);
        expect(link.props['aria-label']).toBe(subProps['aria-label']);
        expect(link.props.target).toBe('_blank');
        expect(link.props.onClick).toBe(subProps.onClick);
        expect(link.ref).toBe(subProps.ref);
        var icon = link.props.children[0];
        expect(icon).toBe(props.icon);
        var title = link.props.children[1];
        expect(title.props.className).toBe('dropdown-offset');
        expect(title.props.children).toBe(props.name);
    });
    it('should not have offset class if offset false', function () {
        props.offset = false;
        var rendered = option.render();
        var item = rendered.props.content(subProps);
        var link = item.props.children;
        var title = link.props.children[1];
        expect(title.props.className).toBe('');
    });
    it('should call click handler if enter pressed', function () {
        var rendered = option.render();
        var item = rendered.props.content(subProps);
        var link = item.props.children;
        var e = {
            key: 'Enter',
            stopPropagation: function () { }
        };
        spyOn(e, 'stopPropagation');
        link.props.onKeyPress(e);
        expect(e.stopPropagation).toHaveBeenCalledTimes(1);
        expect(props.onClick).toHaveBeenCalledTimes(1);
    });
    it('should call click handler if space pressed', function () {
        var rendered = option.render();
        var item = rendered.props.content(subProps);
        var link = item.props.children;
        var e = {
            key: ' ',
            stopPropagation: function () { }
        };
        spyOn(e, 'stopPropagation');
        link.props.onKeyPress(e);
        expect(e.stopPropagation).toHaveBeenCalledTimes(1);
        expect(props.onClick).toHaveBeenCalledTimes(1);
    });
    it('should not call click handler if other key pressed', function () {
        var rendered = option.render();
        var item = rendered.props.content(subProps);
        var link = item.props.children;
        var e = {
            key: '2',
            stopPropagation: function () { }
        };
        spyOn(e, 'stopPropagation');
        link.props.onKeyPress(e);
        expect(e.stopPropagation).not.toHaveBeenCalled();
        expect(props.onClick).not.toHaveBeenCalled();
    });
});
//# sourceMappingURL=DropdownLinkOption.spec.js.map