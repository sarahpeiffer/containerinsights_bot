/// <reference types="react" />
import * as React from 'react';
import { PortalMessageService } from '../../Services/PortalMessageService';
import { DropdownLink, DropdownOption, DropdownMessage, DropdownAction, DropdownDivider } from './DropdownTypes';
import { MenuBarItemProps } from '../menubar';
export interface DropdownWithLinksProps extends MenuBarItemProps {
    /**
     * The title and image for the pulldown menu. Similar to a combobox's currently selected item in appearance.
     */
    header: JSX.Element;
    /**
     * Name of the class to be applied to the outer-most element of the pulldown menu.
     * Defaults to combobox-dropdown-wrapper
     */
    wrapperClassName: string;
    /**
     * Name of the class to be applied to the pulldown menu flyout.
     * Defaults to dropdown-flyout
     */
    flyoutClassName: string;
    /**
     * The menu options for the pulldown menu.
     */
    options: (DropdownDivider | DropdownLink | DropdownMessage | DropdownAction)[];
    /**
     * Callback for when a menu item is selected.
     */
    onChange: (selected: DropdownOption) => void;
    /**
     * Optional callback for when an item is hovered over.
     */
    onHover?: (selected: DropdownOption) => void;
    /**
     * Optional callback for when hover is ended.
     */
    onHoverEnd?: () => void;
    /**
     * Portal Message Service instance to use to send messages to the extension.
     */
    messageService: PortalMessageService;
    /**
     * Aria-label for the pulldown menu.
     */
    label: string;
    /**
     * Boolean value indicating that the dropdown is not a menu item, so left/right arrows should not close the dropdown
     */
    notPartOfMenu?: boolean;
}
export interface DropdownWithLinksState {
    isOpen: boolean;
}
/**
 * A pull-down menu that supports ARIA role of menu with all associated behaviors and keyboard actions.
 */
export declare class DropdownWithLinks extends React.Component<DropdownWithLinksProps, DropdownWithLinksState> {
    private _dropdown;
    private _flyout;
    private _bindDropdown;
    private _bindFlyout;
    private _onWindowClick;
    private _onClick;
    private _onClose;
    private _shouldFocus;
    private _onKeyDown;
    private _id;
    constructor(props: DropdownWithLinksProps);
    componentWillUpdate(nextProps: DropdownWithLinksProps): void;
    componentWillMount(): void;
    componentDidUpdate(prevProps: DropdownWithLinksProps, prevState: DropdownWithLinksState): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
    private adjust();
    private onClick(e);
    private onWindowClick(e);
    private onClose();
    private onKeyDown(e);
    private bindDropdown(e);
    private close();
    private focus();
}
