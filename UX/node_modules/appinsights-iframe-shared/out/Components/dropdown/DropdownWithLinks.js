import * as tslib_1 from "tslib";
import * as React from 'react';
import * as KeyCodes from '../../KeyCodes';
import { AccessibilityUtils } from '../..';
import { Flyout } from './Flyout';
/**
 * A pull-down menu that supports ARIA role of menu with all associated behaviors and keyboard actions.
 */
var DropdownWithLinks = /** @class */ (function (_super) {
    tslib_1.__extends(DropdownWithLinks, _super);
    function DropdownWithLinks(props) {
        var _this = _super.call(this, props) || this;
        _this._onClick = _this.onClick.bind(_this);
        _this._onClose = _this.onClose.bind(_this);
        _this._shouldFocus = false;
        _this._onKeyDown = _this.onKeyDown.bind(_this);
        _this._id = AccessibilityUtils.getRandomElementId();
        _this.state = {
            isOpen: false
        };
        _this._bindDropdown = _this.bindDropdown.bind(_this);
        _this._bindFlyout = function (e) { return _this._flyout = e; };
        _this._onWindowClick = _this.onWindowClick.bind(_this);
        return _this;
    }
    DropdownWithLinks.prototype.componentWillUpdate = function (nextProps) {
        if (nextProps.isFocused && !this.props.isFocused) {
            this._shouldFocus = nextProps.isFocused;
        }
        if (nextProps.header !== this.props.header && this._dropdown) {
            this._dropdown.setAttribute('style', '');
        }
    };
    DropdownWithLinks.prototype.componentWillMount = function () {
        window.addEventListener('click', this._onWindowClick);
        this._shouldFocus = this.props.isFocused;
    };
    DropdownWithLinks.prototype.componentDidUpdate = function (prevProps, prevState) {
        this.focus();
        var optionsChanged = this.props.options.length !== prevProps.options.length;
        if (!optionsChanged) {
            this.props.options.forEach(function (option, i) {
                if (option.displayName !== prevProps.options[i].displayName) {
                    optionsChanged = true;
                    return;
                }
            });
        }
        if (optionsChanged || prevProps.header !== this.props.header) {
            this.adjust();
        }
    };
    DropdownWithLinks.prototype.componentDidMount = function () {
        this.focus();
        this.adjust();
    };
    DropdownWithLinks.prototype.componentWillUnmount = function () {
        window.removeEventListener('click', this._onWindowClick);
    };
    DropdownWithLinks.prototype.render = function () {
        return React.createElement("div", { className: 'listbox pulldown-menu', onKeyDown: this._onKeyDown },
            React.createElement("div", { className: 'listbox-wrapper', role: 'presentation' },
                React.createElement("div", { id: "dropdown-" + this._id, "aria-haspopup": 'true', "aria-owns": "flyout-" + this._id, "aria-label": this.props.label, role: this.props.role || 'button', "aria-expanded": this.state.isOpen, "aria-controls": "flyout-" + this._id, className: this.props.wrapperClassName || 'combobox-dropdown-wrapper', onClick: this._onClick, tabIndex: this.props.tabIndex || 0, ref: this._bindDropdown }, this.props.header),
                React.createElement(Flyout, tslib_1.__assign({ id: "flyout-" + this._id, ref: this._bindFlyout }, this.props, { expanded: this.state.isOpen, onClose: this._onClose }))));
    };
    DropdownWithLinks.prototype.adjust = function () {
        if (this._flyout && this._dropdown && (!this.props.wrapperClassName ||
            this.props.wrapperClassName.indexOf('combobox-dropdown-wrapper') >= 0)) {
            this._flyout.setAttribute('style', 'width: auto; height: auto;');
            var width = Math.max(this._dropdown.offsetWidth, this._flyout.offsetWidth);
            this._flyout.setAttribute('style', 'top: ' + (this._dropdown.offsetHeight + this._dropdown.offsetTop)
                + 'px; width: ' + width + 'px;');
            this._dropdown.setAttribute('style', 'width: ' + width + 'px;');
        }
    };
    DropdownWithLinks.prototype.onClick = function (e) {
        e.preventDefault();
        this.setState({ isOpen: !this.state.isOpen });
    };
    DropdownWithLinks.prototype.onWindowClick = function (e) {
        if (this.state.isOpen && this._dropdown && !this._dropdown.contains(e.target)) {
            this.close();
        }
    };
    DropdownWithLinks.prototype.onClose = function () {
        this._shouldFocus = true;
        this.close();
    };
    DropdownWithLinks.prototype.onKeyDown = function (e) {
        if (e.keyCode === KeyCodes.UP_ARROW || e.keyCode === KeyCodes.DOWN_ARROW) {
            e.preventDefault();
            e.stopPropagation();
        }
        if (this.state.isOpen) {
            if (e.keyCode === KeyCodes.TAB ||
                !this.props.notPartOfMenu && (e.keyCode === KeyCodes.LEFT_ARROW ||
                    e.keyCode === KeyCodes.RIGHT_ARROW)) {
                this.close();
            }
            else if (this._flyout && this._flyout.onKeyDown) {
                this._flyout.onKeyDown(e);
            }
        }
        else if (e.keyCode === KeyCodes.DOWN_ARROW || e.keyCode === KeyCodes.UP_ARROW ||
            e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            e.stopPropagation();
            this.setState({ isOpen: true });
        }
    };
    DropdownWithLinks.prototype.bindDropdown = function (e) {
        this._dropdown = e;
    };
    DropdownWithLinks.prototype.close = function () {
        this.setState({ isOpen: false });
        if (this.props.onHoverEnd) {
            this.props.onHoverEnd();
        }
    };
    DropdownWithLinks.prototype.focus = function () {
        if (this._shouldFocus && this._dropdown) {
            this._dropdown.focus();
            this._shouldFocus = false;
        }
    };
    return DropdownWithLinks;
}(React.Component));
export { DropdownWithLinks };
//# sourceMappingURL=DropdownWithLinks.js.map