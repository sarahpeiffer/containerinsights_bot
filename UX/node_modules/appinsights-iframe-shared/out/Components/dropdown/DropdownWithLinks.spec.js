/* tslint:disable */
import * as React from 'react';
/* tslint:enable */
import { DropdownWithLinks } from './DropdownWithLinks';
import { DropdownLink, DropdownMessage, DropdownAction, DropdownDivider } from './DropdownTypes';
import { TestUtilities } from '../../TestUtilities';
import { Flyout } from './Flyout';
describe('DropdownWithLinks', function () {
    var props;
    var dropdown;
    beforeEach(function () {
        props = {
            header: React.createElement("div", null),
            wrapperClassName: 'wrapperClassName',
            flyoutClassName: 'flyoutClassName',
            onChange: function (selected) { },
            options: [
                new DropdownLink('option1', 'display name 1', 'value 1'),
                new DropdownLink('option2', 'display name 2', 'value 2'),
                new DropdownMessage('option3', 'display name 3', 'msg', {})
            ],
            onHover: function () { },
            onHoverEnd: function () { },
            messageService: {},
            label: 'my label',
            isFocused: false,
            role: 'menu',
            tabIndex: 1
        };
        spyOn(props, 'onChange');
        spyOn(props, 'onHover');
        spyOn(props, 'onHoverEnd');
        dropdown = new DropdownWithLinks(props);
        spyOn(dropdown, 'setState').and.callFake(function (p) {
            dropdown.state = TestUtilities.SetState(dropdown.state, dropdown.props, p);
        });
    });
    describe('componentWillMount', function () {
        var spy;
        beforeEach(function () {
            spy = spyOn(window, 'addEventListener');
            dropdown.componentWillMount();
        });
        it('should register click and key up listeners', function () {
            expect(window.addEventListener).toHaveBeenCalledTimes(1);
            expect(window.addEventListener).toHaveBeenCalledWith('click', jasmine.anything());
        });
        describe('click', function () {
            var listener;
            var domSpy;
            beforeEach(function () {
                var targetCall = spy.calls.all().filter(function (t) { return t.args[0] === 'click'; });
                listener = targetCall[0].args[1];
                var dropdownDOM = {
                    contains: function () { }
                };
                domSpy = spyOn(dropdownDOM, 'contains');
                dropdown['_dropdown'] = dropdownDOM;
            });
            it('should close dropdown if open and clicked outside', function () {
                var state = dropdown.state;
                state.isOpen = true;
                domSpy.and.returnValue(false);
                var e = {
                    target: {}
                };
                listener(e);
                expect(dropdown.setState).toHaveBeenCalledTimes(1);
                expect(dropdown.state.isOpen).toBe(false);
                expect(domSpy).toHaveBeenCalledTimes(1);
                expect(domSpy).toHaveBeenCalledWith(e.target);
            });
            it('should not close dropdown if click was inside', function () {
                var state = dropdown.state;
                state.isOpen = true;
                domSpy.and.returnValue(true);
                var e = {
                    target: {}
                };
                listener(e);
                expect(dropdown.setState).not.toHaveBeenCalled();
                expect(dropdown.state.isOpen).toBe(true);
                expect(domSpy).toHaveBeenCalledTimes(1);
                expect(domSpy).toHaveBeenCalledWith(e.target);
            });
            it('should not close dropdown if already closed', function () {
                var state = dropdown.state;
                state.isOpen = false;
                var e = {
                    target: {}
                };
                listener(e);
                expect(dropdown.setState).not.toHaveBeenCalled();
                expect(dropdown.state.isOpen).toBe(false);
                expect(domSpy).not.toHaveBeenCalled();
            });
        });
    });
    describe('componentWillUnmount', function () {
        it('should remove event listeners', function () {
            spyOn(window, 'removeEventListener');
            dropdown.componentWillUnmount();
            expect(window.removeEventListener).toHaveBeenCalledTimes(1);
            expect(window.removeEventListener).toHaveBeenCalledWith('click', jasmine.anything());
        });
    });
    describe('render', function () {
        var renderedDropdown;
        var dropdownDiv;
        var dropdownFlyout;
        function verifyClosed() {
            var flyout = TestUtilities.FindSingle(renderedDropdown, function (t) { return t.type === Flyout; });
            expect(flyout).not.toBeNull();
            expect(flyout.props.expanded).toBe(false);
        }
        function mount() {
            var div = {
                focus: function () { },
                setAttribute: function () { }
            };
            spyOn(div, 'focus');
            spyOn(div, 'setAttribute');
            var flyout = {
                setAttribute: function () { }
            };
            spyOn(flyout, 'setAttribute');
            renderedDropdown.props.children.props.children[0].ref(div);
            renderedDropdown.props.children.props.children[1].ref(flyout);
            return {
                div: div,
                flyout: flyout
            };
        }
        beforeEach(function () {
            renderedDropdown = dropdown.render();
            var mounted = mount();
            dropdownDiv = mounted.div;
            dropdownFlyout = mounted.flyout;
        });
        describe('componentDidMount', function () {
            it('should adjust size and position', function () {
                props.wrapperClassName = null;
                dropdown = new DropdownWithLinks(props);
                renderedDropdown = dropdown.render();
                var mounted = mount();
                dropdownDiv = mounted.div;
                dropdownFlyout = mounted.flyout;
                dropdownDiv.offsetHeight = 20;
                dropdownDiv.offsetWidth = 15;
                dropdownFlyout.offsetWidth = 25;
                dropdownDiv.offsetTop = 1;
                dropdown.componentDidMount();
                expect(dropdownDiv.setAttribute).toHaveBeenCalledTimes(1);
                expect(dropdownDiv.setAttribute).toHaveBeenCalledWith('style', 'width: 25px;');
                expect(dropdownFlyout.setAttribute).toHaveBeenCalledTimes(2);
                expect(dropdownFlyout.setAttribute).toHaveBeenCalledWith('style', 'width: auto; height: auto;');
                expect(dropdownFlyout.setAttribute).toHaveBeenCalledWith('style', 'top: 21px; width: 25px;');
            });
            it('should not adjust size and position if not combobox', function () {
                dropdownDiv.offsetHeight = 20;
                dropdownDiv.offsetWidth = 15;
                dropdownFlyout.offsetWidth = 25;
                dropdown.componentDidMount();
                expect(dropdownDiv.setAttribute).not.toHaveBeenCalled();
                expect(dropdownFlyout.setAttribute).not.toHaveBeenCalled();
            });
            it('should adjust size and position if dropdown bigger than flyout', function () {
                props.wrapperClassName = 'combobox-dropdown-wrapper';
                dropdown = new DropdownWithLinks(props);
                renderedDropdown = dropdown.render();
                var mounted = mount();
                dropdownDiv = mounted.div;
                dropdownFlyout = mounted.flyout;
                dropdownDiv.offsetHeight = 20;
                dropdownDiv.offsetWidth = 30;
                dropdownDiv.offsetTop = 1;
                dropdownFlyout.offsetWidth = 25;
                dropdown.componentDidMount();
                expect(dropdownDiv.setAttribute).toHaveBeenCalledTimes(1);
                expect(dropdownDiv.setAttribute).toHaveBeenCalledWith('style', 'width: 30px;');
                expect(dropdownFlyout.setAttribute).toHaveBeenCalledTimes(2);
                expect(dropdownFlyout.setAttribute).toHaveBeenCalledWith('style', 'width: auto; height: auto;');
                expect(dropdownFlyout.setAttribute).toHaveBeenCalledWith('style', 'top: 21px; width: 30px;');
            });
        });
        it('should have all required aria attributes', function () {
            var wrapper = TestUtilities.FindSingle(renderedDropdown, function (t) { return t.props.className.indexOf('wrapperClassName') >= 0; });
            expect(wrapper).not.toBeNull();
            expect(wrapper.props.tabIndex).toBe(props.tabIndex);
            expect(wrapper.props['aria-haspopup']).toBe('true');
            expect(wrapper.props['aria-owns'].indexOf('flyout-aria-')).toBe(0);
            expect(wrapper.props['aria-controls']).toBe(wrapper.props['aria-owns']);
            expect(wrapper.props['aria-label']).toBe(props.label);
            expect(wrapper.props['aria-expanded']).toBe(false);
            expect(wrapper.props.role).toBe(props.role);
        });
        it('should have a flyout even if closed', function () {
            var flyout = TestUtilities.FindSingle(renderedDropdown, function (t) { return t.type === Flyout; });
            expect(flyout).not.toBeNull();
        });
        it('should have a flyout with elements if open', function () {
            var state = dropdown.state;
            state.isOpen = true;
            renderedDropdown = dropdown.render();
            var flyout = TestUtilities.FindSingle(renderedDropdown, function (t) { return t.type === Flyout; });
            expect(flyout).not.toBeNull();
            expect(flyout.props.options.length).toBe(3);
            expect(flyout.props.options[0]).toBe(props.options[0]);
            expect(flyout.props.options[1]).toBe(props.options[1]);
            expect(flyout.props.options[2]).toBe(props.options[2]);
        });
        describe('onClick', function () {
            it('should open dropdown if it was closed', function () {
                var e = {
                    preventDefault: function () { }
                };
                spyOn(e, 'preventDefault');
                var combobox = TestUtilities.FindSingle(renderedDropdown, function (t) { return t.props.className === props.wrapperClassName; });
                expect(combobox).not.toBeNull();
                combobox.props.onClick(e);
                expect(dropdown.setState).toHaveBeenCalledTimes(1);
                renderedDropdown = dropdown.render();
                var flyout = TestUtilities.FindSingle(renderedDropdown, function (t) { return t.type === Flyout; });
                expect(flyout).not.toBeNull();
                expect(flyout.props.options.length).toBe(3);
                expect(flyout.props.options[0]).toBe(props.options[0]);
                expect(flyout.props.options[1]).toBe(props.options[1]);
                expect(flyout.props.options[2]).toBe(props.options[2]);
                expect(e.preventDefault).toHaveBeenCalled();
            });
            it('should close dropdown if it was open', function () {
                var e = {
                    stopPropagation: function () { },
                    preventDefault: function () { }
                };
                spyOn(e, 'preventDefault');
                var combobox = TestUtilities.FindSingle(renderedDropdown, function (t) { return t.props.className === props.wrapperClassName; });
                expect(combobox).not.toBeNull();
                combobox.props.onClick(e);
                dropdown.setState.calls.reset();
                combobox.props.onClick(e);
                expect(dropdown.setState).toHaveBeenCalledTimes(1);
                renderedDropdown = dropdown.render();
                verifyClosed();
                expect(e.preventDefault).toHaveBeenCalled();
            });
        });
        describe('onKeyDown', function () {
            var onKeyDown;
            var e;
            beforeEach(function () {
                props.options = [
                    new DropdownDivider('divider1', 'group1', React.createElement("div", null)),
                    new DropdownAction('action1', 'action1', function () { }),
                    new DropdownMessage('message1', 'message1', 'm', {}),
                    new DropdownDivider('divider2', 'group2', React.createElement("div", null)),
                    new DropdownLink('link1', 'link1', 'url')
                ];
                dropdown.componentWillUpdate(props);
                renderedDropdown = dropdown.render();
                var mounted = mount();
                dropdownDiv = mounted.div;
                onKeyDown = renderedDropdown.props.onKeyDown;
                e = {
                    preventDefault: function () { },
                    stopPropagation: function () { },
                    keyCode: 0
                };
                spyOn(e, 'preventDefault');
                spyOn(e, 'stopPropagation');
            });
            it('should open dropdown if up arrow pressed', function () {
                e.keyCode = 38;
                onKeyDown(e);
                expect(e.preventDefault).toHaveBeenCalled();
                expect(e.stopPropagation).toHaveBeenCalled();
                expect(dropdown.setState).toHaveBeenCalledTimes(1);
                renderedDropdown = dropdown.render();
                dropdownDiv = mount().div;
                var flyout = TestUtilities.FindSingle(renderedDropdown, function (t) { return t.type === Flyout; });
                expect(flyout).not.toBeNull();
                expect(flyout.props.expanded).toBe(true);
            });
            it('should open dropdown if down arrow pressed', function () {
                e.keyCode = 40;
                onKeyDown(e);
                expect(e.preventDefault).toHaveBeenCalled();
                expect(e.stopPropagation).toHaveBeenCalled();
                expect(dropdown.setState).toHaveBeenCalledTimes(1);
                renderedDropdown = dropdown.render();
                dropdownDiv = mount().div;
                var flyout = TestUtilities.FindSingle(renderedDropdown, function (t) { return t.type === Flyout; });
                expect(flyout).not.toBeNull();
                expect(flyout.props.expanded).toBe(true);
            });
            it('should open dropdown if space pressed', function () {
                e.key = ' ';
                onKeyDown(e);
                expect(e.preventDefault).toHaveBeenCalled();
                expect(e.stopPropagation).toHaveBeenCalled();
                expect(dropdown.setState).toHaveBeenCalledTimes(1);
                renderedDropdown = dropdown.render();
                dropdownDiv = mount().div;
                var flyout = TestUtilities.FindSingle(renderedDropdown, function (t) { return t.type === Flyout; });
                expect(flyout).not.toBeNull();
                expect(flyout.props.expanded).toBe(true);
            });
            it('should open dropdown if enter arrow pressed', function () {
                e.key = 'Enter';
                onKeyDown(e);
                expect(e.preventDefault).toHaveBeenCalled();
                expect(e.stopPropagation).toHaveBeenCalled();
                expect(dropdown.setState).toHaveBeenCalledTimes(1);
                renderedDropdown = dropdown.render();
                dropdownDiv = mount().div;
                var flyout = TestUtilities.FindSingle(renderedDropdown, function (t) { return t.type === Flyout; });
                expect(flyout).not.toBeNull();
                expect(flyout.props.expanded).toBe(true);
            });
            it('should close dropdown if tab pressed', function () {
                e.keyCode = 40;
                onKeyDown(e);
                dropdown.setState.calls.reset();
                e.keyCode = 9;
                onKeyDown(e);
                expect(e.preventDefault).toHaveBeenCalled();
                expect(dropdown.setState).toHaveBeenCalledTimes(1);
                renderedDropdown = dropdown.render();
                dropdownDiv = mount().div;
                verifyClosed();
            });
            it('should close dropdown if left arrow pressed', function () {
                e.keyCode = 40;
                onKeyDown(e);
                dropdown.setState.calls.reset();
                e.keyCode = 37;
                onKeyDown(e);
                expect(e.preventDefault).toHaveBeenCalled();
                expect(dropdown.setState).toHaveBeenCalledTimes(1);
                renderedDropdown = dropdown.render();
                dropdownDiv = mount().div;
                verifyClosed();
            });
            it('should close dropdown if right arrow pressed', function () {
                e.keyCode = 40;
                onKeyDown(e);
                dropdown.setState.calls.reset();
                e.keyCode = 39;
                onKeyDown(e);
                expect(e.preventDefault).toHaveBeenCalled();
                expect(dropdown.setState).toHaveBeenCalledTimes(1);
                renderedDropdown = dropdown.render();
                dropdownDiv = mount().div;
                verifyClosed();
            });
        });
    });
});
//# sourceMappingURL=DropdownWithLinks.spec.js.map