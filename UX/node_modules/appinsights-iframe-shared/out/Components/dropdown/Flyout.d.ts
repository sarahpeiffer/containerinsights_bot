/// <reference types="react" />
import * as React from 'react';
import { PortalMessageService } from '../../Services/PortalMessageService';
import { DropdownLink, DropdownOption, DropdownMessage, DropdownAction, DropdownDivider } from './DropdownTypes';
export interface FlyoutProps {
    /**
     * The menu options for the flyout.
     */
    options: (DropdownDivider | DropdownLink | DropdownMessage | DropdownAction)[];
    /**
     * Whether the flyout is visible.
     */
    expanded: boolean;
    /**
     * Optional callback for when a menu item is selected.
     */
    onChange?: (selected: DropdownOption) => void;
    /**
     * Optional callback for when an item is hovered over.
     */
    onHover?: (selected: DropdownOption) => void;
    /**
     * Optional callback for when hover is ended.
     */
    onHoverEnd?: () => void;
    /**
     * Optional callback for when flyout is closed.
     */
    onClose?: () => void;
    /**
     * Optional `id` attribute for root element.
     */
    id?: string;
    /**
     * Optional name of the class to be applied to the flyout.
     * Defaults to `dropdown-flyout`
     */
    flyoutClassName?: string;
    /**
     * Portal Message Service instance to use to send messages to the extension.
     */
    messageService: PortalMessageService;
}
export interface FlyoutState {
    focusIndex: number;
}
/**
 * A pull-down menu that supports ARIA role of menu with all associated behaviors and keyboard actions.
 */
export declare class Flyout extends React.Component<FlyoutProps, FlyoutState> {
    private _flyout;
    private _bindFlyout;
    private _menu;
    private _onKeyDown;
    readonly offsetWidth: number;
    focus(): void;
    getBoundingClientRect(): ClientRect | DOMRect;
    onKeyDown(e: React.KeyboardEvent<any>): void;
    setAttribute(qualifiedName: string, value: string): void;
    constructor(props: FlyoutProps);
    componentWillUpdate(nextProps: FlyoutProps): void;
    componentDidUpdate(nextProps: FlyoutProps): void;
    render(): JSX.Element;
    private getFocusableItems();
}
