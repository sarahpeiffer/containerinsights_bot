/* tslint:disable */
import * as React from 'react';
/* tslint:enable */
import { Flyout } from './Flyout';
import { DropdownLink, DropdownMessage, DropdownAction, DropdownDivider } from './DropdownTypes';
import { TestUtilities } from '../../TestUtilities';
import { DropdownLinkOption } from './DropdownLinkOption';
import { DropdownMessageOption } from './DropdownMessageOption';
import { DropdownActionOption } from './DropdownActionOption';
import { DropdownDividerOption } from './DropdownDividerOption';
describe('Flyout', function () {
    var props;
    var flyout;
    beforeEach(function () {
        props = {
            flyoutClassName: 'flyoutClassName',
            onChange: function (selected) { },
            options: [
                new DropdownLink('option1', 'display name 1', 'value 1'),
                new DropdownLink('option2', 'display name 2', 'value 2'),
                new DropdownMessage('option3', 'display name 3', 'msg', {})
            ],
            onHover: function () { },
            onHoverEnd: function () { },
            messageService: {},
            expanded: false,
            id: 'flyout-aria-'
        };
        spyOn(props, 'onChange');
        spyOn(props, 'onHover');
        spyOn(props, 'onHoverEnd');
        flyout = new Flyout(props);
        spyOn(flyout, 'setState').and.callFake(function (p) {
            flyout.state = TestUtilities.SetState(flyout.state, flyout.props, p);
        });
    });
    describe('render', function () {
        var renderedFlyout;
        function verifyDropdownOption(renderedOption, focusIndex, group, index, offset, option) {
            expect(renderedOption.props.name).toBe(option.displayName);
            expect(renderedOption.key).toBe(option.id);
            if (option instanceof DropdownAction) {
                spyOn(option, 'dispatchActionCallback');
            }
            if (!(option instanceof DropdownDivider)) {
                expect(renderedOption.props.focusIndex).toBe(focusIndex);
                expect(renderedOption.props.group).toBe(group);
                expect(renderedOption.props.index).toBe(index);
                expect(renderedOption.props.offset).toBe(offset);
                props.onHoverEnd.calls.reset();
                renderedOption.props.onHoverEnd();
                expect(props.onHoverEnd).toHaveBeenCalledTimes(1);
                props.onHover.calls.reset();
                renderedOption.props.onHover();
                expect(props.onHover).toHaveBeenCalledTimes(1);
                expect(props.onHover).toHaveBeenCalledWith(option);
                verifyClick(renderedOption, option);
            }
            else {
                expect(renderedOption.type).toBe(DropdownDividerOption);
            }
            if (option instanceof DropdownLink) {
                expect(renderedOption.type).toBe(DropdownLinkOption);
                expect(renderedOption.props.url).toBe(option.url);
                expect(renderedOption.props.icon).toBe(option.icon);
            }
            else if (option instanceof DropdownMessage) {
                expect(renderedOption.type).toBe(DropdownMessageOption);
                expect(renderedOption.props.data).toBe(option.data);
                expect(renderedOption.props.message).toBe(option.message);
                expect(renderedOption.props.messageService).toBe(props.messageService);
                expect(renderedOption.props.icon).toBe(option.icon);
            }
            else if (option instanceof DropdownAction) {
                expect(renderedOption.type).toBe(DropdownActionOption);
                expect(option.dispatchActionCallback).toHaveBeenCalledTimes(1);
            }
        }
        function verifyClick(renderedOption, option) {
            flyout.setState.calls.reset();
            props.onChange.calls.reset();
            renderedOption.props.onClick();
            expect(props.onChange).toHaveBeenCalledTimes(1);
            expect(props.onChange).toHaveBeenCalledWith(option);
            expect(flyout.state.focusIndex).toBe(-1);
        }
        function verifyClosed() {
            expect(renderedFlyout).not.toBeNull();
            expect(renderedFlyout.props['aria-expanded']).toBe(false);
        }
        function verifyOptions(focusIndex) {
            expect(renderedFlyout).not.toBeNull();
            expect(renderedFlyout.props.children.length).toBe(props.options.length);
            var g = '';
            var offset = false;
            var index = 0;
            props.options.forEach(function (o, i) {
                if (o instanceof DropdownDivider) {
                    g = o.displayName;
                    offset = true;
                    index--;
                }
                var option = renderedFlyout.props.children[i];
                verifyDropdownOption(option, focusIndex, g, index, offset, o);
                index++;
            });
        }
        beforeEach(function () {
            renderedFlyout = flyout.render();
        });
        it('should have all required aria attributes', function () {
            expect(renderedFlyout.props['aria-expanded']).toBe(false);
        });
        it('should have a flyout even if closed', function () {
            expect(renderedFlyout.props.role).toBe('menu');
            expect(renderedFlyout.props.className.indexOf('collapsed')).toBeGreaterThanOrEqual(0);
            expect(renderedFlyout.props['aria-expanded']).toBe(false);
            expect(renderedFlyout.props.id.indexOf('flyout-aria-')).toBe(0);
        });
        it('should have a flyout with elements if open', function () {
            props.expanded = true;
            renderedFlyout = flyout.render();
            expect(renderedFlyout).not.toBeNull();
            expect(renderedFlyout.props.children.length).toBe(3);
            verifyDropdownOption(renderedFlyout.props.children[0], -1, '', 0, false, props.options[0]);
            verifyDropdownOption(renderedFlyout.props.children[1], -1, '', 1, false, props.options[1]);
            verifyDropdownOption(renderedFlyout.props.children[2], -1, '', 2, false, props.options[2]);
        });
        it('should not show link with no value', function () {
            props.expanded = true;
            flyout.props.options[0].url = '';
            renderedFlyout = flyout.render();
            expect(renderedFlyout).not.toBeNull();
            expect(renderedFlyout.props.children.length).toBe(2);
            verifyDropdownOption(renderedFlyout.props.children[0], -1, '', 0, false, props.options[1]);
            verifyDropdownOption(renderedFlyout.props.children[1], -1, '', 1, false, props.options[2]);
        });
        it('should have a flyout with correct groups if divider options', function () {
            props.expanded = true;
            props.options = [
                new DropdownDivider('divider1', 'group1', React.createElement("div", null)),
                new DropdownAction('action1', 'action1', function () { }),
                new DropdownMessage('message1', 'message1', 'm', {}),
                new DropdownDivider('divider2', 'group2', React.createElement("div", null)),
                new DropdownLink('link1', 'link1', 'url')
            ];
            renderedFlyout = flyout.render();
            expect(renderedFlyout).not.toBeNull();
            expect(renderedFlyout.props.children.length).toBe(5);
            verifyDropdownOption(renderedFlyout.props.children[0], 0, 'group1', 0, false, props.options[0]);
            verifyDropdownOption(renderedFlyout.props.children[1], -1, 'group1', 0, true, props.options[1]);
            verifyDropdownOption(renderedFlyout.props.children[2], -1, 'group1', 1, true, props.options[2]);
            verifyDropdownOption(renderedFlyout.props.children[3], -1, 'group2', 1, true, props.options[3]);
            verifyDropdownOption(renderedFlyout.props.children[4], -1, 'group2', 2, true, props.options[4]);
        });
        describe('onKeyDown', function () {
            var onKeyDown;
            var e;
            beforeEach(function () {
                props.options = [
                    new DropdownDivider('divider1', 'group1', React.createElement("div", null)),
                    new DropdownAction('action1', 'action1', function () { }),
                    new DropdownMessage('message1', 'message1', 'm', {}),
                    new DropdownDivider('divider2', 'group2', React.createElement("div", null)),
                    new DropdownLink('link1', 'link1', 'url')
                ];
                flyout.componentWillUpdate(props);
                renderedFlyout = flyout.render();
                onKeyDown = renderedFlyout.props.onKeyDown;
                e = {
                    preventDefault: function () { },
                    stopPropagation: function () { },
                    keyCode: 0
                };
                spyOn(e, 'preventDefault');
                spyOn(e, 'stopPropagation');
            });
            it('should close dropdown if escape pressed', function () {
                e.keyCode = 40;
                onKeyDown(e);
                flyout.setState.calls.reset();
                e.keyCode = 27;
                onKeyDown(e);
                expect(e.preventDefault).toHaveBeenCalled();
                renderedFlyout = flyout.render();
                verifyClosed();
            });
            it('should scroll to last item if up arrow pressed when first item focused', function () {
                e.keyCode = 40;
                onKeyDown(e);
                flyout.setState.calls.reset();
                e.keyCode = 38;
                onKeyDown(e);
                expect(e.preventDefault).toHaveBeenCalled();
                expect(e.stopPropagation).toHaveBeenCalled();
                renderedFlyout = flyout.render();
                verifyOptions(-1);
            });
            it('should scroll to first item if down arrow pressed with last item focused', function () {
                e.keyCode = 38;
                onKeyDown(e);
                flyout.setState.calls.reset();
                e.keyCode = 40;
                onKeyDown(e);
                expect(e.preventDefault).toHaveBeenCalled();
                expect(e.stopPropagation).toHaveBeenCalled();
                renderedFlyout = flyout.render();
                verifyOptions(-1);
            });
            it('should scroll to next item if down arrow pressed', function () {
                e.keyCode = 40;
                onKeyDown(e);
                flyout.setState.calls.reset();
                e.keyCode = 40;
                onKeyDown(e);
                expect(e.preventDefault).toHaveBeenCalled();
                expect(e.stopPropagation).toHaveBeenCalled();
                renderedFlyout = flyout.render();
                verifyOptions(-1);
            });
            it('should scroll to prev item if up arrow pressed', function () {
                e.keyCode = 40;
                onKeyDown(e);
                e.keyCode = 40;
                onKeyDown(e);
                flyout.setState.calls.reset();
                e.keyCode = 38;
                onKeyDown(e);
                expect(e.preventDefault).toHaveBeenCalled();
                expect(e.stopPropagation).toHaveBeenCalled();
                renderedFlyout = flyout.render();
                verifyOptions(-1);
            });
            it('should scroll to next item with starting char if letter pressed', function () {
                e.keyCode = 40;
                onKeyDown(e);
                flyout.setState.calls.reset();
                e.key = 'l';
                e.keyCode = 0;
                onKeyDown(e);
                expect(e.preventDefault).toHaveBeenCalled();
                expect(e.stopPropagation).toHaveBeenCalled();
                renderedFlyout = flyout.render();
                verifyOptions(-1);
            });
        });
    });
});
//# sourceMappingURL=Flyout.spec.js.map