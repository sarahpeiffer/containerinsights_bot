import { MenuItem } from './MenuItem';
describe('MenuItem', function () {
    var props;
    var menuItem;
    var contentSpy;
    var content;
    function mount() {
        var result = menuItem.render();
        expect(result).toBe(content);
        var subProps = contentSpy.calls.mostRecent().args[0];
        var ref = subProps.ref;
        var e = {
            focus: function () { }
        };
        spyOn(e, 'focus');
        ref(e);
        return e;
    }
    beforeEach(function () {
        props = {
            name: 'name',
            content: function () { return {}; },
            focusIndex: -1,
            group: 'my group',
            index: -1,
            onClick: function () { },
            onHover: function () { },
            onHoverEnd: function () { }
        };
        spyOn(props, 'onClick');
        spyOn(props, 'onHoverEnd');
        content = {};
        contentSpy = spyOn(props, 'content').and.returnValue(content);
        menuItem = new MenuItem(props);
    });
    describe('render', function () {
        it('should render content', function () {
            var result = menuItem.render();
            expect(result).toBe(content);
            var subProps = contentSpy.calls.mostRecent().args[0];
            expect(subProps.className).toBe('dropdown-option');
            expect(subProps.onMouseLeave).toBe(props.onHoverEnd);
            expect(subProps.onMouseEnter).toBe(props.onHover);
            expect(subProps['aria-label']).toBe(props.group + " " + props.name);
            expect(subProps.tabIndex).toBe(-1);
            var e = {
                stopPropagation: function () { }
            };
            spyOn(e, 'stopPropagation');
            subProps.onClick(e);
            expect(e.stopPropagation).toHaveBeenCalledTimes(1);
            expect(props.onClick).toHaveBeenCalledTimes(1);
        });
    });
    describe('componentDidMount', function () {
        it('should focus if index is focus index', function () {
            props.focusIndex = 2;
            props.index = 2;
            var div = mount();
            menuItem.componentDidMount();
            expect(div.focus).toHaveBeenCalledTimes(1);
        });
        it('should not focus if not mounted', function () {
            props.focusIndex = 2;
            props.index = 2;
            menuItem.componentDidMount();
        });
        it('should not focus if focus index not matching index', function () {
            props.focusIndex = 1;
            props.index = 2;
            var div = mount();
            menuItem.componentDidMount();
            expect(div.focus).not.toHaveBeenCalled();
        });
    });
    describe('componentDidUpdate', function () {
        it('should focus if index is focus index', function () {
            props.focusIndex = 2;
            props.index = 2;
            var div = mount();
            menuItem.componentDidUpdate();
            expect(div.focus).toHaveBeenCalledTimes(1);
        });
        it('should not focus if not mounted', function () {
            props.focusIndex = 2;
            props.index = 2;
            menuItem.componentDidUpdate();
        });
        it('should not focus if focus index not matching index', function () {
            props.focusIndex = 1;
            props.index = 2;
            var div = mount();
            menuItem.componentDidUpdate();
            expect(div.focus).not.toHaveBeenCalled();
        });
    });
    describe('componentWillUnmount', function () {
        it('should call hover end', function () {
            menuItem.componentWillUnmount();
            expect(props.onHoverEnd).toHaveBeenCalledTimes(1);
        });
    });
});
//# sourceMappingURL=MenuItem.spec.js.map