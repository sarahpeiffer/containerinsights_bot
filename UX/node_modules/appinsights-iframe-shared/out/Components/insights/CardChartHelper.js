import * as d3 from 'd3';
var CardChartHelper = /** @class */ (function () {
    function CardChartHelper() {
    }
    CardChartHelper.initSvg = function (chartId, chartWidth, cardSideMargin, margin) {
        if (margin === void 0) { margin = this.defaultMargin; }
        // Set the dimensions and margins of the chart's svg
        var width = this.getWidth(chartWidth, cardSideMargin);
        var height = this.getHeight();
        // Remove chart's svg if already exist
        var existingSvg = d3.select("#svg-" + chartId);
        if (existingSvg) {
            existingSvg.remove();
        }
        // Append the svg obgect to the chart container element
        // Appends a 'group' element to 'svg'
        // Moves the 'group' element to the top left margin
        var svg = d3.select("#card-chart-container-" + chartId)
            .append('svg')
            .attr('id', "svg-" + chartId)
            .attr('class', "chart-svg")
            .attr('width', width + margin.left + margin.right)
            .attr('height', height + margin.top + margin.bottom)
            .append('g')
            .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        return svg;
    };
    CardChartHelper.getWidth = function (chartWidth, cardSideMargin, margin) {
        if (margin === void 0) { margin = this.defaultMargin; }
        return chartWidth - margin.left - margin.right - (cardSideMargin * 2);
    };
    CardChartHelper.getHeight = function (margin) {
        if (margin === void 0) { margin = this.defaultMargin; }
        return 100 - margin.top - margin.bottom;
    };
    CardChartHelper.addYAxis = function (svg, yAxis) {
        svg.append('g')
            .attr('class', 'y card-chart-axis')
            .call(yAxis);
    };
    CardChartHelper.addXAxis = function (svg, xAxis, height) {
        svg.append('g')
            .attr('class', 'x card-chart-axis')
            .attr('transform', 'translate(0.5,' + (height) + ')')
            .call(xAxis);
    };
    // Adds stripe pattern to given svg, so that pattern can be used as css mask
    CardChartHelper.addStripePatternToSvg = function (svgContainerSelector, maskSuffix) {
        var svg = d3.select(svgContainerSelector + ' svg');
        var defs = svg.append('defs');
        var patternId = 'pattern-stripe' + '-' + maskSuffix;
        var defsPatten = defs.append('pattern')
            .attr({
            id: patternId,
            width: 4,
            height: 4,
            patternUnits: 'userSpaceOnUse',
            patternTransform: 'rotate(45)'
        });
        defsPatten.append('rect').attr({
            width: 2,
            height: 4,
            transform: 'translate(0,0)',
            fill: 'white'
        });
        var defsMask = defs.append('mask').attr('id', 'mask-stripe' + '-' + maskSuffix);
        defsMask.append('rect').attr({
            x: 0,
            y: 0,
            width: '100%',
            height: '100%',
            fill: 'url(#' + patternId + ')'
        });
    };
    CardChartHelper.defaultMargin = { top: 10, right: 20, bottom: 30, left: 45 };
    return CardChartHelper;
}());
export { CardChartHelper };
//# sourceMappingURL=CardChartHelper.js.map