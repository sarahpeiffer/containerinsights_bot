import { InsightCard } from './InsightCard';
import { InsightsTestUtils, DummyCardResourcesProvider } from './InsightsTestUtils.spec';
import * as KeyCodes from '../../KeyCodes';
var InsightCardBuilder = /** @class */ (function () {
    function InsightCardBuilder() {
        this.props = {
            resourcesProvider: new DummyCardResourcesProvider(InsightsTestUtils.getStrings(), null),
            onClick: null,
            tooltip: null
        };
    }
    InsightCardBuilder.prototype.withOnClick = function (onClick) {
        this.props.onClick = onClick;
        return this;
    };
    InsightCardBuilder.prototype.withTooltip = function (tooltip) {
        this.props.tooltip = tooltip;
        return this;
    };
    InsightCardBuilder.prototype.build = function () {
        var card = new InsightCard(this.props);
        spyOn(card, 'setState').and.callFake(function (statefn) {
            return statefn(card.state, card.props);
        });
        return card;
    };
    return InsightCardBuilder;
}());
describe('InsightCard', function () {
    var builder;
    beforeEach(function () {
        builder = new InsightCardBuilder();
    });
    describe('render', function () {
        it('should render card content if not clickable', function () {
            var content = {};
            spyOn(builder.props.resourcesProvider, 'getCardContent').and.returnValue(content);
            var card = builder.build();
            var result = card.render();
            expect(result.props.className).toBe('card-container collapse-container');
            expect(result.props.role).toBeFalsy();
            expect(result.props.onClick).toBeFalsy();
            expect(result.props.tabIndex).not.toBeDefined();
            expect(result.props.children).toBe(content);
        });
        it('should render card content if clickable', function () {
            var onClick = spyOn({ onClick: function () { } }, 'onClick');
            var tooltip = 'my tooltip';
            var card = builder.withOnClick(onClick).withTooltip(tooltip).build();
            var result = card.render();
            expect(result.props.className.indexOf('clickable')).toBeGreaterThanOrEqual(0);
            expect(result.props.role).toBe('link');
            expect(result.props.tabIndex).toBe(0);
            expect(result.props.title).toBe(tooltip);
            result.props.onClick();
            expect(onClick).toHaveBeenCalledTimes(1);
        });
        it('should click if enter pressed', function () {
            var onClick = spyOn({ onClick: function () { } }, 'onClick');
            var tooltip = 'my tooltip';
            var card = builder.withOnClick(onClick).withTooltip(tooltip).build();
            var result = card.render();
            var e = {
                preventDefault: function () { },
                stopPropagation: function () { },
                keyCode: KeyCodes.ENTER
            };
            spyOn(e, 'preventDefault');
            spyOn(e, 'stopPropagation');
            result.props.onKeyDown(e);
            expect(onClick).toHaveBeenCalledTimes(1);
            expect(e.preventDefault).toHaveBeenCalled();
            expect(e.stopPropagation).toHaveBeenCalled();
        });
        it('should click if spacebar pressed', function () {
            var onClick = spyOn({ onClick: function () { } }, 'onClick');
            var tooltip = 'my tooltip';
            var card = builder.withOnClick(onClick).withTooltip(tooltip).build();
            var result = card.render();
            var e = {
                preventDefault: function () { },
                stopPropagation: function () { },
                keyCode: KeyCodes.SPACEBAR
            };
            spyOn(e, 'preventDefault');
            spyOn(e, 'stopPropagation');
            result.props.onKeyDown(e);
            expect(onClick).toHaveBeenCalledTimes(1);
            expect(e.preventDefault).toHaveBeenCalled();
            expect(e.stopPropagation).toHaveBeenCalled();
        });
        it('should not click if other key pressed', function () {
            var onClick = spyOn({ onClick: function () { } }, 'onClick');
            var card = builder.withOnClick(onClick).build();
            var result = card.render();
            var e = {
                preventDefault: function () { },
                stopPropagation: function () { },
                keyCode: KeyCodes.UP_ARROW
            };
            spyOn(e, 'preventDefault');
            spyOn(e, 'stopPropagation');
            result.props.onKeyDown(e);
            expect(onClick).not.toHaveBeenCalled();
            expect(e.preventDefault).not.toHaveBeenCalled();
            expect(e.stopPropagation).not.toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=InsightCard.spec.js.map