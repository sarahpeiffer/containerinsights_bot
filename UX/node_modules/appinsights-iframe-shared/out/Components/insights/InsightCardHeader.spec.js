import * as React from 'react';
import { TimeSeriesDetectionSVG, ChevronUpSvg, LoadingSvg } from '../../Svgs';
import { TestUtilities } from '../../index';
import { InsightCardHeader } from './InsightCardHeader';
import 'jasmine';
var InsightCardHeaderBuilder = /** @class */ (function () {
    function InsightCardHeaderBuilder() {
        this.props = {
            insightIcon: React.createElement(TimeSeriesDetectionSVG),
            title: React.createElement('div', null, 'title'),
            subTitle: 'sub_title',
            isCardCollapsed: true,
            loadingMessage: 'loading'
        };
    }
    InsightCardHeaderBuilder.prototype.withTitle = function (title) {
        this.props.title = title;
        return this;
    };
    InsightCardHeaderBuilder.prototype.withSubTitle = function (subTitle) {
        this.props.subTitle = subTitle;
        return this;
    };
    InsightCardHeaderBuilder.prototype.withCollapsedFlag = function (isCollapsed) {
        this.props.isCardCollapsed = isCollapsed;
        return this;
    };
    InsightCardHeaderBuilder.prototype.withLoadingFlag = function (isLoading) {
        this.props.isLoading = isLoading;
        return this;
    };
    InsightCardHeaderBuilder.prototype.build = function () {
        return InsightCardHeader(this.props);
    };
    return InsightCardHeaderBuilder;
}());
describe('InsightCardHeader', function () {
    var builder;
    beforeEach(function () {
        builder = new InsightCardHeaderBuilder();
    });
    it('should render card header with content specified by resource provider (whithout loading flag)', function () {
        // Act
        var cardHeader = builder.build();
        // Assert
        expect(cardHeader).not.toBe(null);
        expect(cardHeader.props.children.length).toBe(3);
        var iconContainer = TestUtilities.FindSingle(cardHeader, function (t) { return t.props.className === 'icon-svg-container'; });
        expect(iconContainer).not.toBe(null);
        expect(iconContainer.props.children).toEqual(React.createElement(TimeSeriesDetectionSVG));
        var titleContainer = TestUtilities.FindSingle(cardHeader, function (t) { return t.props.className === 'title-container'; });
        var mainTitle = TestUtilities.FindSingle(titleContainer, function (t) { return t.props.className === 'main-title'; });
        expect(mainTitle).not.toBe(null);
        expect(mainTitle.props.children.type).toBe('div');
        expect(mainTitle.props.children.props.children).toBe('title');
        var subTitle = TestUtilities.FindSingle(titleContainer, function (t) { return t.props.className === 'sub-title'; });
        expect(subTitle).not.toBe(null);
        expect(subTitle.type).toBe('div');
        expect(subTitle.props.children).toBe('sub_title');
        var collapseBtn = TestUtilities.FindSingle(cardHeader, function (t) { return t.props.className.indexOf('collapse-btn') >= 0; });
        expect(collapseBtn.props.className.indexOf('down')).not.toBe(-1);
        expect(collapseBtn.props.children.props.children).toEqual(React.createElement(ChevronUpSvg));
    });
    it('should render card header with content specified by resource provider (with loading flag)', function () {
        // Act
        var cardHeader = builder.withLoadingFlag(true).build();
        // Assert
        expect(cardHeader).not.toBe(null);
        expect(cardHeader.props.children.length).toBe(3);
        var iconContainer = TestUtilities.FindSingle(cardHeader, function (t) { return t.props.className === 'icon-svg-container'; });
        expect(iconContainer).not.toBe(null);
        expect(iconContainer.props.children).toEqual(React.createElement(TimeSeriesDetectionSVG));
        var titleContainer = TestUtilities.FindSingle(cardHeader, function (t) { return t.props.className === 'title-container'; });
        var mainTitle = TestUtilities.FindSingle(titleContainer, function (t) { return t.props.className === 'main-title'; });
        expect(mainTitle).not.toBe(null);
        expect(mainTitle.props.children.type).toBe('div');
        expect(mainTitle.props.children.props.children).toBe('title');
        var subTitle = TestUtilities.FindSingle(titleContainer, function (t) { return t.props.className === 'sub-title'; });
        expect(subTitle).not.toBe(null);
        expect(subTitle.type).toBe('div');
        expect(subTitle.props.children).toBe('sub_title');
        var loadingContainer = TestUtilities.FindSingle(cardHeader, function (t) { return t.props.className.indexOf('card-loading-container') >= 0; });
        expect(loadingContainer.props.className.indexOf('has-loading-icon')).not.toBe(-1);
        var loadingIcon = TestUtilities.FindSingle(cardHeader, function (t) { return t.props.className === 'loading-in-card-header'; });
        expect(loadingIcon).not.toBeNull();
        expect(loadingIcon.props.role).toBe('status');
        expect(loadingIcon.props['aria-live']).toBe('off');
        var label = loadingIcon.props.children[0];
        expect(label.type).toBe('span');
        expect(label.props.className).toBe('acc-hidden');
        expect(label.props.children).toBe(builder.props.loadingMessage);
        expect(loadingIcon.props.children[1].type).toBe(LoadingSvg);
    });
});
//# sourceMappingURL=InsightCardHeader.spec.js.map