import { InsightsCardList } from './InsightsCardList';
import { Accordion } from '../accordion';
import { InsightCard } from './InsightCard';
import { InsightCardHeader } from './InsightCardHeader';
describe('InsightsCardList', function () {
    var props;
    var cardList;
    beforeEach(function () {
        var strings = {
            insightsCardLoadingMessage: 'card is loading'
        };
        var headInfo = {
            icon: {},
            isLoading: {},
            subtitle: 'subtitle1',
            title: {}
        };
        props = {
            cards: [
                {
                    id: 'card1',
                    isExpandedByDefault: false,
                    onClick: function () { },
                    resourcesProvider: {
                        getCardHeader: function () { return headInfo; },
                        strings: strings
                    },
                    tooltip: 'tooltip1'
                },
                {
                    id: 'card2',
                    isExpandedByDefault: false,
                    onClick: function () { },
                    resourcesProvider: {
                        getCardHeader: function () { return headInfo; },
                        strings: strings
                    },
                    tooltip: 'tooltip2'
                },
                {
                    id: 'card3',
                    isExpandedByDefault: false,
                    onClick: function () { },
                    resourcesProvider: {
                        getCardHeader: function () { return headInfo; },
                        strings: strings
                    },
                    tooltip: 'tooltip3'
                },
            ]
        };
        cardList = new InsightsCardList(props);
    });
    it('should have an accordion with cards', function () {
        var rendered = cardList.render();
        expect(rendered.type).toBe(Accordion);
        var items = rendered.props.items;
        expect(items.length).toBe(3);
        items.forEach(function (item, i) {
            var card = props.cards[i];
            expect(card).not.toBeNull();
            var content = item.content;
            expect(content.type).toBe(InsightCard);
            expect(content.props.onClick).toBe(card.onClick);
            expect(content.props.tooltip).toBe(card.tooltip);
            expect(content.props.resourcesProvider).toBe(card.resourcesProvider);
            var headInfo = card.resourcesProvider.getCardHeader();
            var heading = item.heading(true).props.children;
            expect(heading.type).toBe(InsightCardHeader);
            expect(heading.props.insightIcon).toBe(headInfo.icon);
            expect(heading.props.isCardCollapsed).toBe(false);
            expect(heading.props.isLoading).toBe(headInfo.isLoading);
            expect(heading.props.loadingMessage).toBe(card.resourcesProvider.strings['insightsCardLoadingMessage']);
            expect(heading.props.subTitle).toBe(headInfo.subtitle);
            expect(heading.props.title).toBe(headInfo.title);
            heading = item.heading(false).props.children;
            expect(heading.props.isCardCollapsed).toBe(true);
            expect(item.id).toBe('insights-card-' + card.id);
            expect(item.isExpanded).toBe(card.isExpandedByDefault);
            expect(item.props.className).toBe('card-accordion-header');
        });
    });
});
//# sourceMappingURL=InsightsCardList.spec.js.map