import * as tslib_1 from "tslib";
import * as React from 'react';
import * as d3 from 'd3';
import { CardChartHelper } from '../CardChartHelper';
import { Utils } from '../../../Utils';
import { EventType } from '../../../TelemetryType';
var AutoClusterInsightCardContent = /** @class */ (function (_super) {
    tslib_1.__extends(AutoClusterInsightCardContent, _super);
    function AutoClusterInsightCardContent(props) {
        var _this = _super.call(this, props) || this;
        _this.cardSideMargin = 0;
        _this.margins = { top: 50, right: 0, bottom: 0, left: 50 };
        _this.graphWidth = 120;
        _this.chartId = Utils.RandomGuid();
        _this.onResize = function () { return _this.forceUpdate(); };
        _this._ref = function (e) { _this._dom = e; };
        return _this;
    }
    AutoClusterInsightCardContent.prototype.componentDidMount = function () {
        window.addEventListener('resize', this.onResize);
        this.updateChartWidth();
        this.drawDonutChart();
    };
    AutoClusterInsightCardContent.prototype.componentDidUpdate = function () {
        if (this.updateChartWidth()) {
            this.drawDonutChart();
        }
    };
    AutoClusterInsightCardContent.prototype.componentWillUnmount = function () {
        window.removeEventListener('resize', this.onResize);
    };
    AutoClusterInsightCardContent.prototype.updateChartWidth = function () {
        if (this._dom) {
            var node = this._dom;
            var cardWidth = node.clientWidth;
            var cardWidthChanged = cardWidth !== this.graphWidth;
            if (cardWidthChanged) {
                this.graphWidth = 120;
            }
            return cardWidthChanged;
        }
        else {
            return false;
        }
    };
    AutoClusterInsightCardContent.prototype.drawDonutChart = function () {
        var acResult = this.props.autoClusterResult;
        var height = CardChartHelper.getHeight();
        var groupsContainer = CardChartHelper.initSvg(this.chartId, this.graphWidth, this.cardSideMargin, this.margins);
        var radius = Math.min(this.graphWidth, height);
        var color = d3.scale.ordinal().range(['#95B2D7', '#E6E6E6']);
        var arc = d3.svg.arc()
            .outerRadius(radius - 10)
            .innerRadius(radius - 25);
        var pie = d3.layout.pie()
            .sort(null)
            .value(function (d) { return d['value']; });
        var results = this.getAutoClusterResultsArray(acResult);
        var g = groupsContainer.selectAll('.arc')
            .data(pie(results))
            .enter().append('g')
            .attr('class', 'arc');
        g.append('path')
            .attr('d', arc)
            .style('fill', function (d) { return color(d.data['name']).toString(); });
        // Add text within the donut
        var donutArc = groupsContainer.select('.arc');
        var percentText = (+results[0].value).toFixed() + '%';
        donutArc.append('text')
            .attr('text-anchor', 'middle')
            .attr('font-size', '20px')
            .attr('y', 3)
            .text(percentText)
            .attr('aria-hidden', 'true');
        var telemetryType = this.getTelemetryTypeDisplayName();
        donutArc.append('text')
            .attr('text-anchor', 'middle')
            .attr('font-size', '10px')
            .attr('y', 14)
            .text(telemetryType)
            .attr('aria-hidden', 'true');
        // Add aria labels
        groupsContainer.attr('aria-label', percentText + " " + telemetryType);
        var chartSvgTooltip = Utils.GetValueOrDefault(this.props.strings, 'autoclusterChartDescription', '');
        d3.select("#svg-" + this.chartId)
            .attr('aria-label', chartSvgTooltip);
    };
    AutoClusterInsightCardContent.prototype.getTelemetryTypeDisplayName = function () {
        var displayNameKey = null;
        switch (this.props.telemetryType) {
            case EventType.Availability:
                displayNameKey = 'autoClusterDonutChartSubTitleAvailability';
                break;
            case EventType.CustomEvent:
                displayNameKey = 'autoClusterDonutChartSubTitleCustomEvent';
                break;
            case EventType.Dependency:
                displayNameKey = 'autoClusterDonutChartSubTitleDependency';
                break;
            case EventType.Exception:
                displayNameKey = 'autoClusterDonutChartSubTitleException';
                break;
            case EventType.PageView:
                displayNameKey = 'autoClusterDonutChartSubTitlePageView';
                break;
            case EventType.Request:
                displayNameKey = 'autoClusterDonutChartSubTitleRequest';
                break;
            case EventType.Trace:
                displayNameKey = 'autoClusterDonutChartSubTitleTrace';
                break;
        }
        if (!displayNameKey) {
            var errMsg = "Telemetry type " + EventType[this.props.telemetryType] + " is not supported!";
            console.error(errMsg);
            throw new Error(errMsg);
        }
        else if (!this.props.strings[displayNameKey]) {
            var errMsg = "String '" + displayNameKey + "' is not defined in resources!";
            console.error(errMsg);
            throw new Error(errMsg);
        }
        return this.props.strings[displayNameKey];
    };
    AutoClusterInsightCardContent.prototype.getAutoClusterResultsArray = function (autoClusterResult) {
        return [
            { name: 'clusterResult', value: autoClusterResult.percent },
            { name: 'all other', value: 100 - autoClusterResult.percent }
        ];
    };
    AutoClusterInsightCardContent.prototype.render = function () {
        var _this = this;
        var dimensions = [];
        Object.keys(this.props.autoClusterResult.dimensions).forEach(function (dimKey, index) {
            var dimValueString = _this.props.autoClusterResult.dimensions[dimKey];
            var tooltip = dimKey + ": " + dimValueString;
            dimensions.push(React.createElement("div", { className: 'dimension-row', key: 'dimension' + index, title: tooltip, role: 'listitem' },
                React.createElement("span", { "aria-hidden": 'true' },
                    dimKey,
                    ": "),
                React.createElement("span", { "aria-hidden": 'true', className: 'value' },
                    ' ' + dimValueString,
                    " ")));
        });
        return React.createElement("div", { ref: this._ref },
            React.createElement("div", { className: 'card-rows-container autoCluster ' + (this.props.withoutDonut ? ' without-donut' : '') },
                React.createElement("div", { className: 'dimensions-column', role: 'list' }, dimensions),
                !this.props.withoutDonut && React.createElement("div", { className: 'graph-column' },
                    React.createElement("div", { className: "card-chart-container", id: "card-chart-container-" + this.chartId }))));
    };
    return AutoClusterInsightCardContent;
}(React.Component));
export { AutoClusterInsightCardContent };
//# sourceMappingURL=AutoClusterInsightCardContent.js.map