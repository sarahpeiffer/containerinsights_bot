import * as tslib_1 from "tslib";
import * as React from 'react';
import { EventType } from '../../../TelemetryType';
var SimpleAutoClusterInsightCardContent = /** @class */ (function (_super) {
    tslib_1.__extends(SimpleAutoClusterInsightCardContent, _super);
    function SimpleAutoClusterInsightCardContent(props) {
        return _super.call(this, props) || this;
    }
    SimpleAutoClusterInsightCardContent.prototype.getTelemetryTypeDisplayName = function () {
        var displayNameKey = null;
        switch (this.props.telemetryType) {
            case EventType.Availability:
                displayNameKey = 'autoClusterDonutChartSubTitleAvailability';
                break;
            case EventType.CustomEvent:
                displayNameKey = 'autoClusterDonutChartSubTitleCustomEvent';
                break;
            case EventType.Dependency:
                displayNameKey = 'autoClusterDonutChartSubTitleDependency';
                break;
            case EventType.Exception:
                displayNameKey = 'autoClusterDonutChartSubTitleException';
                break;
            case EventType.PageView:
                displayNameKey = 'autoClusterDonutChartSubTitlePageView';
                break;
            case EventType.Request:
                displayNameKey = 'autoClusterDonutChartSubTitleRequest';
                break;
            case EventType.Trace:
                displayNameKey = 'autoClusterDonutChartSubTitleTrace';
                break;
        }
        if (!displayNameKey) {
            var errMsg = "Telemetry type " + EventType[this.props.telemetryType] + " is not supported!";
            console.error(errMsg);
            throw new Error(errMsg);
        }
        else if (!this.props.strings[displayNameKey]) {
            var errMsg = "String '" + displayNameKey + "' is not defined in resources!";
            console.error(errMsg);
            throw new Error(errMsg);
        }
        return this.props.strings[displayNameKey];
    };
    SimpleAutoClusterInsightCardContent.prototype.getAutoClusterResultsArray = function (autoClusterResult) {
        return [
            { name: 'clusterResult', value: autoClusterResult.percent },
            { name: 'all other', value: 100 - autoClusterResult.percent }
        ];
    };
    SimpleAutoClusterInsightCardContent.prototype.render = function () {
        var _this = this;
        var dimensions = [];
        Object.keys(this.props.autoClusterResult.dimensions).forEach(function (dimKey, index) {
            var dimValueString = _this.props.autoClusterResult.dimensions[dimKey];
            var tooltip = dimKey + ": " + dimValueString;
            dimensions.push(React.createElement("div", { className: 'dimension-row', key: 'dimension' + index, title: tooltip, role: 'listitem' },
                React.createElement("span", { "aria-hidden": 'true' },
                    dimKey,
                    ": "),
                React.createElement("span", { "aria-hidden": 'true', className: 'value' },
                    ' ' + dimValueString,
                    " ")));
        });
        return React.createElement("div", null,
            React.createElement("div", { className: 'card-rows-container autoCluster  without-donut' },
                React.createElement("div", { className: 'dimensions-column', role: 'list' }, dimensions)));
    };
    return SimpleAutoClusterInsightCardContent;
}(React.Component));
export { SimpleAutoClusterInsightCardContent };
//# sourceMappingURL=SimpleAutoClusterInsightCardContent.js.map