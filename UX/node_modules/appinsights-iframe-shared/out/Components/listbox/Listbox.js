import * as tslib_1 from "tslib";
import * as React from 'react';
var Listbox = /** @class */ (function (_super) {
    tslib_1.__extends(Listbox, _super);
    function Listbox(props) {
        var _this = _super.call(this, props) || this;
        _this._bind = _this.bind.bind(_this);
        _this.state = {
            isOpen: false,
            selectedIndex: props.selectedIndex || 0
        };
        _this._shouldFocus = props.isFocused;
        return _this;
    }
    Listbox.prototype.componentWillReceiveProps = function (nextProps) {
        if (nextProps.isFocused && !this.props.isFocused) {
            this._shouldFocus = true;
        }
        if (nextProps.selectedIndex !== this.props.selectedIndex && nextProps.selectedIndex !== this.state.selectedIndex) {
            this.setState({ selectedIndex: nextProps.selectedIndex });
        }
    };
    Listbox.prototype.render = function () {
        var _this = this;
        return React.createElement("div", { className: 'listbox', role: 'presentation' },
            !!this.props.label && React.createElement("span", { id: "label-" + this.props.id, className: 'acc-hidden' }, this.props.label),
            React.createElement("div", { className: 'listbox-wrapper', role: 'presentation' },
                React.createElement("select", { id: this.props.id, "aria-labelledby": "label-" + this.props.id + " " + this.props.id, tabIndex: 0, ref: this._bind, onChange: function (e) { return _this.onOptionClick(e.target.selectedIndex); } }, this.getOptions())));
    };
    Listbox.prototype.componentDidMount = function () {
        if (this._shouldFocus) {
            this.focus();
        }
    };
    Listbox.prototype.componentDidUpdate = function (prevProps, prevState) {
        if (this._shouldFocus) {
            this.focus();
        }
    };
    Listbox.prototype.focus = function () {
        if (this._shouldFocus && this._dom) {
            this._dom.focus();
            this._shouldFocus = false;
        }
    };
    Listbox.prototype.bind = function (e) {
        this._dom = e;
    };
    Listbox.prototype.getOptions = function () {
        var _this = this;
        var elements = [];
        this.props.options.forEach(function (option, i) {
            elements.push(React.createElement("option", { selected: i === _this.props.selectedIndex, key: option.id || option.label, value: i }, option.label));
        });
        return elements;
    };
    Listbox.prototype.onOptionClick = function (index) {
        this.setState({
            selectedIndex: index,
            isOpen: false
        });
        this.props.onChange(this.props.options[index]);
    };
    return Listbox;
}(React.Component));
export { Listbox };
//# sourceMappingURL=Listbox.js.map