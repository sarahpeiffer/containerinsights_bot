import { Listbox } from './Listbox';
import { TestUtilities } from '../../TestUtilities';
describe('Listbox', function () {
    var props;
    var listbox;
    beforeEach(function () {
        props = {
            id: 'listbox',
            isFocused: false,
            label: 'listbox-label',
            onChange: function () { },
            options: [
                {
                    label: 'A option',
                    value: 'a1',
                    id: 'Override id'
                },
                {
                    label: 'B option',
                    value: 'b1'
                },
                {
                    label: 'C option',
                    value: 'c1'
                }
            ],
            selectedIndex: 0,
            tabIndex: 0
        };
        spyOn(props, 'onChange');
        listbox = new Listbox(props);
        spyOn(listbox, 'setState').and.callFake(function (s) {
            listbox.state = TestUtilities.SetState(listbox.state, listbox.props, s);
        });
    });
    function mount(rendered) {
        var dom = {
            focus: function () { },
        };
        spyOn(dom, 'focus');
        var nodes = [];
        props.options.forEach(function (o) {
            var node = {
                focus: function () { }
            };
            spyOn(node, 'focus');
            nodes.push(node);
        });
        var domRef = TestUtilities.FindSingle(rendered, function (t) { return t.type === 'select'; });
        expect(domRef).not.toBeNull();
        domRef.ref(dom);
        return {
            dom: dom,
        };
    }
    function verifyOpen(rendered, isOpen) {
        var flyout = TestUtilities.FindSingle(rendered, function (t) { return t.props.className.indexOf('dropdown-flyout') >= 0; });
        expect(flyout).not.toBeNull();
        expect(flyout.props.className.indexOf('collapsed') >= 0).toBe(!isOpen);
        var button = TestUtilities.FindSingle(rendered, function (t) { return t.props.role === 'button'; });
        expect(button.props['aria-expanded']).toBe(isOpen);
    }
    function verifySelected(rendered, selectedIndex) {
        verifyCurrentlySelected(rendered, selectedIndex);
        expect(props.onChange).toHaveBeenCalledWith(props.options[selectedIndex]);
    }
    function verifyCurrentlySelected(rendered, selectedIndex) {
        var label = TestUtilities.FindSingle(rendered, function (t) { return t.type === 'select'; });
        expect(label).not.toBeNull();
        var idx = -1;
        label.props.children.forEach(function (child, index) {
            if (child.props.selected) {
                idx = index;
            }
        });
        expect(idx).toBe(selectedIndex);
    }
    function verifyFocused(flyout, index) {
        var child = flyout.childNodes.item(index);
        expect(child).not.toBeNull();
        expect(child.focus).toHaveBeenCalledTimes(1);
    }
    describe('render', function () {
        it('should have root div with listbox class', function () {
            var result = listbox.render();
            expect(result.props.className).toBe('listbox');
        });
        it('should have a label', function () {
            var result = listbox.render();
            var label = TestUtilities.FindSingle(result, function (t) { return t.props.id === "label-" + props.id; });
            expect(label).not.toBeNull();
            expect(label.props.className).toBe('acc-hidden');
            expect(label.props.children).toBe(props.label);
        });
        it('should have a dropdown button', function () {
            var result = listbox.render();
            var button = TestUtilities.FindSingle(result, function (t) { return t.type === 'select'; });
            expect(button).not.toBeNull();
            expect(button.props.id).toBe(props.id);
            expect(button.props['aria-labelledby']).toBe("label-" + props.id + " " + props.id);
            expect(button.props.tabIndex).toBe(0);
        });
        it('should render all options', function () {
            var result = listbox.render();
            var options = TestUtilities.FindElements(result, function (t) { return t.type === 'option'; });
            props.options.forEach(function (o, i) {
                var child = options[i];
                expect(child).toBeTruthy();
                expect(child.type).toBe('option');
                expect(child.key).toBe(i > 0 ? o.label : 'Override id');
                expect(child.props.children).toBe(o.label);
                expect(child.props.value).toBe(i);
            });
        });
        describe('onOptionClick', function () {
            var rendered;
            var onChange;
            beforeEach(function () {
                rendered = listbox.render();
                var flyout = TestUtilities.FindSingle(rendered, function (t) { return t.type === 'select'; });
                expect(flyout).not.toBeNull();
                onChange = flyout.props.onChange;
            });
            it('should set option selected', function () {
                var e = {
                    target: {
                        selectedIndex: 2
                    }
                };
                onChange(e);
                rendered = listbox.render();
                expect(props.onChange).toHaveBeenCalledTimes(1);
                expect(props.onChange).toHaveBeenCalledWith(props.options[2]);
            });
        });
    });
    describe('componentWillReceiveProps', function () {
        it('should set selected index by props', function () {
            var rendered = listbox.render();
            var nextProps = Object.assign({}, props);
            nextProps.selectedIndex = 2;
            listbox.componentWillReceiveProps(nextProps);
            listbox.props = nextProps;
            rendered = listbox.render();
            verifyCurrentlySelected(rendered, 2);
        });
    });
    describe('componentDidMount', function () {
        it('should focus on dom if props say to focus', function () {
            props.isFocused = true;
            listbox = new Listbox(props);
            var rendered = listbox.render();
            var mounted = mount(rendered);
            listbox.componentDidMount();
            expect(mounted.dom.focus).toHaveBeenCalledTimes(1);
        });
        it('should not focus on dom if props say not to focus', function () {
            props.isFocused = false;
            listbox = new Listbox(props);
            var rendered = listbox.render();
            var mounted = mount(rendered);
            listbox.componentDidMount();
            expect(mounted.dom.focus).not.toHaveBeenCalled();
        });
    });
    describe('componentDidUpdate', function () {
        it('should focus on dom if props say to focus', function () {
            var rendered = listbox.render();
            var mounted = mount(rendered);
            var nextProps = Object.assign({}, props);
            nextProps.isFocused = true;
            listbox.componentWillReceiveProps(nextProps);
            listbox.componentDidUpdate(props, listbox.state);
            expect(mounted.dom.focus).toHaveBeenCalledTimes(1);
        });
        it('should not focus on dom if props say not to focus', function () {
            var rendered = listbox.render();
            var mounted = mount(rendered);
            var nextProps = Object.assign({}, props);
            nextProps.isFocused = false;
            listbox.componentWillReceiveProps(nextProps);
            listbox.componentDidUpdate(props, listbox.state);
            expect(mounted.dom.focus).not.toHaveBeenCalled();
        });
        it('should not focus on dom if props did not change', function () {
            var rendered = listbox.render();
            var mounted = mount(rendered);
            var nextProps = Object.assign({}, props);
            props.isFocused = true;
            nextProps.isFocused = true;
            listbox.componentWillReceiveProps(nextProps);
            listbox.componentDidUpdate(props, listbox.state);
            expect(mounted.dom.focus).not.toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=Listbox.spec.js.map