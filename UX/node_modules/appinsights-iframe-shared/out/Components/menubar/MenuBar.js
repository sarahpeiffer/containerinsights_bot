import * as tslib_1 from "tslib";
import * as React from 'react';
import { AccessibleMenu } from '../../AccessibleMenu';
/**
 * An accessible horizontal menu bar that supports arrow key navigation.
 */
var MenuBar = /** @class */ (function (_super) {
    tslib_1.__extends(MenuBar, _super);
    function MenuBar(props) {
        var _this = _super.call(this, props) || this;
        _this._onKeyDown = _this.onKeyDown.bind(_this);
        _this._ref = function (e) { return _this._ul = e; };
        _this.state = {
            focusIndex: -1
        };
        _this._menu = new AccessibleMenu(true, props.elements ? props.elements.map(function (t) { return t.label; }) : [], 0);
        return _this;
    }
    MenuBar.prototype.componentWillUpdate = function (props) {
        this._menu.items = props.elements ? props.elements.map(function (t) { return t.label; }) : [];
    };
    MenuBar.prototype.render = function () {
        return React.createElement("ul", { role: 'menubar', onKeyDown: this._onKeyDown, ref: this._ref, className: this.props.className, "aria-label": this.props.label }, this.getItems());
    };
    MenuBar.prototype.getItems = function () {
        var _this = this;
        var elements = [];
        this.props.elements.forEach(function (e, i) {
            elements.push(React.createElement("li", { key: e.id, className: e.className }, e.element({
                isFocused: _this.state.focusIndex === i,
                role: 'menuitem',
                tabIndex: (_this.state.focusIndex === i || _this.state.focusIndex === -1 && i === 0) ? 0 : -1
            })));
        });
        return elements;
    };
    MenuBar.prototype.onKeyDown = function (e) {
        if (this._ul) {
            var index = this._menu.onKeyDown(e);
            this.setState({ focusIndex: index });
        }
    };
    return MenuBar;
}(React.Component));
export { MenuBar };
//# sourceMappingURL=MenuBar.js.map