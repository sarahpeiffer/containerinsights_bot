import { MenuBar } from './MenuBar';
import { TestUtilities } from '../../TestUtilities';
describe('MenuBar', function () {
    var props;
    var elements;
    var menuBar;
    function mount(rendered) {
        var e;
        var ref = rendered.ref;
        e = {
            focus: function () { }
        };
        spyOn(e, 'focus');
        ref(e);
        return e;
    }
    function verifyItems(rendered, focusIndex) {
        props.elements.forEach(function (e, i) {
            var renderedItem = rendered.props.children[i];
            expect(renderedItem.type).toBe('li');
            expect(renderedItem.key).toBe(e.id);
            expect(renderedItem.props.className).toBe(e.className);
            expect(renderedItem.props.children).toBe(elements[i]);
            var args = e.element.calls.mostRecent().args[0];
            expect(args.isFocused).toBe(focusIndex === i);
            expect(args.role).toBe('menuitem');
            expect(args.tabIndex).toBe(focusIndex === i ? 0 : -1);
        });
    }
    beforeEach(function () {
        props = {
            className: 'my class',
            label: 'my label',
            elements: [
                {
                    className: 'class 1',
                    element: function () { return null; },
                    id: 'id1',
                    label: 'alabel'
                },
                {
                    className: 'class 2',
                    element: function () { return null; },
                    id: 'id2',
                    label: 'blabel'
                },
                {
                    className: 'class 2',
                    element: function () { return null; },
                    id: 'id2',
                    label: 'clabel'
                }
            ]
        };
        elements = [];
        props.elements.forEach(function (e, i) {
            var element = { id: i };
            elements.push(element);
            spyOn(e, 'element').and.returnValue(element);
        });
        menuBar = new MenuBar(props);
        spyOn(menuBar, 'setState').and.callFake(function (s) {
            menuBar.state = TestUtilities.SetState(menuBar.state, menuBar.props, s);
        });
    });
    describe('render', function () {
        it('should have a menu bar', function () {
            var rendered = menuBar.render();
            expect(rendered.type).toBe('ul');
            expect(rendered.props.role).toBe('menubar');
            expect(rendered.props.className).toBe(props.className);
            expect(rendered.props['aria-label']).toBe(props.label);
        });
        it('should render items', function () {
        });
        describe('keydown', function () {
            var rendered;
            var ul;
            var keydown;
            beforeEach(function () {
                rendered = menuBar.render();
                ul = mount(rendered);
                keydown = rendered.props.onKeyDown;
            });
            it('should scroll to next item if right arrow pressed', function () {
                var e = {
                    keyCode: 39,
                    key: 'ArrowRight',
                    preventDefault: function () { }
                };
                keydown(e);
                rendered = menuBar.render();
                verifyItems(rendered, 1);
            });
            it('should scroll to prev item if left arrow pressed', function () {
                var e = {
                    keyCode: 39,
                    key: 'ArrowRight',
                    preventDefault: function () { }
                };
                keydown(e);
                e.keyCode = 37;
                e.key = 'ArrowLeft';
                keydown(e);
                rendered = menuBar.render();
                verifyItems(rendered, 0);
            });
            it('should scroll to last item if left arrow pressed on first item', function () {
                var e = {
                    keyCode: 37,
                    key: 'ArrowLeft',
                    preventDefault: function () { }
                };
                keydown(e);
                rendered = menuBar.render();
                verifyItems(rendered, elements.length - 1);
            });
            it('should scroll to first item right arrow pressed on last item', function () {
                var e = {
                    keyCode: 37,
                    key: 'ArrowLeft',
                    preventDefault: function () { }
                };
                keydown(e);
                e.keyCode = 39;
                e.key = 'ArrowRight';
                keydown(e);
                rendered = menuBar.render();
                verifyItems(rendered, 0);
            });
            it('should scroll to next item with char if letter pressed', function () {
                var e = {
                    key: 'c',
                    stopPropagation: function () { }
                };
                spyOn(e, 'stopPropagation');
                keydown(e);
                rendered = menuBar.render();
                verifyItems(rendered, 2);
                expect(e.stopPropagation).toHaveBeenCalledTimes(1);
            });
        });
    });
});
//# sourceMappingURL=MenuBar.spec.js.map