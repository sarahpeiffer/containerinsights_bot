import * as tslib_1 from "tslib";
import * as React from 'react';
import * as KeyCodes from '../../KeyCodes';
/**
 * A component that provides an accessible list of radio buttons, supporting all necessary keyboard actions.
 */
var RadioGroup = /** @class */ (function (_super) {
    tslib_1.__extends(RadioGroup, _super);
    function RadioGroup(props) {
        var _this = _super.call(this, props) || this;
        _this._onKeyDown = _this.onKeyDown.bind(_this);
        _this._bind = _this.bind.bind(_this);
        _this.state = {
            selectedIndex: props.selectedIndex || 0,
            focusedIndex: props.selectedIndex || 0
        };
        return _this;
    }
    RadioGroup.prototype.render = function () {
        var _this = this;
        var items = [];
        this.props.items.forEach(function (item, i) {
            items.push(React.createElement("li", { role: 'radio', key: item.id, id: item.id, title: item.title, onClick: function () { return _this.onClick(item, i); }, onKeyDown: function (e) { return _this.onItemKeyDown(item, e, i); }, className: 'list-item ' + (item.className || ''), "aria-labelledby": item.id !== item.contentId ? item.contentId : undefined, tabIndex: i === _this.state.selectedIndex ? 0 : -1, "aria-checked": i === _this.state.selectedIndex }, item.content));
        });
        return React.createElement("ul", { role: 'radiogroup', className: 'unstyled-list ' + (this.props.className || ''), ref: this._bind, onKeyDown: this._onKeyDown, "aria-label": this.props.label }, items);
    };
    RadioGroup.prototype.componentWillReceiveProps = function (nextProps) {
        if (nextProps.selectedIndex !== this.props.selectedIndex && nextProps.selectedIndex !== this.state.selectedIndex) {
            this.setState({ selectedIndex: nextProps.selectedIndex, focusedIndex: nextProps.selectedIndex });
        }
    };
    RadioGroup.prototype.componentDidUpdate = function (prevProps, prevState) {
        if (prevState.focusedIndex !== this.state.focusedIndex) {
            this.setFocus(this.state.focusedIndex);
        }
    };
    RadioGroup.prototype.onItemKeyDown = function (item, e, i) {
        if (e.keyCode === KeyCodes.SPACEBAR || e.keyCode === KeyCodes.ENTER) {
            this.onClick(item, i);
        }
    };
    RadioGroup.prototype.setFocus = function (i) {
        if (this._dom && this._dom.childNodes.length >= i) {
            var child = this._dom.childNodes.item(i);
            if (child && typeof child.focus === 'function') {
                child.focus();
            }
        }
    };
    RadioGroup.prototype.bind = function (e) {
        this._dom = e;
    };
    RadioGroup.prototype.onKeyDown = function (e) {
        var i = this.state.focusedIndex;
        if (e.keyCode === KeyCodes.DOWN_ARROW || e.keyCode === KeyCodes.RIGHT_ARROW) {
            e.preventDefault();
            i = i + 1 >= this.props.items.length ? 0 : i + 1;
        }
        else if (e.keyCode === KeyCodes.UP_ARROW || e.keyCode === KeyCodes.LEFT_ARROW) {
            e.preventDefault();
            i = i - 1 < 0 ? this.props.items.length - 1 : i - 1;
        }
        if (i !== this.state.focusedIndex) {
            this.setState({ focusedIndex: i });
        }
    };
    RadioGroup.prototype.onClick = function (item, i) {
        if (i !== this.state.selectedIndex) {
            this.setState({ selectedIndex: i, focusedIndex: i });
            this.props.onChange(item);
        }
    };
    return RadioGroup;
}(React.Component));
export { RadioGroup };
//# sourceMappingURL=RadioGroup.js.map