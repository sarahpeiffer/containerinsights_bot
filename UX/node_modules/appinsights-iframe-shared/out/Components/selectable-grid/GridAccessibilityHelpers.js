import * as KeyCode from '../../KeyCodes';
export function getCellInGrid(grid, column, row) {
    return grid.querySelector("[aria-rowindex=\"" + row + "\"][aria-colindex=\"" + (column + 1) + "\"]");
}
export function getCellFromCell(cell, column, row) {
    var grid = cell;
    while (grid.className !== 'selectable-grid') {
        grid = grid.parentElement;
        if (!grid) {
            return null;
        }
    }
    return getCellInGrid(grid, column, row);
}
export function handleKeyboardNavigation(event) {
    if (!event) {
        return;
    }
    var newCell = null;
    var currentCell = event.target;
    while (currentCell.getAttribute('role') !== 'gridcell' && currentCell.getAttribute('role') !== 'columnheader' &&
        currentCell.getAttribute('role') !== 'row') {
        currentCell = currentCell.parentElement;
        if (!currentCell) {
            return;
        }
    }
    var curRow = parseInt(currentCell.getAttribute('aria-rowindex'), 10);
    var curCol = parseInt(currentCell.getAttribute('aria-colindex') || '0', 10) - 1;
    var rowMode = currentCell.getAttribute('role') === 'row';
    var key = event.which || event.keyCode;
    switch (key) {
        case KeyCode.UP_ARROW:
            newCell = getCellFromCell(currentCell, curCol, curRow - 1);
            break;
        case KeyCode.DOWN_ARROW:
            newCell = getCellFromCell(currentCell, curCol, curRow + 1);
            break;
        case KeyCode.LEFT_ARROW:
            newCell = getCellFromCell(currentCell, curCol - 1, curRow);
            break;
        case KeyCode.RIGHT_ARROW:
            newCell = getCellFromCell(currentCell, curCol + 1, curRow);
            break;
        case KeyCode.SPACEBAR:
            if (currentCell.children.length && currentCell.children[0].click) {
                currentCell.children[0].click();
            }
            break;
        case KeyCode.ENTER:
            var depthSpacers = currentCell.parentElement.getElementsByClassName('sg-row-depthspacer');
            var expander = depthSpacers.length && depthSpacers[0];
            if (expander) {
                expander.click();
            }
            break;
        default:
            return;
    }
    event.preventDefault();
    event.stopPropagation();
    if (newCell) {
        if (rowMode) {
            newCell = newCell.parentElement;
        }
        currentCell.setAttribute('tabIndex', '-1');
        newCell.setAttribute('tabIndex', '0');
        newCell.focus();
    }
}
//# sourceMappingURL=GridAccessibilityHelpers.js.map