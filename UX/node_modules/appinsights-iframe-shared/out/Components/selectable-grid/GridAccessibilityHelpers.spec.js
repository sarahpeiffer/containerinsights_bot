import * as GridAccessibilityHelpers from './GridAccessibilityHelpers';
import * as KeyCode from '../../KeyCodes';
import 'jasmine';
describe('GridAccessibilityHelpers', function () {
    describe('getCellInGrid', function () {
        it('should find the correct cell', function () {
            var grid = document.createElement('div');
            var cell1 = document.createElement('div');
            var cell2 = document.createElement('div');
            cell1.setAttribute('aria-rowindex', '1');
            cell1.setAttribute('aria-colindex', '1');
            cell2.setAttribute('aria-rowindex', '1');
            cell2.setAttribute('aria-colindex', '2');
            grid.appendChild(cell1);
            grid.appendChild(cell2);
            // Note that getCellInGrid finds col with index + 1, but row with just index
            // This is intentional due to the DOM layout of the grid
            expect(GridAccessibilityHelpers.getCellInGrid(grid, 1, 1)).toBe(cell2);
        });
        it('should return null when not found', function () {
            var grid = document.createElement('div');
            var cell1 = document.createElement('div');
            var cell2 = document.createElement('div');
            cell1.setAttribute('aria-rowindex', '1');
            cell1.setAttribute('aria-colindex', '1');
            cell2.setAttribute('aria-rowindex', '1');
            cell2.setAttribute('aria-colindex', '2');
            grid.appendChild(cell1);
            grid.appendChild(cell2);
            // Note that getCellInGrid finds col with index + 1, but row with just index
            // This is intentional due to the DOM layout of the grid
            expect(GridAccessibilityHelpers.getCellInGrid(grid, 1, 2)).toBe(null);
        });
    });
    describe('getCellFromCell', function () {
        it('should find the correct cell', function () {
            var grid = document.createElement('div');
            var cell1 = document.createElement('div');
            var cell2 = document.createElement('div');
            grid.className = 'selectable-grid';
            cell1.setAttribute('aria-rowindex', '1');
            cell1.setAttribute('aria-colindex', '1');
            cell2.setAttribute('aria-rowindex', '1');
            cell2.setAttribute('aria-colindex', '2');
            grid.appendChild(cell1);
            grid.appendChild(cell2);
            // Note that getCellFromCell finds col with index + 1, but row with just index
            // This is intentional due to the DOM layout of the grid
            expect(GridAccessibilityHelpers.getCellFromCell(cell1, 1, 1)).toBe(cell2);
        });
        it('should return null when grid not found', function () {
            var grid = document.createElement('div');
            var cell1 = document.createElement('div');
            var cell2 = document.createElement('div');
            grid.className = 'not-selectable-grid';
            cell1.setAttribute('aria-rowindex', '1');
            cell1.setAttribute('aria-colindex', '1');
            cell2.setAttribute('aria-rowindex', '1');
            cell2.setAttribute('aria-colindex', '2');
            grid.appendChild(cell1);
            grid.appendChild(cell2);
            // Note that getCellFromCell finds col with index + 1, but row with just index
            // This is intentional due to the DOM layout of the grid
            expect(GridAccessibilityHelpers.getCellFromCell(cell1, 1, 1)).toBe(null);
        });
        it('should return null when cell not found', function () {
            var grid = document.createElement('div');
            var cell1 = document.createElement('div');
            var cell2 = document.createElement('div');
            grid.className = 'selectable-grid';
            cell1.setAttribute('aria-rowindex', '1');
            cell1.setAttribute('aria-colindex', '1');
            cell2.setAttribute('aria-rowindex', '1');
            cell2.setAttribute('aria-colindex', '2');
            grid.appendChild(cell1);
            grid.appendChild(cell2);
            // Note that getCellFromCell finds col with index + 1, but row with just index
            // This is intentional due to the DOM layout of the grid
            expect(GridAccessibilityHelpers.getCellFromCell(cell1, 1, 2)).toBe(null);
        });
    });
    describe('handleKeyboardNavigation', function () {
        var goodGrid = document.createElement('div');
        var cell1 = document.createElement('div');
        var cell2 = document.createElement('div');
        var cell3 = document.createElement('div');
        var cell4 = document.createElement('div');
        /* Cells are arranged like so:
         *
         *     1    |   2
         *     3    |   4
         */
        cell1.setAttribute('role', 'gridcell');
        cell1.setAttribute('aria-rowindex', '1');
        cell1.setAttribute('aria-colindex', '1');
        cell2.setAttribute('role', 'gridcell');
        cell2.setAttribute('aria-rowindex', '1');
        cell2.setAttribute('aria-colindex', '2');
        cell3.setAttribute('role', 'gridcell');
        cell3.setAttribute('aria-rowindex', '2');
        cell3.setAttribute('aria-colindex', '1');
        cell4.setAttribute('role', 'gridcell');
        cell4.setAttribute('aria-rowindex', '2');
        cell4.setAttribute('aria-colindex', '2');
        goodGrid.appendChild(cell1);
        goodGrid.appendChild(cell2);
        goodGrid.appendChild(cell3);
        goodGrid.appendChild(cell4);
        goodGrid.className = 'selectable-grid';
        beforeEach(function () {
            spyOn(cell1, 'focus');
            spyOn(cell2, 'focus');
            spyOn(cell3, 'focus');
            spyOn(cell4, 'focus');
        });
        it('should not fail on missing event', function () {
            expect(GridAccessibilityHelpers.handleKeyboardNavigation.bind(null, null)).not.toThrow();
        });
        it('should not call preventDefault on invalid structure', function () {
            var event = {
                target: document.createElement('div'),
                preventDefault: function () { throw new Error('Should not be called'); }
            };
            spyOn(event, 'preventDefault');
            GridAccessibilityHelpers.handleKeyboardNavigation(event);
            expect(event.preventDefault).not.toHaveBeenCalled();
        });
        it('should allow key up', function () {
            var event = {
                target: cell3,
                preventDefault: function () { return null; },
                keyCode: KeyCode.UP_ARROW,
                stopPropagation: function () { }
            };
            spyOn(event, 'preventDefault');
            spyOn(event, 'stopPropagation');
            GridAccessibilityHelpers.handleKeyboardNavigation(event);
            expect(cell1.focus).toHaveBeenCalled();
            expect(cell2.focus).not.toHaveBeenCalled();
            expect(cell3.focus).not.toHaveBeenCalled();
            expect(cell4.focus).not.toHaveBeenCalled();
            expect(cell3.getAttribute('tabIndex')).toBe('-1');
            expect(cell1.getAttribute('tabIndex')).toBe('0');
            expect(event.preventDefault).toHaveBeenCalled();
            expect(event.stopPropagation).toHaveBeenCalled();
        });
        it('should allow key down', function () {
            var event = {
                target: cell1,
                preventDefault: function () { return null; },
                keyCode: KeyCode.DOWN_ARROW,
                stopPropagation: function () { }
            };
            spyOn(event, 'preventDefault');
            spyOn(event, 'stopPropagation');
            GridAccessibilityHelpers.handleKeyboardNavigation(event);
            expect(cell1.focus).not.toHaveBeenCalled();
            expect(cell2.focus).not.toHaveBeenCalled();
            expect(cell3.focus).toHaveBeenCalled();
            expect(cell4.focus).not.toHaveBeenCalled();
            expect(cell1.getAttribute('tabIndex')).toBe('-1');
            expect(cell3.getAttribute('tabIndex')).toBe('0');
            expect(event.preventDefault).toHaveBeenCalled();
            expect(event.stopPropagation).toHaveBeenCalled();
        });
        it('should allow key right', function () {
            var event = {
                target: cell1,
                preventDefault: function () { return null; },
                keyCode: KeyCode.RIGHT_ARROW,
                stopPropagation: function () { }
            };
            spyOn(event, 'preventDefault');
            spyOn(event, 'stopPropagation');
            GridAccessibilityHelpers.handleKeyboardNavigation(event);
            expect(cell1.focus).not.toHaveBeenCalled();
            expect(cell2.focus).toHaveBeenCalled();
            expect(cell3.focus).not.toHaveBeenCalled();
            expect(cell4.focus).not.toHaveBeenCalled();
            expect(cell1.getAttribute('tabIndex')).toBe('-1');
            expect(cell2.getAttribute('tabIndex')).toBe('0');
            expect(event.preventDefault).toHaveBeenCalled();
            expect(event.stopPropagation).toHaveBeenCalled();
        });
        it('should allow key left', function () {
            var event = {
                target: cell4,
                preventDefault: function () { return null; },
                stopPropagation: function () { },
                keyCode: KeyCode.LEFT_ARROW
            };
            spyOn(event, 'preventDefault');
            spyOn(event, 'stopPropagation');
            GridAccessibilityHelpers.handleKeyboardNavigation(event);
            expect(cell1.focus).not.toHaveBeenCalled();
            expect(cell2.focus).not.toHaveBeenCalled();
            expect(cell3.focus).toHaveBeenCalled();
            expect(cell4.focus).not.toHaveBeenCalled();
            expect(cell4.getAttribute('tabIndex')).toBe('-1');
            expect(cell3.getAttribute('tabIndex')).toBe('0');
            expect(event.preventDefault).toHaveBeenCalled();
            expect(event.stopPropagation).toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=GridAccessibilityHelpers.spec.js.map