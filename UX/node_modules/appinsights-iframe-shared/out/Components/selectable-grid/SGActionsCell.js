import * as tslib_1 from "tslib";
import * as React from 'react';
import { FocusableSGCell, AccessibilityUtils } from '../..';
import { ContextMenu } from '../dropdown/ContextMenu';
var SGActionsCellClass = /** @class */ (function (_super) {
    tslib_1.__extends(SGActionsCellClass, _super);
    function SGActionsCellClass() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._onClick = _this.onClick.bind(_this);
        _this._onFocus = _this.onFocus.bind(_this);
        _this._actions = {};
        return _this;
    }
    SGActionsCellClass.prototype.render = function () {
        var _this = this;
        var _a = this.props, actions = _a.actions, messageService = _a.messageService, menuOptions = _a.menuOptions;
        return React.createElement(FocusableSGCell, { items: actions.length + 1, onClick: this._onClick, onFocus: this._onFocus },
            React.createElement("ul", { className: 'sg-actions unstyled-list' },
                actions.map(function (a, i) {
                    var a11yProps = AccessibilityUtils.getAccessibilityProps({
                        onClick: function () { return _this.onActionClick(i); },
                        ref: function (r) { return _this._actions[i] = r; },
                        tabIndex: -1
                    });
                    return React.createElement("li", tslib_1.__assign({ className: 'sg-action' }, a11yProps, { title: a.displayName }), a.icon);
                }),
                React.createElement("li", null,
                    React.createElement(ContextMenu, { ref: function (r) { return _this._contextMenu = r; }, options: menuOptions, messageService: messageService, tabindex: -1 }))));
    };
    SGActionsCellClass.prototype.onActionClick = function (index) {
        var action = this.props.actions[index];
        if (action) {
            this.props.messageService.PostMessage(action.message, action.data);
        }
    };
    SGActionsCellClass.prototype.onClick = function (index) {
        if (index === this.props.actions.length && this._contextMenu) {
            this._contextMenu.onClick();
        }
        else {
            this.onActionClick(index);
        }
    };
    SGActionsCellClass.prototype.onFocus = function (index) {
        var ref;
        if (index === this.props.actions.length) {
            ref = this._contextMenu;
        }
        else {
            ref = this._actions[index];
        }
        if (ref) {
            ref.focus();
        }
    };
    return SGActionsCellClass;
}(React.Component));
export { SGActionsCellClass };
/**
 * Cell for use in `SelectableGrid` to display actions for a row, both in the cell and in a context menu.
 *
 * @param messageService Portal Message Service instance to use to send messages to the extension.
 */
export var SGActionsCell = function (messageService) {
    return function (_a) {
        var value = _a.value;
        return React.createElement(SGActionsCellClass, tslib_1.__assign({ messageService: messageService }, value));
    };
};
//# sourceMappingURL=SGActionsCell.js.map