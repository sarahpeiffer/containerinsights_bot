import * as React from 'react';
import { SGActionsCellClass, FocusableSGCell, SGActionsCell } from '.';
import { TestUtilities, DropdownMessage, EllipsisSvg } from '../..';
import { ContextMenu } from '../dropdown/ContextMenu';
describe('SGActionsCellClass', function () {
    var props;
    var cell;
    beforeEach(function () {
        props = {
            actions: [],
            menuOptions: [],
            messageService: {}
        };
    });
    describe('render', function () {
        var rendered;
        it('renders a context menu', function () {
            cell = new SGActionsCellClass(props);
            rendered = cell.render();
            expect(rendered.type).toBe(FocusableSGCell);
            expect(rendered.props.children).toBeTruthy();
            expect(rendered.props.children.type).toBe('ul');
            expect(TestUtilities.FindSingle(rendered, function (e) { return e.type === ContextMenu; })).toBeTruthy();
        });
        it('renders a context menu and actions', function () {
            props.actions.push(new DropdownMessage('id', 'display', 'message', 'data', React.createElement(EllipsisSvg, null)));
            cell = new SGActionsCellClass(props);
            rendered = cell.render();
            expect(rendered.type).toBe(FocusableSGCell);
            expect(rendered.props.children).toBeTruthy();
            expect(rendered.props.children.type).toBe('ul');
            expect(TestUtilities.FindSingle(rendered, function (e) { return e.type === ContextMenu; })).toBeTruthy();
            var action = TestUtilities.FindSingle(rendered, function (e) { return e.props.className === 'sg-action'; });
            expect(action.props.title).toBe('display');
            expect(action.props.children.type).toBe(EllipsisSvg);
        });
    });
});
describe('SGActionsCell', function () {
    it('should return an SGActionsCellClass', function () {
        var factory = SGActionsCell({});
        var cell = factory({});
        expect(factory).toBeTruthy();
        expect(cell).toBeTruthy();
        expect(cell.type).toBe(SGActionsCellClass);
    });
});
//# sourceMappingURL=SGActionsCell.spec.js.map