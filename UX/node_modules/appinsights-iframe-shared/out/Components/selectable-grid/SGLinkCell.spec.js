import { SGLinkCell } from './SGLinkCell';
describe('SGLinkCell', function () {
    it('should create a div with a click action', function () {
        var onClick = jasmine.createSpy('onClick');
        var cell = SGLinkCell(function (a) { return a + 'formatted'; }, onClick)({ value: 'test', rowSelected: false });
        expect(cell.type).toBe('div');
        expect(cell.props.className).toBe('sg-link');
        expect(cell.props.title).toBe('testformatted');
        expect(cell.props.children[0]).toBeNull();
        expect(cell.props.children[1].props.children).toBe('testformatted');
        expect(cell.props.children[1].props.className).toBe('sg-link');
        expect(cell.props.onClick).toBeDefined();
        cell.props.onClick();
        expect(onClick).toHaveBeenCalledTimes(1);
        expect(onClick).toHaveBeenCalledWith('test');
    });
    it('should create a div with an icon', function () {
        var onClick = jasmine.createSpy('onClick');
        var icon = {};
        var cell = SGLinkCell(function (a) { return a + 'formatted'; }, onClick, function (a) { return icon; })({ value: 'test', rowSelected: false });
        expect(cell.type).toBe('div');
        expect(cell.props.className).toBe('sg-link');
        expect(cell.props.title).toBe('testformatted');
        expect(cell.props.children[0].props.children).toBe(icon);
        expect(cell.props.children[0].props.className).toBe('sg-icon');
        expect(cell.props.children[1].props.children).toBe('testformatted');
        expect(cell.props.children[1].props.className).toBe('sg-link');
        expect(cell.props.onClick).toBeDefined();
        cell.props.onClick();
        expect(onClick).toHaveBeenCalledTimes(1);
        expect(onClick).toHaveBeenCalledWith('test');
    });
    it('should create a div with a tooltip', function () {
        var onClick = jasmine.createSpy('onClick');
        var icon = {};
        var cell = SGLinkCell(function (a) { return a + 'formatted'; }, onClick, function (a) { return icon; }, function (a) { return a + 'extended'; })({ value: 'test', rowSelected: false });
        expect(cell.type).toBe('div');
        expect(cell.props.className).toBe('sg-link');
        expect(cell.props.title).toBe('testextended');
        expect(cell.props.children[0].props.children).toBe(icon);
        expect(cell.props.children[0].props.className).toBe('sg-icon');
        expect(cell.props.children[1].props.children).toBe('testformatted');
        expect(cell.props.children[1].props.className).toBe('sg-link');
        expect(cell.props.onClick).toBeDefined();
        cell.props.onClick();
        expect(onClick).toHaveBeenCalledTimes(1);
        expect(onClick).toHaveBeenCalledWith('test');
    });
});
//# sourceMappingURL=SGLinkCell.spec.js.map