/// <reference types="react" />
import * as React from 'react';
import { SGColumn, SGDataRow, SGSortOrder } from './SelectableGridData';
export interface SelectableGridProps {
    columns: SGColumn[];
    data: SGDataRow[];
    fixedRow?: SGDataRow;
    sortColumn?: number;
    rowHeight?: number;
    childIndentation?: number;
    sortIndicators?: {
        asc?: JSX.Element;
        desc?: JSX.Element;
        none?: JSX.Element;
    };
    nestingIndicators?: {
        expand?: JSX.Element;
        collapse?: JSX.Element;
    };
    hideHeader?: boolean;
    rowColor?: (rowValue: SGDataRow) => string;
    scrollToRowWithValue?: any;
    maxRows?: number;
    showEmptyRows?: boolean;
    onSelect?: (rowValue: any) => void;
    onSortColumnChanged?: (sortColumn: number) => void;
    onSortOrderChanged?: (sortColumn: number, sortOrder: SGSortOrder) => void;
    onRowCollapseChanged?: (rowValue: any, collapsed: boolean) => void;
    onScrollToEnd?: () => void;
    children?: React.ReactNode;
    accessibleTitle?: string;
    keyboardNavigateOnlyRows?: boolean;
}
export interface SelectableGridState {
    scrollbarWidth: number;
    gridBodyHeight: number;
}
export declare class SelectableGrid extends React.Component<SelectableGridProps, SelectableGridState> {
    static defaultProps: Partial<SelectableGridProps>;
    private _maxSort;
    private _hasChildren;
    private _minColWidths;
    private _horizontalScrollbarBodies;
    private _horizontalScrollAmounts;
    constructor(props?: SelectableGridProps, context?: any);
    keyDownHelperForGridHeader(event: React.KeyboardEvent<HTMLElement>): void;
    componentDidMount(): void;
    onRowHeaderClicked(column: number): void;
    /** Generates the HTML for the grid header (row with columns bearing the title of each column in the dataset) */
    getHeader(scrollbarWidth: number): JSX.Element;
    /** Helper function to handle rendering cells at the proper offset */
    repositionElementForHorizontalScroll(elm: HTMLElement, columnIndex: number): void;
    /** Generates the HTML for the grid footer (horizontal scrollbars) */
    getHorizontalScrollbars(scrollbarWidth: number, showingVerticalScrollbar: boolean): JSX.Element;
    /** Generates the HTML for a given DataRow (column divs with the appropriate cell model for each, populated with data) */
    getRow(row: SGDataRow, rowKeyIndex: number, depth: number): JSX.Element;
    /** Generates appropriate ref for horizontal scrollbar support  */
    getCellRef(columnIndex: number, indentationWidth: number): (e: HTMLElement) => void;
    /** Converts the DataRow tree structure to a flat array by applying a supplied function to each row and traversing depth-first */
    flattenRows<T>(rows: SGDataRow[], fn: (row: SGDataRow, depth: number) => T): T[];
    getSortFuncForColumn(column: number, followSortOrder: boolean): (v1: any, v2: any) => number;
    /** Gets row data for use in rendering */
    getRows(): {
        row: SGDataRow;
        depth: number;
    }[];
    onGridResize(height: number): void;
    render(): JSX.Element;
    private onScroll(params);
}
