/// <reference types="react" />
export declare enum SGSortOrder {
    Ascending = 0,
    Descending = 1,
}
export interface SGHeaderPluginProps {
    isSelected: boolean;
    sortOrder: SGSortOrder;
}
export interface SGColumn {
    name: string;
    width: number;
    resizable?: boolean;
    sortable?: boolean;
    sortOrder?: SGSortOrder;
    sortFunc?: (v1: any, v2: any) => number;
    showSortBar?: boolean;
    sortBarColor?: string;
    cell: React.StatelessComponent<SGCellProps>;
    headerPlugin?: React.StatelessComponent<SGHeaderPluginProps>;
    useOnlyHeaderPlugin?: boolean;
    infoText?: string;
    hidden?: boolean;
    className?: string;
    showHorizontalScrollbar?: boolean;
}
export interface SGCellProps<T = any> {
    value: T;
    rowSelected: boolean;
}
export declare class SGDataRow {
    selected?: boolean;
    columnData: any[];
    children?: SGDataRow[];
    expanded?: boolean;
    disabled?: boolean;
    value: any;
    className?: string;
    private sortedColumn;
    constructor(columnData: any[], value: any, selected?: boolean, expanded?: boolean, children?: SGDataRow[], disabled?: boolean, className?: any);
    traverse(fn: (row: SGDataRow, depth: number) => void, onlyExpandedChildren?: boolean, sortColumn?: number, sortFn?: (a: any, b: any) => number, depth?: number): void;
}
