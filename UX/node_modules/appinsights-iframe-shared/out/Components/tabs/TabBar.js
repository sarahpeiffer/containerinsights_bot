import * as tslib_1 from "tslib";
import * as React from 'react';
import * as KeyCodes from '../../KeyCodes';
/**
 * A component for displaying an accessible list of tabs that supports all required keyboard attributes.
 * Content controlled by the tabs needs to have role='tabpanel' and needs to provide its HTML ID
 * to the relevant tab. Tab content should also have an appropriate aria-label.
 */
var TabBar = /** @class */ (function (_super) {
    tslib_1.__extends(TabBar, _super);
    function TabBar(props) {
        var _this = _super.call(this, props) || this;
        _this._onKeyDown = _this.onKeyDown.bind(_this);
        _this._bind = _this.bind.bind(_this);
        _this.state = {
            selectedIndex: props.selectedIndex || 0
        };
        _this._focusIndex = _this.state.selectedIndex;
        return _this;
    }
    TabBar.prototype.componentWillReceiveProps = function (nextProps) {
        if (nextProps.selectedIndex !== this.props.selectedIndex && nextProps.selectedIndex !== this.state.selectedIndex) {
            this.setState({ selectedIndex: nextProps.selectedIndex });
        }
    };
    TabBar.prototype.render = function () {
        var _this = this;
        var tabs = [];
        this.props.tabs.forEach(function (tab, i) {
            tabs.push(React.createElement("li", { "aria-selected": i === _this.state.selectedIndex, key: tab.id, "aria-labelledby": tab.id, onClick: function () { return _this.onClick(tab, i); }, onFocus: function () { return _this._focusIndex = i; }, onKeyDown: function (e) { return _this.onTabKeyDown(e, tab, i); }, tabIndex: 0, "aria-controls": tab.htmlId, className: 'list-item ' + (tab.className || ''), role: 'tab' }, tab.content));
        });
        return React.createElement("ul", { className: 'unstyled-list ' + (this.props.className || ''), onKeyDown: this._onKeyDown, ref: this._bind, role: 'tablist' }, tabs);
    };
    TabBar.prototype.onKeyDown = function (e) {
        if (e.keyCode === KeyCodes.RIGHT_ARROW) {
            e.preventDefault();
            var i = this._focusIndex + 1 >= this.props.tabs.length ? 0 : this._focusIndex + 1;
            this.focus(i);
        }
        else if (e.keyCode === KeyCodes.LEFT_ARROW) {
            e.preventDefault();
            var i = this._focusIndex - 1 < 0 ? this.props.tabs.length - 1 : this._focusIndex - 1;
            this.focus(i);
        }
    };
    TabBar.prototype.focus = function (i) {
        if (this._dom && this._dom.childNodes.length > i) {
            var child = this._dom.childNodes.item(i);
            if (child && typeof child.focus === 'function') {
                child.focus();
            }
        }
    };
    TabBar.prototype.onTabKeyDown = function (e, tab, i) {
        if (e.keyCode === KeyCodes.ENTER) {
            e.preventDefault();
            this.onClick(tab, i);
        }
    };
    TabBar.prototype.onClick = function (tab, i) {
        if (this.state.selectedIndex !== i) {
            this.setState({ selectedIndex: i });
            this.props.onChange(tab);
        }
    };
    TabBar.prototype.bind = function (e) {
        this._dom = e;
    };
    return TabBar;
}(React.Component));
export { TabBar };
//# sourceMappingURL=TabBar.js.map