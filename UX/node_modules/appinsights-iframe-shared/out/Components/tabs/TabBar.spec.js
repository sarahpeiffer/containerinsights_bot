import 'jasmine';
import { TabBar } from './TabBar';
import * as KeyCodes from '../../KeyCodes';
import { MockChildNodes, TestUtilities } from '../../TestUtilities';
describe('TabBar', function () {
    var props;
    var tabBar;
    function verifySelected(rendered, index) {
        verifyPassiveSelected(rendered, index);
        expect(props.onChange).toHaveBeenCalledTimes(1);
        expect(props.onChange).toHaveBeenCalledWith(props.tabs[index]);
    }
    function verifyPassiveSelected(rendered, index) {
        var targetChild = rendered.props.children[index];
        expect(targetChild).toBeTruthy();
        expect(targetChild.props['aria-selected']).toBe(true);
    }
    function verifyNotSelected(rendered, index) {
        var targetChild = rendered.props.children[index];
        expect(targetChild).toBeTruthy();
        expect(targetChild.props['aria-selected']).toBe(false);
        expect(props.onChange).not.toHaveBeenCalled();
    }
    function mount(rendered) {
        var items = [];
        props.tabs.forEach(function (tab, i) {
            var li = {
                focus: function () { }
            };
            spyOn(li, 'focus');
            items.push(li);
        });
        var ulist = {
            childNodes: new MockChildNodes(items)
        };
        rendered.ref(ulist);
        return ulist;
    }
    function verifyFocused(dom, index) {
        var target = dom.childNodes.item(index);
        expect(target).toBeTruthy();
        expect(target.focus).toHaveBeenCalledTimes(1);
    }
    function onFocus(rendered, index) {
        var targetChild = rendered.props.children[index];
        expect(targetChild).toBeTruthy();
        targetChild.props.onFocus();
    }
    beforeEach(function () {
        props = {
            onChange: function () { },
            className: 'my class',
            selectedIndex: 0,
            tabs: [
                {
                    className: 'tab1',
                    content: {},
                    htmlId: 'tabid1',
                    id: 'tab1',
                    value: 'value1'
                },
                {
                    className: 'tab2',
                    content: {},
                    htmlId: 'tabid2',
                    id: 'tab2',
                    value: 'value2'
                },
                {
                    className: 'tab3',
                    content: {},
                    htmlId: 'tabid3',
                    id: 'tab3',
                    value: 'value3'
                }
            ]
        };
        spyOn(props, 'onChange');
        tabBar = new TabBar(props);
        spyOn(tabBar, 'setState').and.callFake(function (s) {
            tabBar.state = TestUtilities.SetState(tabBar.state, tabBar.props, s);
        });
    });
    describe('render', function () {
        it('should have a list of tabs', function () {
            var result = tabBar.render();
            expect(result.type).toBe('ul');
            expect(result.props.className).toBe('unstyled-list ' + props.className);
            expect(result.props.role).toBe('tablist');
        });
        it('should have tabs', function () {
            var result = tabBar.render();
            props.tabs.forEach(function (tab, i) {
                var child = result.props.children[i];
                expect(child).toBeTruthy();
                expect(child.type).toBe('li');
                expect(child.props['aria-labelledby']).toBe(tab.id);
                expect(child.props.tabIndex).toBe(0);
                expect(child.key).toBe(tab.id);
                expect(child.props['aria-controls']).toBe(tab.htmlId);
                expect(child.props.className).toBe('list-item ' + tab.className);
                expect(child.props.role).toBe('tab');
                expect(child.props.children).toBe(tab.content);
            });
        });
        it('should set selected index by props', function () {
            props.selectedIndex = 2;
            tabBar = new TabBar(props);
            var rendered = tabBar.render();
            verifyPassiveSelected(rendered, 2);
        });
        it('should set selected index by props on update', function () {
            var nextProps = Object.assign({}, props);
            nextProps.selectedIndex = 1;
            tabBar.componentWillReceiveProps(nextProps);
            var rendered = tabBar.render();
            verifyPassiveSelected(rendered, 1);
        });
        it('should set selected tab if clicked', function () {
            var rendered = tabBar.render();
            var target = rendered.props.children[1];
            target.props.onClick();
            rendered = tabBar.render();
            verifySelected(rendered, 1);
        });
        it('should set selected tab if enter pressed', function () {
            var rendered = tabBar.render();
            var e = {
                preventDefault: function () { },
                keyCode: KeyCodes.ENTER
            };
            spyOn(e, 'preventDefault');
            var target = rendered.props.children[2];
            target.props.onKeyDown(e);
            rendered = tabBar.render();
            expect(e.preventDefault).toHaveBeenCalledTimes(1);
            verifySelected(rendered, 2);
        });
        it('should not set selected tab if other key pressed', function () {
            var rendered = tabBar.render();
            var e = {
                preventDefault: function () { },
                keyCode: KeyCodes.SPACEBAR
            };
            spyOn(e, 'preventDefault');
            var target = rendered.props.children[2];
            target.props.onKeyDown(e);
            rendered = tabBar.render();
            expect(e.preventDefault).not.toHaveBeenCalled();
            verifyNotSelected(rendered, 2);
        });
        describe('onKeyDown', function () {
            var rendered;
            var dom;
            var e;
            var onKeyDown;
            beforeEach(function () {
                rendered = tabBar.render();
                dom = mount(rendered);
                e = {
                    preventDefault: function () { }
                };
                spyOn(e, 'preventDefault');
                onKeyDown = rendered.props.onKeyDown;
            });
            it('should set focus on next item if right arrow pressed', function () {
                e.keyCode = KeyCodes.RIGHT_ARROW;
                onKeyDown(e);
                expect(e.preventDefault).toHaveBeenCalledTimes(1);
                verifyFocused(dom, 1);
            });
            it('should set focus to prev item if left arrow pressed', function () {
                onFocus(rendered, 1);
                e.keyCode = KeyCodes.LEFT_ARROW;
                onKeyDown(e);
                expect(e.preventDefault).toHaveBeenCalledTimes(1);
                verifyFocused(dom, 0);
            });
            it('should set focus to first item if focus on last item and right arrow pressed', function () {
                onFocus(rendered, 2);
                e.keyCode = KeyCodes.RIGHT_ARROW;
                onKeyDown(e);
                expect(e.preventDefault).toHaveBeenCalledTimes(1);
                verifyFocused(dom, 0);
            });
            it('should set focus to last item if focus on first item and left arrow pressed', function () {
                e.keyCode = KeyCodes.LEFT_ARROW;
                onKeyDown(e);
                expect(e.preventDefault).toHaveBeenCalledTimes(1);
                verifyFocused(dom, 2);
            });
        });
    });
});
//# sourceMappingURL=TabBar.spec.js.map