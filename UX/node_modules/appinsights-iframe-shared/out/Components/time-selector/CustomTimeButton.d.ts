/// <reference types="react" />
import * as React from 'react';
import { TimeContext } from '../../TimeContext';
import { StringMap } from '../../SharedInterfaces';
export interface CustomTimeButtonProps {
    shouldFocus: boolean;
    onFocus?: () => void;
    isSelected: boolean;
    onSelected: (timeContext: TimeContext, isValid: boolean) => void;
    value: TimeContext;
    strings: StringMap<string>;
}
export interface CustomTimeButtonState {
    startDate: Date;
    endDate: Date;
    inputHasFocus: boolean;
}
export declare class CustomTimeButton extends React.Component<CustomTimeButtonProps, CustomTimeButtonState> implements React.ComponentLifecycle<CustomTimeButtonProps, CustomTimeButtonState> {
    static defaultProps: CustomTimeButtonProps;
    private static maximumTimeRange;
    private _focus;
    private _onFocus;
    constructor(props: CustomTimeButtonProps);
    componentWillUpdate(nextProps: CustomTimeButtonProps, nextState: CustomTimeButtonState): void;
    focus(x: HTMLElement): void;
    onSelected(): void;
    importTimeContext(timeContext: TimeContext): {
        endDate: Date;
        startDate: Date;
    };
    exportDates(): TimeContext;
    onStartChanged(date: Date): void;
    onEndChanged(date: Date): void;
    onFocus(): void;
    startTimeValidator(): {
        isValid: boolean;
        reason: string;
    };
    componentWillReceiveProps(nextProps: CustomTimeButtonProps): void;
    render(): JSX.Element;
    private onKeyPress(e);
}
