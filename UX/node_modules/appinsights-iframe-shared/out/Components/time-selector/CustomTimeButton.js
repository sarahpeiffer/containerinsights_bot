import * as tslib_1 from "tslib";
import * as React from 'react';
import { TimeContext, TimeConstants } from '../../TimeContext';
import { DatePicker } from '../DatePicker';
import * as KeyCodes from '../../KeyCodes';
var CustomTimeButton = /** @class */ (function (_super) {
    tslib_1.__extends(CustomTimeButton, _super);
    function CustomTimeButton(props) {
        var _this = _super.call(this, props) || this;
        _this._focus = _this.focus.bind(_this);
        _this._onFocus = _this.onFocus.bind(_this);
        var _a = _this.importTimeContext(props.value), startDate = _a.startDate, endDate = _a.endDate;
        _this.state = {
            startDate: startDate,
            endDate: endDate,
            inputHasFocus: false
        };
        return _this;
    }
    CustomTimeButton.prototype.componentWillUpdate = function (nextProps, nextState) {
        if (nextProps.value !== this.props.value) {
            var tmpState = this.importTimeContext(nextProps.value);
            nextState.endDate = tmpState.endDate;
            nextState.startDate = tmpState.startDate;
        }
    };
    CustomTimeButton.prototype.focus = function (x) {
        if (x && this.props.shouldFocus && !this.state.inputHasFocus) {
            x.focus();
        }
    };
    CustomTimeButton.prototype.onSelected = function () {
        this.props.onSelected(this.exportDates(), this.startTimeValidator().isValid);
    };
    CustomTimeButton.prototype.importTimeContext = function (timeContext) {
        if (!timeContext) {
            return { endDate: new Date(), startDate: new Date() };
        }
        var endTime = timeContext.endTime || new Date();
        return {
            endDate: endTime,
            startDate: new Date(endTime.getTime() - timeContext.durationMs)
        };
    };
    CustomTimeButton.prototype.exportDates = function () {
        return new TimeContext(this.state.endDate.getTime() - this.state.startDate.getTime(), this.state.endDate);
    };
    CustomTimeButton.prototype.onStartChanged = function (date) {
        var _this = this;
        this.setState({ startDate: date }, function () { return _this.onSelected(); });
    };
    CustomTimeButton.prototype.onEndChanged = function (date) {
        var _this = this;
        this.setState({ endDate: date }, function () { return _this.onSelected(); });
    };
    CustomTimeButton.prototype.onFocus = function () {
        var _this = this;
        this.setState(function (prevState) {
            prevState.inputHasFocus = true;
            return prevState;
        }, function () {
            if (_this.props.onFocus) {
                _this.props.onFocus();
            }
        });
    };
    CustomTimeButton.prototype.startTimeValidator = function () {
        var validation = { isValid: true, reason: '' };
        var startDate = this.state.startDate.getTime();
        if (startDate >= this.state.endDate.getTime()) {
            validation.isValid = false;
            validation.reason = this.props.strings['validateStartTimeBeforeEndTime'];
        }
        else if (startDate > new Date().getTime()) {
            validation.isValid = false;
            validation.reason = this.props.strings['validateStartTimeBeforeNow'];
        }
        else if (startDate < new Date().getTime() - CustomTimeButton.maximumTimeRange) {
            validation.isValid = false;
            validation.reason = this.props.strings['billingDataTimeRangeValidationString'].format('90');
        }
        return validation;
    };
    CustomTimeButton.prototype.componentWillReceiveProps = function (nextProps) {
        if (!nextProps.shouldFocus && this.state.inputHasFocus) {
            this.setState(function (prevState) {
                prevState.inputHasFocus = false;
                return prevState;
            });
        }
    };
    CustomTimeButton.prototype.render = function () {
        return React.createElement("li", { className: this.props.isSelected ? 'selected' : '', onClick: this.onSelected.bind(this), role: 'menuitem', "aria-selected": this.props.isSelected, onKeyPress: this.onKeyPress.bind(this), ref: this._focus, tabIndex: this.props.shouldFocus ? 0 : -1 },
            React.createElement("div", { className: 'panel-list-button' },
                React.createElement("div", null, this.props.strings['customTimeRangeTitle']),
                React.createElement(DatePicker, { title: this.props.strings['customTimeRangeStart'], validation: this.startTimeValidator(), selected: this.state.startDate, onChange: this.onStartChanged.bind(this), onFocus: this._onFocus }),
                React.createElement(DatePicker, { title: this.props.strings['customTimeRangeEnd'], validation: { isValid: true }, selected: this.state.endDate, onChange: this.onEndChanged.bind(this), onFocus: this._onFocus })));
    };
    CustomTimeButton.prototype.onKeyPress = function (e) {
        if (e.keyCode === KeyCodes.ENTER) {
            e.preventDefault();
            e.stopPropagation();
            this.onSelected();
        }
    };
    CustomTimeButton.defaultProps = {};
    // TODO: osrosado - 1/6/2017 - Get this value from Ibiza side
    CustomTimeButton.maximumTimeRange = 90 * TimeConstants.day;
    return CustomTimeButton;
}(React.Component));
export { CustomTimeButton };
//# sourceMappingURL=CustomTimeButton.js.map