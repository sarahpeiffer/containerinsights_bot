/// <reference types="react" />
import * as React from 'react';
import { StringMap } from '../../SharedInterfaces';
import { TimeContext } from '../../TimeContext';
export interface TimeSelectorPanelProps {
    selected: TimeContext;
    onSelected: (timeContext: TimeContext) => void;
    onCancel: () => void;
    strings: StringMap<string>;
    onChange?: (timeContext: TimeContext) => void;
}
export interface TimeSelectorPanelState {
    selected: TimeContext;
    isValidated: boolean;
    focusIndex: number;
}
export declare class TimeSelectorPanel extends React.Component<TimeSelectorPanelProps, TimeSelectorPanelState> implements React.ComponentLifecycle<TimeSelectorPanelProps, TimeSelectorPanelState> {
    static defaultProps: TimeSelectorPanelProps;
    private _onKeyDown;
    private _onCustomFocus;
    private _ul;
    private _menu;
    private _ref;
    constructor(props: any);
    componentWillUpdate(nextProps: TimeSelectorPanelProps, nextState: TimeSelectorPanelState): void;
    onSelected(timeContext: TimeContext, isValid?: boolean): void;
    isSelected(durationMs: number): boolean;
    isCustomSelected(): boolean;
    isValid(): boolean | TimeContext;
    onClick(): void;
    render(): JSX.Element;
    private shouldFocus(index);
    private onCustomFocus();
    private onKeyDown(e);
}
