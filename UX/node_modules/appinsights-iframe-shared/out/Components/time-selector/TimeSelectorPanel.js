import * as tslib_1 from "tslib";
import * as React from 'react';
import { RelativeTimeButton } from './RelativeTimeButton';
import { CustomTimeButton } from './CustomTimeButton';
import { AccessibleMenu } from '../../AccessibleMenu';
import { TimeConstants } from '../../TimeContext';
import { Utils } from '../../Utils';
import { AccessibilityUtils } from '../../AccessibilityUtils';
var minutes30 = TimeConstants.minute * 30;
var hour1 = TimeConstants.hour;
var hour4 = TimeConstants.hour * 4;
var hour12 = TimeConstants.hour * 12;
var hour24 = TimeConstants.hour * 24;
var hour48 = TimeConstants.hour * 48;
var days3 = TimeConstants.day * 3;
var days7 = TimeConstants.day * 7;
var days30 = TimeConstants.day * 30;
var TimeSelectorPanel = /** @class */ (function (_super) {
    tslib_1.__extends(TimeSelectorPanel, _super);
    function TimeSelectorPanel(props) {
        var _this = _super.call(this, props) || this;
        _this._onKeyDown = _this.onKeyDown.bind(_this);
        _this._onCustomFocus = _this.onCustomFocus.bind(_this);
        _this._ref = function (e) { return _this._ul = e; };
        _this.state = {
            selected: props.selected,
            isValidated: true,
            focusIndex: 0
        };
        _this._menu = new AccessibleMenu(false, [-1, minutes30, hour1, hour4, hour12, hour24, hour48, days3, days7, days30], 0, true, false);
        return _this;
    }
    TimeSelectorPanel.prototype.componentWillUpdate = function (nextProps, nextState) {
        if (nextProps.selected !== this.props.selected) {
            nextState.selected = nextProps.selected;
        }
    };
    TimeSelectorPanel.prototype.onSelected = function (timeContext, isValid) {
        var _this = this;
        if (!timeContext || !this.state.selected || !timeContext.endTime || !this.state.selected.endTime ||
            !timeContext.startTime || !this.state.selected.startTime ||
            timeContext.endTime.getTime() !== this.state.selected.endTime.getTime() ||
            timeContext.startTime.getTime() !== this.state.selected.startTime.getTime()) {
            this.setState(function (prevState) {
                var isValidated;
                if (isValid !== undefined) {
                    isValidated = isValid;
                }
                else {
                    isValidated = true;
                }
                if (isValidated && _this.props.onChange) {
                    _this.props.onChange(timeContext);
                }
                var focusIndex = timeContext.endTime ? 0 : _this._menu.items.indexOf(timeContext.durationMs);
                _this._menu.index = focusIndex;
                return {
                    selected: timeContext,
                    isValidated: isValidated,
                    focusIndex: focusIndex
                };
            });
        }
    };
    TimeSelectorPanel.prototype.isSelected = function (durationMs) {
        return !!(this.state.selected && !this.state.selected.endTime && this.state.selected.durationMs === durationMs);
    };
    TimeSelectorPanel.prototype.isCustomSelected = function () {
        return !!(this.state.selected && this.state.selected.endTime);
    };
    TimeSelectorPanel.prototype.isValid = function () {
        var endTime = function (obj) { return (obj.selected && obj.selected.endTime) ? obj.selected.endTime.getTime() : 0; };
        var validNoPrev = !this.props.selected && this.state.selected;
        var validWithPrev = this.props.selected && this.state.selected &&
            (this.state.selected.durationMs !== this.props.selected.durationMs ||
                endTime(this.state) !== endTime(this.props));
        return this.state.isValidated && (validWithPrev || validNoPrev);
    };
    TimeSelectorPanel.prototype.onClick = function () {
        if (this.isValid()) {
            this.props.onSelected(this.state.selected);
        }
    };
    TimeSelectorPanel.prototype.render = function () {
        var _this = this;
        var id = AccessibilityUtils.getRandomElementId();
        var row = 0;
        return React.createElement("div", { "aria-labelledby": id, className: 'panel azure-theme', role: 'region' },
            React.createElement("div", { className: 'panel-title' },
                React.createElement("h2", { id: id }, this.props.strings['searchTimeRangeCommandTitle'])),
            React.createElement("div", { className: 'panel-content' },
                React.createElement("ul", { className: 'panel-list hover-style-outline', role: 'menu', onKeyDown: this._onKeyDown, ref: this._ref },
                    React.createElement(CustomTimeButton, { shouldFocus: this.shouldFocus(row++), onFocus: this._onCustomFocus, value: this.state.selected, strings: this.props.strings, onSelected: this.onSelected.bind(this), isSelected: this.isCustomSelected() }),
                    React.createElement(RelativeTimeButton, { shouldFocus: this.shouldFocus(row++), value: Utils.GetValueOrDefault(this.props.strings, 'timeRangeLastMinutes', '').format('30'), durationMs: minutes30, onSelected: this.onSelected.bind(this), isSelected: this.isSelected(minutes30) }),
                    React.createElement(RelativeTimeButton, { shouldFocus: this.shouldFocus(row++), value: Utils.GetValueOrDefault(this.props.strings, 'timeRangeLastHour', ''), durationMs: hour1, onSelected: this.onSelected.bind(this), isSelected: this.isSelected(hour1) }),
                    React.createElement(RelativeTimeButton, { shouldFocus: this.shouldFocus(row++), value: Utils.GetValueOrDefault(this.props.strings, 'timeRangeLastHours', '').format('4'), durationMs: hour4, onSelected: this.onSelected.bind(this), isSelected: this.isSelected(hour4) }),
                    React.createElement(RelativeTimeButton, { shouldFocus: this.shouldFocus(row++), value: Utils.GetValueOrDefault(this.props.strings, 'timeRangeLastHours', '').format('12'), durationMs: hour12, onSelected: this.onSelected.bind(this), isSelected: this.isSelected(hour12) }),
                    React.createElement(RelativeTimeButton, { shouldFocus: this.shouldFocus(row++), value: Utils.GetValueOrDefault(this.props.strings, 'timeRangeLastHours', '').format('24'), durationMs: hour24, onSelected: this.onSelected.bind(this), isSelected: this.isSelected(hour24) }),
                    React.createElement(RelativeTimeButton, { shouldFocus: this.shouldFocus(row++), value: Utils.GetValueOrDefault(this.props.strings, 'timeRangeLastHours', '').format('48'), durationMs: hour48, onSelected: this.onSelected.bind(this), isSelected: this.isSelected(hour48) }),
                    React.createElement(RelativeTimeButton, { shouldFocus: this.shouldFocus(row++), value: Utils.GetValueOrDefault(this.props.strings, 'timeRangeLastDays', '').format('3'), durationMs: days3, onSelected: this.onSelected.bind(this), isSelected: this.isSelected(days3) }),
                    React.createElement(RelativeTimeButton, { shouldFocus: this.shouldFocus(row++), value: Utils.GetValueOrDefault(this.props.strings, 'timeRangeLastDays', '').format('7'), durationMs: days7, onSelected: this.onSelected.bind(this), isSelected: this.isSelected(days7) }),
                    React.createElement(RelativeTimeButton, { shouldFocus: this.shouldFocus(row++), value: Utils.GetValueOrDefault(this.props.strings, 'timeRangeLastDays', '').format('30'), durationMs: days30, onSelected: this.onSelected.bind(this), isSelected: this.isSelected(days30) }))),
            !this.props.onChange && React.createElement("div", { className: 'panel-actionBar' },
                React.createElement("div", { tabIndex: 0, className: 'button' + (this.isValid() ? '' : ' disabled'), role: 'button', "aria-disabled": !this.isValid(), "aria-label": Utils.GetValueOrDefault(this.props.strings, 'commandSave', ''), onClick: function () { return _this.onClick(); }, onKeyPress: AccessibilityUtils.onClickToOnKeyPress(this.onClick.bind(this)) }, Utils.GetValueOrDefault(this.props.strings, 'commandSave', '')),
                React.createElement("div", { tabIndex: 0, className: 'button secondary', onClick: this.props.onCancel, role: 'button', "aria-label": Utils.GetValueOrDefault(this.props.strings, 'cancelDialogText', ''), onKeyPress: AccessibilityUtils.onClickToOnKeyPress(this.props.onCancel.bind(this)) }, Utils.GetValueOrDefault(this.props.strings, 'cancelDialogText', ''))));
    };
    TimeSelectorPanel.prototype.shouldFocus = function (index) {
        return this.state.focusIndex === index;
    };
    TimeSelectorPanel.prototype.onCustomFocus = function () {
        var _this = this;
        this.setState(function (prevState) {
            prevState.focusIndex = 0;
            _this._menu.index = 0;
            return prevState;
        });
    };
    TimeSelectorPanel.prototype.onKeyDown = function (e) {
        if (this._ul) {
            var index = this._menu.onKeyDown(e);
            this.setState({ focusIndex: index });
        }
    };
    TimeSelectorPanel.defaultProps = {};
    return TimeSelectorPanel;
}(React.Component));
export { TimeSelectorPanel };
//# sourceMappingURL=TimeSelectorPanel.js.map