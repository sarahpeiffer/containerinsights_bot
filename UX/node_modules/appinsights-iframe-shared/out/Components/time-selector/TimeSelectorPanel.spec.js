import { TimeSelectorPanel } from './TimeSelectorPanel';
import { TimeContext } from '../../TimeContext';
import { RelativeTimeButton } from './RelativeTimeButton';
import { CustomTimeButton } from './CustomTimeButton';
import { TestUtilities } from '../../TestUtilities';
var TimeSelectorPanelBuilder = /** @class */ (function () {
    function TimeSelectorPanelBuilder() {
        this.props = {
            onSelected: function (timeContext) { },
            onCancel: function () { },
            strings: {
                'timeRangeLastMinutes': 'last {0} minutes',
                'timeRangeLastHour': 'last hour',
                'timeRangeLastHours': 'last {0} hours',
                'timeRangeLastDays': 'last {0} days',
                'cancelDialogText': 'cancel',
                'title': 'Time Range',
                'commandSave': 'save',
                'searchTimeRangeCommandTitle': 'Time Range'
            },
            selected: null
        };
        spyOn(this.props, 'onSelected');
        spyOn(this.props, 'onCancel');
    }
    TimeSelectorPanelBuilder.prototype.withOnChange = function (c) {
        this.props.onChange = c;
        spyOn(this.props, 'onChange');
        return this;
    };
    TimeSelectorPanelBuilder.prototype.withEmptyStrings = function () {
        this.props.strings = {};
        return this;
    };
    TimeSelectorPanelBuilder.prototype.withSelected = function (t) {
        this.props.selected = t;
        return this;
    };
    TimeSelectorPanelBuilder.prototype.build = function () {
        var panel = new TimeSelectorPanel(this.props);
        spyOn(panel, 'setState').and.callFake(function (argFn) {
            panel.state = argFn(panel.state, panel.props);
        });
        return panel;
    };
    return TimeSelectorPanelBuilder;
}());
describe('TimeSelectorPanel', function () {
    var builder;
    beforeEach(function () {
        builder = new TimeSelectorPanelBuilder();
    });
    describe('onSelected', function () {
        it('should set validated state if valid undefined', function () {
            var panel = builder.build();
            panel.onSelected(new TimeContext(1000));
            expect(panel.setState).toHaveBeenCalledTimes(1);
            expect(panel.state.isValidated).toBe(true);
        });
        it('should set validated state if invalid', function () {
            var panel = builder.build();
            panel.onSelected(new TimeContext(1000), false);
            expect(panel.setState).toHaveBeenCalledTimes(1);
            expect(panel.state.isValidated).toBe(false);
        });
        it('should call onChange if onChange defined and valid', function () {
            var panel = builder.withOnChange(function () { }).build();
            var tc = new TimeContext(1000);
            panel.onSelected(tc);
            expect(panel.setState).toHaveBeenCalledTimes(1);
            expect(panel.state.isValidated).toBe(true);
            expect(builder.props.onChange).toHaveBeenCalledTimes(1);
            expect(builder.props.onChange).toHaveBeenCalledWith(tc);
        });
        it('should not call onChange if invalid', function () {
            var panel = builder.withOnChange(function () { }).build();
            var tc = new TimeContext(1000);
            panel.onSelected(tc, false);
            expect(panel.setState).toHaveBeenCalledTimes(1);
            expect(panel.state.isValidated).toBe(false);
            expect(builder.props.onChange).not.toHaveBeenCalled();
        });
    });
    describe('Render', function () {
        it('should have a title', function () {
            var panel = builder.build();
            var elements = panel.render();
            var title = TestUtilities.FindSingle(elements, function (element) {
                return element.props.className === 'panel-title';
            });
            expect(title.props.children.type).toBe('h2');
            expect(title.props.children.props.children).toBe(builder.props.strings['title']);
        });
        it('should have a last 30 minutes button', function () {
            var component = builder.build();
            spyOn(component, 'onSelected');
            var content = component.render();
            var button = TestUtilities.FindElements(content, function (element) {
                return element.type === RelativeTimeButton;
            })[0];
            expect(button.type).toBe(RelativeTimeButton);
            expect(button.props.value).toBe('last 30 minutes');
            expect(button.props.durationMs).toBe(60000 * 30);
            expect(button.props.isSelected).toBe(false);
            button.props.onSelected();
            expect(component.onSelected).toHaveBeenCalledTimes(1);
        });
        it('should select last 30 minutes button if selected', function () {
            var component = builder.withSelected(new TimeContext(60000 * 30)).build();
            var content = component.render();
            var button = TestUtilities.FindElements(content, function (element) {
                return element.type === RelativeTimeButton;
            })[0];
            expect(button.props.isSelected).toBe(true);
        });
        it('should have a last hour button', function () {
            var component = builder.build();
            spyOn(component, 'onSelected');
            var content = component.render();
            var button = TestUtilities.FindElements(content, function (element) {
                return element.type === RelativeTimeButton;
            })[1];
            expect(button.type).toBe(RelativeTimeButton);
            expect(button.props.value).toBe('last hour');
            expect(button.props.durationMs).toBe(60000 * 60);
            expect(button.props.isSelected).toBe(false);
            button.props.onSelected();
            expect(component.onSelected).toHaveBeenCalledTimes(1);
        });
        it('should select last hour button if selected', function () {
            var component = builder.withSelected(new TimeContext(60000 * 60)).build();
            var content = component.render();
            var button = TestUtilities.FindElements(content, function (element) {
                return element.type === RelativeTimeButton;
            })[1];
            expect(button.props.isSelected).toBe(true);
        });
        it('should have a last 4 hours button', function () {
            var component = builder.build();
            spyOn(component, 'onSelected');
            var content = component.render();
            var button = TestUtilities.FindElements(content, function (element) {
                return element.type === RelativeTimeButton;
            })[2];
            expect(button.type).toBe(RelativeTimeButton);
            expect(button.props.value).toBe('last 4 hours');
            expect(button.props.durationMs).toBe(60000 * 60 * 4);
            expect(button.props.isSelected).toBe(false);
            button.props.onSelected();
            expect(component.onSelected).toHaveBeenCalledTimes(1);
        });
        it('should select last 4 hours button if selected', function () {
            var component = builder.withSelected(new TimeContext(60000 * 60 * 4)).build();
            var content = component.render();
            var button = TestUtilities.FindElements(content, function (element) {
                return element.type === RelativeTimeButton;
            })[2];
            expect(button.props.isSelected).toBe(true);
        });
        it('should have a last 12 hours button', function () {
            var component = builder.build();
            spyOn(component, 'onSelected');
            var content = component.render();
            var button = TestUtilities.FindElements(content, function (element) {
                return element.type === RelativeTimeButton;
            })[3];
            expect(button.type).toBe(RelativeTimeButton);
            expect(button.props.value).toBe('last 12 hours');
            expect(button.props.durationMs).toBe(60000 * 60 * 12);
            expect(button.props.isSelected).toBe(false);
            button.props.onSelected();
            expect(component.onSelected).toHaveBeenCalledTimes(1);
        });
        it('should select last 12 hours button if selected', function () {
            var component = builder.withSelected(new TimeContext(60000 * 60 * 12)).build();
            var content = component.render();
            var button = TestUtilities.FindElements(content, function (element) {
                return element.type === RelativeTimeButton;
            })[3];
            expect(button.props.isSelected).toBe(true);
        });
        it('should have a last 24 hours button', function () {
            var component = builder.build();
            spyOn(component, 'onSelected');
            var content = component.render();
            var button = TestUtilities.FindElements(content, function (element) {
                return element.type === RelativeTimeButton;
            })[4];
            expect(button.type).toBe(RelativeTimeButton);
            expect(button.props.value).toBe('last 24 hours');
            expect(button.props.durationMs).toBe(60000 * 60 * 24);
            expect(button.props.isSelected).toBe(false);
            button.props.onSelected();
            expect(component.onSelected).toHaveBeenCalledTimes(1);
        });
        it('should select last 24 hours button if selected', function () {
            var component = builder.withSelected(new TimeContext(60000 * 60 * 24)).build();
            var content = component.render();
            var button = TestUtilities.FindElements(content, function (element) {
                return element.type === RelativeTimeButton;
            })[4];
            expect(button.props.isSelected).toBe(true);
        });
        it('should have a last 48 hours button', function () {
            var component = builder.build();
            spyOn(component, 'onSelected');
            var content = component.render();
            var button = TestUtilities.FindElements(content, function (element) {
                return element.type === RelativeTimeButton;
            })[5];
            expect(button.type).toBe(RelativeTimeButton);
            expect(button.props.value).toBe('last 48 hours');
            expect(button.props.durationMs).toBe(60000 * 60 * 48);
            expect(button.props.isSelected).toBe(false);
            button.props.onSelected();
            expect(component.onSelected).toHaveBeenCalledTimes(1);
        });
        it('should select last 48 hours button if selected', function () {
            var component = builder.withSelected(new TimeContext(60000 * 60 * 48)).build();
            var content = component.render();
            var button = TestUtilities.FindElements(content, function (element) {
                return element.type === RelativeTimeButton;
            })[5];
            expect(button.props.isSelected).toBe(true);
        });
        it('should have a last 3 days button', function () {
            var component = builder.build();
            spyOn(component, 'onSelected');
            var content = component.render();
            var button = TestUtilities.FindElements(content, function (element) {
                return element.type === RelativeTimeButton;
            })[6];
            expect(button.type).toBe(RelativeTimeButton);
            expect(button.props.value).toBe('last 3 days');
            expect(button.props.durationMs).toBe(60000 * 60 * 24 * 3);
            expect(button.props.isSelected).toBe(false);
            button.props.onSelected();
            expect(component.onSelected).toHaveBeenCalledTimes(1);
        });
        it('should select last 3 days button if selected', function () {
            var component = builder.withSelected(new TimeContext(60000 * 60 * 24 * 3)).build();
            var content = component.render();
            var button = TestUtilities.FindElements(content, function (element) {
                return element.type === RelativeTimeButton;
            })[6];
            expect(button.props.isSelected).toBe(true);
        });
        it('should have a last 7 days button', function () {
            var component = builder.build();
            spyOn(component, 'onSelected');
            var content = component.render();
            var button = TestUtilities.FindElements(content, function (element) {
                return element.type === RelativeTimeButton;
            })[7];
            expect(button.type).toBe(RelativeTimeButton);
            expect(button.props.value).toBe('last 7 days');
            expect(button.props.durationMs).toBe(60000 * 60 * 24 * 7);
            expect(button.props.isSelected).toBe(false);
            button.props.onSelected();
            expect(component.onSelected).toHaveBeenCalledTimes(1);
        });
        it('should select last 7 days button if selected', function () {
            var component = builder.withSelected(new TimeContext(60000 * 60 * 24 * 7)).build();
            var content = component.render();
            var button = TestUtilities.FindElements(content, function (element) {
                return element.type === RelativeTimeButton;
            })[7];
            expect(button.props.isSelected).toBe(true);
        });
        it('should have a last 30 days button', function () {
            var component = builder.build();
            spyOn(component, 'onSelected');
            var content = component.render();
            var button = TestUtilities.FindElements(content, function (element) {
                return element.type === RelativeTimeButton;
            })[8];
            expect(button.type).toBe(RelativeTimeButton);
            expect(button.props.value).toBe('last 30 days');
            expect(button.props.durationMs).toBe(60000 * 60 * 24 * 30);
            expect(button.props.isSelected).toBe(false);
            button.props.onSelected();
            expect(component.onSelected).toHaveBeenCalledTimes(1);
        });
        it('should select last 30 days button if selected', function () {
            var component = builder.withSelected(new TimeContext(60000 * 60 * 24 * 30)).build();
            var content = component.render();
            var button = TestUtilities.FindElements(content, function (element) {
                return element.type === RelativeTimeButton;
            })[8];
            expect(button.props.isSelected).toBe(true);
        });
        it('should have a custom range button', function () {
            var component = builder.build();
            spyOn(component, 'onSelected');
            var content = component.render();
            var button = TestUtilities.FindSingle(content, function (element) {
                return element.type === CustomTimeButton;
            });
            expect(button.type).toBe(CustomTimeButton);
            expect(button.props.value).toBe(component.state.selected);
            expect(button.props.isSelected).toBe(false);
            button.props.onSelected();
            expect(component.onSelected).toHaveBeenCalledTimes(1);
        });
        it('should select custom range button if TimeContext has an end time', function () {
            var component = builder.withSelected(new TimeContext(0, new Date())).build();
            var content = component.render();
            var button = TestUtilities.FindSingle(content, function (element) {
                return element.type === CustomTimeButton;
            });
            expect(button.props.isSelected).toBe(true);
        });
        it('should not have buttons if on change defined', function () {
            var component = builder.withOnChange(function () { }).build();
            var selected = new TimeContext(5);
            component.state.selected = selected;
            var content = component.render();
            var bar = TestUtilities.FindSingle(content, function (t) { return t.props.className.indexOf('panel-actionBar') >= 0; });
            expect(bar).toBeNull();
            var button = TestUtilities.FindSingle(content, function (t) { return t.props.className.indexOf('button-primary') >= 0; });
            expect(button).toBeNull();
            var cancelButton = TestUtilities.FindSingle(content, function (t) {
                return t.props.children === builder.props.strings['cancelDialogText'];
            });
            expect(cancelButton).toBeNull();
        });
        it('should have a save button', function () {
            var component = builder.build();
            var selected = new TimeContext(5);
            component.state.selected = selected;
            var content = component.render();
            var buttons = TestUtilities.FindElements(content, function (t) { return t.props.className.indexOf('button') >= 0; });
            var button = buttons[0];
            expect(button).not.toBeNull();
            expect(button.props.children).toBe(builder.props.strings['commandSave']);
            expect(button.props['aria-label']).toBe(builder.props.strings['commandSave']);
            expect(button.props['role']).toBe('button');
            expect(button.props['aria-disabled']).toBe(false);
            button.props.onClick();
            expect(builder.props.onSelected).toHaveBeenCalledWith(selected);
            expect(button.props.className.indexOf('button-disabled')).toBeLessThan(0);
        });
        it('should disable save button if selected is same as initial value', function () {
            var component = builder.withSelected(new TimeContext(5)).build();
            var selected = new TimeContext(5);
            component.state.selected = selected;
            var content = component.render();
            var buttons = TestUtilities.FindElements(content, function (t) { return t.props.className.indexOf('button') >= 0; });
            var button = buttons[0];
            expect(button).not.toBeNull();
            expect(button.props.children).toBe(builder.props.strings['commandSave']);
            button.props.onClick();
            expect(builder.props.onSelected).toHaveBeenCalledTimes(0);
            expect(button.props.className.indexOf('disabled')).toBeGreaterThanOrEqual(0);
        });
        it('should disable save button if validation state is false', function () {
            var component = builder.build();
            var selected = new TimeContext(5);
            component.state.selected = selected;
            component.state.isValidated = false;
            var content = component.render();
            var buttons = TestUtilities.FindElements(content, function (t) { return t.props.className.indexOf('button') >= 0; });
            var button = buttons[0];
            expect(button).not.toBeNull();
            expect(button.props.children).toBe(builder.props.strings['commandSave']);
            button.props.onClick();
            expect(builder.props.onSelected).toHaveBeenCalledTimes(0);
            expect(button.props.className.indexOf('disabled')).toBeGreaterThanOrEqual(0);
        });
        it('should have a cancel button', function () {
            var component = builder.build();
            var content = component.render();
            var button = TestUtilities.FindSingle(content, function (t) {
                return t.props.children === builder.props.strings['cancelDialogText'];
            });
            expect(button).not.toBeNull();
            expect(button.type).toBe('div');
            expect(button.props['aria-label']).toBe(builder.props.strings['cancelDialogText']);
            expect(button.props['role']).toBe('button');
            button.props.onClick();
            expect(builder.props.onCancel).toHaveBeenCalledTimes(1);
        });
        it('should not throw if strings are empty', function () {
            var component = builder.withEmptyStrings().build();
            component.render();
        });
    });
});
//# sourceMappingURL=TimeSelectorPanel.spec.js.map