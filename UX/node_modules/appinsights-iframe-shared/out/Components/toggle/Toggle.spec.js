import { Toggle } from './Toggle';
import { TestUtilities } from '../../TestUtilities';
import { RadioGroup } from '../radiogroup';
var ToggleBuilder = /** @class */ (function () {
    function ToggleBuilder() {
        this.props = {
            selected: 'selected',
            label: 'label',
            leftOption: {
                text: 'left text',
                value: 'left value'
            },
            rightOption: {
                text: 'right text',
                value: 'right value'
            },
            onSelected: function () { }
        };
    }
    ToggleBuilder.prototype.withSelected = function (selected) {
        this.props.selected = selected;
        return this;
    };
    ToggleBuilder.prototype.withLabel = function (label) {
        this.props.label = label;
        return this;
    };
    ToggleBuilder.prototype.withLeftOption = function (leftOption) {
        this.props.leftOption = leftOption;
        return this;
    };
    ToggleBuilder.prototype.withRightOption = function (rightOption) {
        this.props.rightOption = rightOption;
        return this;
    };
    ToggleBuilder.prototype.build = function () {
        return Toggle(this.props);
    };
    return ToggleBuilder;
}());
describe('Toggle', function () {
    var builder;
    beforeEach(function () {
        builder = new ToggleBuilder();
    });
    it('should render an empty div with invalid props', function () {
        var toggle = builder.withLeftOption({
            text: null,
            value: null
        }).build();
        var radioGroup = TestUtilities.FindElements(toggle, function (t) { return t.type === RadioGroup; });
        expect(radioGroup.length).toBe(0);
        var theDiv = TestUtilities.FindSingle(toggle, function (t) { return t.type === 'div'; });
        expect(theDiv).not.toBeNull();
    });
    it('should render a RadioGroup with nothing selected', function () {
        var toggle = builder.build();
        var radioGroup = TestUtilities.FindSingle(toggle, function (t) { return t.type === RadioGroup; });
        expect(radioGroup).not.toBeNull();
        expect(radioGroup.props.items.length).toBe(2);
        for (var _i = 0, _a = radioGroup.props.items; _i < _a.length; _i++) {
            var item = _a[_i];
            var selected = TestUtilities.FindSingle(item.content, function (t) { return t.props.className.includes('selected'); });
            expect(selected).toBeNull();
        }
    });
    it('should render a RadioGroup with the left option selected', function () {
        var toggle = builder.withSelected('left value').build();
        var radioGroup = TestUtilities.FindSingle(toggle, function (t) { return t.type === RadioGroup; });
        expect(radioGroup).not.toBeNull();
        var items = radioGroup.props.items;
        var left = TestUtilities.FindSingle(items[0].content, function (t) { return t.props.className.includes('selected'); });
        expect(left).not.toBeNull();
        var right = TestUtilities.FindSingle(items[1].content, function (t) { return t.props.className.includes('selected'); });
        expect(right).toBeNull();
    });
    it('should render a RadioGroup with the right option selected', function () {
        var toggle = builder.withSelected('right value').build();
        var radioGroup = TestUtilities.FindSingle(toggle, function (t) { return t.type === RadioGroup; });
        expect(radioGroup).not.toBeNull();
        var items = radioGroup.props.items;
        var left = TestUtilities.FindSingle(items[0].content, function (t) { return t.props.className.includes('selected'); });
        expect(left).toBeNull();
        var right = TestUtilities.FindSingle(items[1].content, function (t) { return t.props.className.includes('selected'); });
        expect(right).not.toBeNull();
    });
});
//# sourceMappingURL=Toggle.spec.js.map