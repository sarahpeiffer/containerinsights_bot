import * as React from 'react';
import { ZoomButton } from './ZoomButton';
import { TestUtilities } from '../../TestUtilities';
describe('ZoomButton', function () {
    var props;
    var zoomButton;
    beforeEach(function () {
        props = {
            icon: React.createElement('a'),
            onClick: function () { },
            title: 'myTitle'
        };
        zoomButton = new ZoomButton(props);
        spyOn(zoomButton, 'setState').and.callFake(function (s) {
            zoomButton.state = TestUtilities.SetState(zoomButton.state, zoomButton.props, s);
        });
    });
    it('should have a clickable button with icon', function () {
        var rendered = zoomButton.render();
        expect(rendered.props.className).toBe('zoom-button');
        expect(rendered.props.role).toBe('button');
        expect(rendered.props.title).toBe(props.title);
        var svg = rendered.props.children;
        expect(svg.props.className).toBe('outline');
        expect(svg.type).toBe('svg');
        var fill = svg.props.children[0];
        expect(fill.type).toBe('circle');
        expect(fill.props.r).toBe(18);
        expect(fill.props.cx).toBe(19);
        expect(fill.props.cy).toBe(19);
        var circle = svg.props.children[1];
        expect(circle.type).toBe('circle');
        expect(circle.props.r).toBe(18);
        expect(circle.props.cx).toBe(19);
        expect(circle.props.cy).toBe(19);
        expect(circle.props.className).toBe('highlight');
        var icon = svg.props.children[2];
        expect(icon.type).toBe('svg');
        expect(icon.props.height).toBe(16);
        expect(icon.props.width).toBe(16);
        expect(icon.props.x).toBe(12);
        expect(icon.props.y).toBe(12);
        expect(icon.props.className).toBe('icon');
        expect(icon.props.children).toBe(props.icon);
    });
    it('should apply mouse-down class if enter down', function () {
        var rendered = zoomButton.render();
        var onKeyDown = rendered.props.onKeyDown;
        onKeyDown({ key: 'Enter' });
        rendered = zoomButton.render();
        expect(rendered.props.className.indexOf('mouse-down')).toBeGreaterThanOrEqual(0);
    });
    it('should apply mouse-down class if spacebar down', function () {
        var rendered = zoomButton.render();
        var onKeyDown = rendered.props.onKeyDown;
        onKeyDown({ key: ' ' });
        rendered = zoomButton.render();
        expect(rendered.props.className.indexOf('mouse-down')).toBeGreaterThanOrEqual(0);
    });
    it('should remove mouse-down class if enter up', function () {
        var rendered = zoomButton.render();
        var onKeyDown = rendered.props.onKeyDown;
        onKeyDown({ key: ' ' });
        var onKeyUp = rendered.props.onKeyUp;
        onKeyUp({ key: 'Enter' });
        rendered = zoomButton.render();
        expect(rendered.props.className.indexOf('mouse-down')).toBeLessThan(0);
    });
    it('should remove mouse-down class if spacebar up', function () {
        var rendered = zoomButton.render();
        var onKeyDown = rendered.props.onKeyDown;
        onKeyDown({ key: ' ' });
        var onKeyUp = rendered.props.onKeyUp;
        onKeyUp({ key: ' ' });
        rendered = zoomButton.render();
        expect(rendered.props.className.indexOf('mouse-down')).toBeLessThan(0);
    });
});
//# sourceMappingURL=ZoomButton.spec.js.map