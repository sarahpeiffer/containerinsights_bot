import { Store } from 'flux/utils';
import { Dispatcher } from 'flux';
import { LoadingAction, ReadyAction, FailedAction } from './DataActions';
export interface BasicDataStoreItem<T> {
    isLoading: boolean;
    isFailed: boolean;
    data: T;
    syncId: number;
}
export interface BasicDataStoreItems {
    [key: string]: BasicDataStoreItem<any>;
}
export interface BasicDataStoreContract<T, TStore> {
    tLoading: new (syncId: number, queryId: string, queryName: string) => void;
    tReady: new (data: T, syncId: number, queryId: string, queryName: string) => void;
    tFailed: new (error: any, syncId: number, queryName: string) => void;
    name: string;
    onReadyTransform: (action: ReadyAction<T>, state: BasicDataStoreItems) => TStore;
}
export declare class BasicDataStore<T extends BasicDataStoreItems> extends Store<LoadingAction | ReadyAction<any> | FailedAction> {
    private _state;
    private _dataTypes;
    constructor(dispatcher: Dispatcher<any>, dataTypes: BasicDataStoreContract<any, any>[]);
    getInitialState(): T;
    getState(): T;
    reduce(state: BasicDataStoreItems, action: LoadingAction | ReadyAction<any> | FailedAction): T;
    __onDispatch(payload: LoadingAction | ReadyAction<any> | FailedAction): void;
}
