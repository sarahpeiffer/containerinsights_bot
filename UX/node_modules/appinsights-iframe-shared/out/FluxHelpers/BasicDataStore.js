import * as tslib_1 from "tslib";
import { Store } from 'flux/utils';
var BasicDataStore = /** @class */ (function (_super) {
    tslib_1.__extends(BasicDataStore, _super);
    function BasicDataStore(dispatcher, dataTypes) {
        var _this = _super.call(this, dispatcher) || this;
        _this._dataTypes = dataTypes;
        _this._state = _this.getInitialState();
        return _this;
    }
    BasicDataStore.prototype.getInitialState = function () {
        var state = {};
        this._dataTypes.forEach(function (dataType) {
            state[dataType.name] = {
                isLoading: true,
                isFailed: false,
                data: null,
                syncId: 0
            };
        });
        return state;
    };
    BasicDataStore.prototype.getState = function () {
        return this._state;
    };
    BasicDataStore.prototype.reduce = function (state, action) {
        this._dataTypes.forEach(function (dataType) {
            var storeItem = state[dataType.name];
            if (action instanceof dataType.tLoading) {
                if (action.syncId > storeItem.syncId) {
                    state = Object.assign({}, state);
                    storeItem = Object.assign({}, storeItem);
                    storeItem.isFailed = false;
                    storeItem.isLoading = true;
                    state[dataType.name] = storeItem;
                }
            }
            else if (action instanceof dataType.tReady) {
                var readyAction = action;
                state = Object.assign({}, state);
                storeItem = Object.assign({}, storeItem);
                storeItem.isFailed = false;
                storeItem.isLoading = false;
                storeItem.data = dataType.onReadyTransform(readyAction, state);
                storeItem.syncId = action.syncId;
                state[dataType.name] = storeItem;
            }
            else if (action instanceof dataType.tFailed) {
                state = Object.assign({}, state);
                storeItem = Object.assign({}, storeItem);
                storeItem.isFailed = true;
                storeItem.isLoading = false;
                storeItem.syncId = action.syncId;
                state[dataType.name] = storeItem;
            }
        });
        return state;
    };
    BasicDataStore.prototype.__onDispatch = function (payload) {
        var state = this.reduce(this._state, payload);
        if (state !== this._state) {
            this._state = state;
            this.__emitChange();
        }
    };
    return BasicDataStore;
}(Store));
export { BasicDataStore };
//# sourceMappingURL=BasicDataStore.js.map