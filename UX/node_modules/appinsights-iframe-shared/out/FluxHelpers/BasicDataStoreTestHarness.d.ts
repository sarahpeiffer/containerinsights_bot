import { BasicDataStoreItem, BasicDataStore } from './BasicDataStore';
import { LoadingAction, ReadyAction, FailedAction } from './DataActions';
export declare class BasicDataStoreTestHarness {
    private store;
    private item;
    private data;
    private initialState;
    constructor(store: BasicDataStore<any>);
    verify(actual: BasicDataStoreItem<any>, expected: BasicDataStoreItem<any>, verifyData?: (actualData: any, actionData: any) => void): void;
    verifyBasicLoading(name: string, tloading: new (syncId: number, queryId: string, queryName: string) => LoadingAction): void;
    verifyLoadingAlreadyReceivedReady(name: string, tloading: new (syncId: number, queryId: string, queryName: string) => LoadingAction, tready: new (data: any, syncId: number, queryId: string, queryName: string) => ReadyAction<any>): void;
    verifyLoadingAlreadyReceivedFailed(name: string, tloading: new (syncId: number, queryId: string, queryName: string) => LoadingAction, tfailed: new (error: any, syncId: number, queryName: string) => FailedAction): void;
    verifyFailed(name: string, tfailed: new (error: any, syncId: number, queryName: string) => FailedAction): void;
    verifyReady(name: string, tready: new (data: any, syncId: number, queryId: string, queryName: string) => ReadyAction<any>, verifyData?: (actualData: any, actionData: any) => void, actionData?: any): void;
    verifyAll(actions: {
        name: string;
        tloading: new (syncId: number, queryId: string, queryName: string) => LoadingAction;
        tready: new (data: any, syncId: number, queryId: string, queryName: string) => ReadyAction<any>;
        tfailed: new (error: any, syncId: number, queryName: string) => FailedAction;
    }[]): void;
}
