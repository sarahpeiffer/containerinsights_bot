var BasicDataStoreTestHarness = /** @class */ (function () {
    function BasicDataStoreTestHarness(store) {
        this.item = null;
        this.store = store;
        this.data = {};
        this.item = {
            data: this.data,
            isFailed: false,
            isLoading: true,
            syncId: 0
        };
        this.initialState = this.store.getInitialState();
    }
    BasicDataStoreTestHarness.prototype.verify = function (actual, expected, verifyData) {
        if (!verifyData) {
            expect(actual.data).toBe(expected.data);
        }
        else {
            verifyData(actual.data, expected.data);
        }
        expect(actual.isFailed).toBe(expected.isFailed);
        expect(actual.isLoading).toBe(expected.isLoading);
        expect(actual.syncId).toBe(expected.syncId);
    };
    BasicDataStoreTestHarness.prototype.verifyBasicLoading = function (name, tloading) {
        this.item.isLoading = false;
        this.initialState[name] = this.item;
        var expected = Object.assign({}, this.item, { isLoading: true });
        var result = this.store.reduce(this.initialState, new tloading(1, 'q', 'q'));
        expect(result).not.toBe(this.initialState);
        expect(result[name]).not.toBe(this.initialState[name]);
        this.verify(result[name], expected);
    };
    BasicDataStoreTestHarness.prototype.verifyLoadingAlreadyReceivedReady = function (name, tloading, tready) {
        var state = this.store.reduce(this.initialState, new tready({}, 1, 'q', 'q'));
        expect(state[name].isLoading).toBe(false);
        var result = this.store.reduce(state, new tloading(1, 'q', 'q'));
        expect(result).toBe(state);
    };
    BasicDataStoreTestHarness.prototype.verifyLoadingAlreadyReceivedFailed = function (name, tloading, tfailed) {
        var state = this.store.reduce(this.initialState, new tfailed({}, 1, 'q'));
        expect(state[name].isLoading).toBe(false);
        var result = this.store.reduce(state, new tloading(1, 'q', 'q'));
        expect(result).toBe(state);
    };
    BasicDataStoreTestHarness.prototype.verifyFailed = function (name, tfailed) {
        this.initialState[name] = this.item;
        var expected = Object.assign({}, this.item, { isFailed: true, isLoading: false, syncId: 1 });
        var result = this.store.reduce(this.initialState, new tfailed({}, 1, 'q'));
        expect(result).not.toBe(this.initialState);
        expect(result[name]).not.toBe(this.initialState[name]);
        this.verify(result[name], expected);
    };
    BasicDataStoreTestHarness.prototype.verifyReady = function (name, tready, verifyData, actionData) {
        this.initialState[name] = this.item;
        var newData = actionData || {};
        var expected = Object.assign({}, this.item, { isLoading: false, data: newData, syncId: 1 });
        var result = this.store.reduce(this.initialState, new tready(newData, 1, 'q', 'q'));
        expect(result).not.toBe(this.initialState);
        expect(result[name]).not.toBe(this.initialState[name]);
        this.verify(result[name], expected, verifyData);
    };
    BasicDataStoreTestHarness.prototype.verifyAll = function (actions) {
        var _this = this;
        actions.forEach(function (action) {
            _this.verifyBasicLoading(action.name, action.tloading);
            _this.verifyLoadingAlreadyReceivedFailed(action.name, action.tloading, action.tfailed);
            _this.verifyLoadingAlreadyReceivedReady(action.name, action.tloading, action.tready);
            _this.verifyFailed(action.name, action.tfailed);
            _this.verifyReady(action.name, action.tready);
        });
    };
    return BasicDataStoreTestHarness;
}());
export { BasicDataStoreTestHarness };
//# sourceMappingURL=BasicDataStoreTestHarness.js.map