import * as tslib_1 from "tslib";
import { ReduceStore } from 'flux/utils';
import { Utils } from '../Utils';
var TelemetryOperationStore = /** @class */ (function (_super) {
    tslib_1.__extends(TelemetryOperationStore, _super);
    function TelemetryOperationStore(dispatcher, telemetryContext, getCustomProps) {
        var _this = _super.call(this, dispatcher) || this;
        _this._getCustomProps = null;
        _this._context = telemetryContext;
        _this._getCustomProps = getCustomProps;
        return _this;
    }
    TelemetryOperationStore.prototype.reduce = function (state, action) {
        if (action.operationName) {
            state = Object.assign({}, state);
            state.operationId = Utils.RandomGuid();
            this._context.StartOperation(action.operationName, state.operationId);
            var customProperties = this._getCustomProps ? this._getCustomProps(state.operationId) : {};
            if (action.change) {
                customProperties.Change = action.change;
            }
            this._context.RecordClick(action.operationName, customProperties);
        }
        else {
            // if we didn't start a new operation, refresh the custom properties with the current state,
            // so we can get the latest ones by the time the operation is completed.
            this._context.UpdateCustomProps(state.operationId, this._getCustomProps(state.operationId));
        }
        return state;
    };
    return TelemetryOperationStore;
}(ReduceStore));
export { TelemetryOperationStore };
//# sourceMappingURL=TelemetryOperationStore.js.map