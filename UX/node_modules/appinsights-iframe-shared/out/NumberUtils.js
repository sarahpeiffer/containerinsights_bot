import { Utils } from './Utils';
import { TimeConstants } from './TimeContext';
import { TimeUnit } from './TimeUnit';
/**
 * Exposes functions that can be used to manipulate Numbers.
 */
export function formatWithSingleDecimalAndUnits(value, strings) {
    // This function is intended for whole numbers, so round it off
    value = Math.round(value);
    // Examples:
    // 563: 563
    // 999: 999
    if (value < 1E3) {
        return { value: value.toString(), unit: '' };
    }
    // Examples:
    // 5623: 5.6K
    // 7988: 8.0K
    // 9997: 10K (fall through to the next case)
    if (value < 0.995 * 1E4) {
        return { value: (value / 1E3).toFixed(1), unit: strings.unitKilo };
    }
    // Examples:
    // 56235: 23K
    // 799820: 800K
    // 999200: 999K
    // 999700: 1.0M (fall through to the next case)
    if (value < 0.9995 * 1E6) {
        return { value: (value / 1E3).toFixed(0), unit: strings.unitKilo };
    }
    // Examples:
    // 5623000: 5.6M
    // 7988000: 8.0M
    // 9997000: 10M (fall through to the next case)
    if (value < 0.995 * 1E7) {
        return { value: (value / 1E6).toFixed(1), unit: strings.unitMega };
    }
    return { value: (value / 1E6).toFixed(0), unit: strings.unitMega };
}
export function calculateThroughput(count, ms) {
    var seconds = ms / TimeConstants.second;
    var minutes = ms / TimeConstants.minute;
    var hours = ms / TimeConstants.hour;
    var days = ms / TimeConstants.day;
    var throughput = count / seconds;
    var unit = TimeUnit.Seconds;
    if (throughput < 1) {
        throughput = count / minutes;
        unit = TimeUnit.Minutes;
    }
    if (throughput < 1) {
        throughput = count / hours;
        unit = TimeUnit.Hours;
    }
    if (throughput < 1) {
        throughput = count / days;
        unit = TimeUnit.Days;
    }
    return {
        value: throughput,
        unit: unit
    };
}
/**
 *  Gets time range in the format of hours, minutes and seconds: e.g. 1 mins 50 s, 100 ms, 1 hr 5 mins, 1.23 s
 *
 * @param {number} milliseconds - Duration of the time range in milliseconds.
 * @return {string} - Formatted time range value e.g. 1 mins 50 s.
 */
export function getFormattedTimeRange(milliseconds, strings) {
    var range = segmentMillisecondTimeRange(milliseconds);
    if (!range.milliseconds && !range.seconds && !range.minutes && !range.hours && !range.days) {
        return Utils.GetValueOrDefault(strings, 'millisecondsAbbr', '').format('0');
    }
    if (!range.days && !range.hours && !range.minutes && (!range.seconds || range.seconds < 1)) {
        return Utils.GetValueOrDefault(strings, 'millisecondsAbbr', '').format(to1DecimalIfNeeded(range.milliseconds));
    }
    if (!range.days && !range.hours && !range.minutes) {
        return Utils.GetValueOrDefault(strings, 'secondsAbbr', '').format(to1DecimalIfNeeded(range.seconds));
    }
    if (!range.days && !range.hours) {
        if (range.seconds < 1) {
            return '{0}'.format(range.minutes <= 1 ?
                Utils.GetValueOrDefault(strings, 'minuteAbbr', '').format(range.minutes.toString()) :
                Utils.GetValueOrDefault(strings, 'minutesAbbr', '').format(range.minutes.toString()));
        }
        else {
            return '{0} {1}'.format(range.minutes <= 1 ?
                Utils.GetValueOrDefault(strings, 'minuteAbbr', '').format(range.minutes.toString()) :
                Utils.GetValueOrDefault(strings, 'minutesAbbr', '').format(range.minutes.toString()), Utils.GetValueOrDefault(strings, 'secondsAbbr', '').format(range.seconds.toFixed(0)));
        }
    }
    if (!range.days) {
        if (range.minutes < 1) {
            return '{0}'.format((range.hours <= 1 ?
                Utils.GetValueOrDefault(strings, 'hourAbbr', '').format(range.hours.toString()) :
                Utils.GetValueOrDefault(strings, 'hoursAbbr', '').format(range.hours.toString())));
        }
        else {
            return '{0} {1}'.format(range.hours <= 1 ?
                Utils.GetValueOrDefault(strings, 'hourAbbr', '').format(range.hours.toString()) :
                Utils.GetValueOrDefault(strings, 'hoursAbbr', '').format(range.hours.toString()), range.minutes <= 1 ?
                Utils.GetValueOrDefault(strings, 'minuteAbbr', '').format(range.minutes.toString()) :
                Utils.GetValueOrDefault(strings, 'minutesAbbr', '').format(range.minutes.toString()));
        }
    }
    if (range.hours < 1) {
        return '{0}'.format(range.days <= 1 ?
            Utils.GetValueOrDefault(strings, 'dayAbbr', '').format(range.days.toString()) :
            Utils.GetValueOrDefault(strings, 'daysAbbr', '').format(range.days.toString()));
    }
    return '{0} {1}'.format(range.days <= 1 ?
        Utils.GetValueOrDefault(strings, 'dayAbbr', '').format(range.days.toString()) :
        Utils.GetValueOrDefault(strings, 'daysAbbr', '').format(range.days.toString()), range.hours <= 1 ?
        Utils.GetValueOrDefault(strings, 'hourAbbr', '').format(range.hours.toString()) :
        Utils.GetValueOrDefault(strings, 'hoursAbbr', '').format(range.hours.toString()));
}
export function to1DecimalIfNeeded(value) {
    if (Math.abs(parseFloat(value.toFixed(0)) - value) >= 0.05) {
        return value.toFixed(1);
    }
    else {
        return value.toFixed(0);
    }
}
export function segmentMillisecondTimeRange(durationMs) {
    var days = Math.floor(durationMs / TimeConstants.day);
    durationMs -= days * TimeConstants.day;
    var hours = Math.floor(durationMs / TimeConstants.hour);
    durationMs -= hours * TimeConstants.hour;
    var minutes = Math.floor(durationMs / TimeConstants.minute);
    durationMs -= minutes * TimeConstants.minute;
    var seconds = durationMs / TimeConstants.second;
    var milliseconds = durationMs;
    return {
        milliseconds: milliseconds,
        seconds: seconds,
        minutes: minutes,
        hours: hours,
        days: days
    };
}
export function getDurationString(time, strings) {
    var displayNumber = function (value) {
        if (Math.floor(value) === value) {
            return "" + value;
        }
        return "" + value.toFixed(1);
    };
    if (time == null) {
        return '';
    }
    if (time === 0) {
        return '0';
    }
    if (time >= TimeConstants.day) {
        return Utils.GetValueOrDefault(strings, 'daysAbbr', '').format(displayNumber(time / TimeConstants.day));
    }
    if (time >= TimeConstants.hour) {
        return Utils.GetValueOrDefault(strings, 'hoursAbbr', '').format(displayNumber(time / TimeConstants.hour));
    }
    if (time >= TimeConstants.minute) {
        return Utils.GetValueOrDefault(strings, 'minutesAbbr', '').format(displayNumber(time / TimeConstants.minute));
    }
    if (time >= TimeConstants.second) {
        return Utils.GetValueOrDefault(strings, 'secondsAbbr', '').format(displayNumber(time / TimeConstants.second));
    }
    return Utils.GetValueOrDefault(strings, 'millisecondsAbbr', '').format(displayNumber(time));
}
//# sourceMappingURL=NumberUtils.js.map