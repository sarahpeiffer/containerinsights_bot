/**
 * Service for managing browser visibility through the Visibility API. Can be used to add telemetry
 * property indicating whether the window was in focus at the time of the event.
 */
var BrowserVisibilityService = /** @class */ (function () {
    function BrowserVisibilityService() {
        this._subscriptions = [];
        this._initializeSubscriptions();
    }
    /**
     * Register a handler for when browser visibility changes. The handler will be triggered immediately
     * with current document visibility.
     */
    BrowserVisibilityService.prototype.RegisterOnVisibilityChange = function (handler) {
        this._subscriptions.push(handler);
        handler(!document.hidden);
    };
    /**
     * Disposes of all document listeners created by the service
     */
    BrowserVisibilityService.prototype.Dispose = function () {
        document.removeEventListener(this._unsubscribeToken.event, this._unsubscribeToken.handler);
    };
    BrowserVisibilityService.prototype._initializeSubscriptions = function () {
        var onChange = this._onChange.bind(this);
        var eventName = 'visibilitychange';
        document.addEventListener(eventName, onChange);
        this._unsubscribeToken = { event: eventName, handler: onChange };
    };
    BrowserVisibilityService.prototype._onChange = function () {
        this._subscriptions.forEach(function (s) {
            s(!document.hidden);
        });
    };
    return BrowserVisibilityService;
}());
export { BrowserVisibilityService };
//# sourceMappingURL=BrowserVisibilityService.js.map