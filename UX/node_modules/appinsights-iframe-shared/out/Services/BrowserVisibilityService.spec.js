import { BrowserVisibilityService } from './BrowserVisibilityService';
describe('BrowserVisibilityService', function () {
    describe('ctor', function () {
        it('should init subscription for visibilitychange', function () {
            spyOn(document, 'addEventListener');
            var service = new BrowserVisibilityService();
            expect(document.addEventListener).toHaveBeenCalledTimes(1);
            var args = document.addEventListener.calls.mostRecent().args;
            expect(service['_unsubscribeToken'].event).toBe('visibilitychange');
            expect(service['_unsubscribeToken'].handler).toBe(args[1]);
            expect(args[0]).toBe('visibilitychange');
            var sb1 = {
                call: function (hidden) {
                }
            };
            var sb2 = {
                call: function (hidden) {
                }
            };
            spyOn(sb1, 'call');
            spyOn(sb2, 'call');
            service['_subscriptions'] = [sb1.call, sb2.call];
            args[1]();
            expect(sb1.call).toHaveBeenCalledTimes(1);
            expect(sb2.call).toHaveBeenCalledTimes(1);
            expect(sb1.call).toHaveBeenCalledWith(!document.hidden);
            expect(sb2.call).toHaveBeenCalledWith(!document.hidden);
        });
    });
    describe('Dispose', function () {
        it('should remove event listener', function () {
            spyOn(document, 'removeEventListener');
            spyOn(document, 'addEventListener');
            var service = new BrowserVisibilityService();
            service.Dispose();
            expect(document.removeEventListener).toHaveBeenCalledTimes(1);
            expect(document.removeEventListener).toHaveBeenCalledWith(service['_unsubscribeToken'].event, service['_unsubscribeToken'].handler);
        });
    });
    describe('RegisterOnVisibilityChange', function () {
        it('should trigger subscription immediately', function () {
            var sb1 = {
                call: function (hidden) {
                }
            };
            spyOn(sb1, 'call');
            var service = new BrowserVisibilityService();
            service.RegisterOnVisibilityChange(sb1.call);
            expect(service['_subscriptions'].length).toBe(1);
            expect(service['_subscriptions'][0]).toBe(sb1.call);
            expect(sb1.call).toHaveBeenCalledTimes(1);
            expect(sb1.call).toHaveBeenCalledWith(!document.hidden);
        });
    });
});
//# sourceMappingURL=BrowserVisibilityService.spec.js.map