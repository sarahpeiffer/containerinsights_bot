import { SharedIFrameMessages } from '../SharedIFrameMessages';
var CommunicationChannel = /** @class */ (function () {
    function CommunicationChannel(messageService, localizationService, telemetryService) {
        this._portalMessageService = messageService;
        this._localizationService = localizationService;
        this._telemetryService = telemetryService;
    }
    /**
     * Set up communication between iframe and view model on the Portal side.
     * This method is designed to work with ReactIFrameViewModel class.
     */
    CommunicationChannel.prototype.Initialize = function (setInstanceId, sendReady) {
        var _this = this;
        if (sendReady === void 0) { sendReady = true; }
        var messageSubscribers = [];
        messageSubscribers.push(this._telemetryService.Register(this._portalMessageService, SharedIFrameMessages.TelemetryProperties));
        messageSubscribers.push(this._localizationService.Register(this._portalMessageService, SharedIFrameMessages.LocalizationStrings));
        var previousTheme = '';
        messageSubscribers.push(this._portalMessageService.SubscribeMessage(SharedIFrameMessages.ThemeInfo, function (theme) {
            var body = document.getElementsByTagName('body').item(0);
            var className = body.getAttribute('class') || '';
            var classes = className.split(' ');
            var prevClasses = previousTheme.split(' ');
            for (var _i = 0, prevClasses_1 = prevClasses; _i < prevClasses_1.length; _i++) {
                var prev = prevClasses_1[_i];
                for (var i = 0; i < classes.length; i++) {
                    if (classes[i] === prev) {
                        classes.splice(i, 1);
                        i--;
                    }
                }
            }
            classes = classes.concat(theme.split(' '));
            body.setAttribute('class', classes.join(' '));
            previousTheme = theme;
        }));
        if (setInstanceId) {
            messageSubscribers.push(this._portalMessageService.SubscribeMessage(SharedIFrameMessages.InstanceId, function (iid) {
                _this._portalMessageService.PostMessage(SharedIFrameMessages.Ready, setInstanceId(iid));
            }));
        }
        if (sendReady) {
            this.sendReady();
        }
        return messageSubscribers;
    };
    CommunicationChannel.prototype.sendReady = function () {
        this._portalMessageService.PostMessageWithNoInstanceId(SharedIFrameMessages.Ready);
        this._portalMessageService.PostMessageWithNoInstanceId(SharedIFrameMessages.RevealContent);
        this._portalMessageService.PostMessageWithNoInstanceId(SharedIFrameMessages.InitializationComplete);
    };
    return CommunicationChannel;
}());
export { CommunicationChannel };
//# sourceMappingURL=CommunicationChannel.js.map