import { CommunicationChannel } from './CommunicationChannel';
import { PortalMessageService } from './PortalMessageService';
import { TelemetryService } from './TelemetryService';
import { LocalizationService } from './LocalizationService';
import { SharedIFrameMessages } from '../SharedIFrameMessages';
import { TestUtilities } from '../TestUtilities';
var CommunicationChannelBuilder = /** @class */ (function () {
    function CommunicationChannelBuilder() {
        this.portalMessageService = TestUtilities.Mock(PortalMessageService);
        this.telemetryService = TestUtilities.Mock(TelemetryService);
        this.localizationService = TestUtilities.Mock(LocalizationService);
    }
    CommunicationChannelBuilder.prototype.build = function () {
        return new CommunicationChannel(this.portalMessageService, this.localizationService, this.telemetryService);
    };
    return CommunicationChannelBuilder;
}());
describe('CommunicationChannel', function () {
    var builder;
    beforeEach(function () {
        builder = new CommunicationChannelBuilder();
    });
    describe('Initialize', function () {
        it('should register telemetry service', function () {
            var channel = builder.build();
            channel.Initialize(function (id) { });
            expect(builder.telemetryService.Register)
                .toHaveBeenCalledWith(builder.portalMessageService, SharedIFrameMessages.TelemetryProperties);
        });
        it('should register localization service', function () {
            var channel = builder.build();
            channel.Initialize(function (id) { });
            expect(builder.localizationService.Register)
                .toHaveBeenCalledWith(builder.portalMessageService, SharedIFrameMessages.LocalizationStrings);
        });
        it('should subscribe to theme changes', function () {
            var channel = builder.build();
            channel.Initialize(function (id) { });
            expect(builder.portalMessageService.SubscribeMessage).toHaveBeenCalledWith(SharedIFrameMessages.ThemeInfo, jasmine.anything());
            var handler = builder.portalMessageService.SubscribeMessage.calls.first().args[1];
            var body = {
                getAttribute: function (attr) { },
                setAttribute: function (attr, val) { }
            };
            spyOn(body, 'getAttribute').and.callFake(function (attr) {
                return 'myclass';
            });
            spyOn(body, 'setAttribute');
            spyOn(document, 'getElementsByTagName').and.returnValue({ item: function () { return body; } });
            handler('dark');
            expect(body.getAttribute).toHaveBeenCalledTimes(1);
            expect(body.getAttribute).toHaveBeenCalledWith('class');
            expect(body.setAttribute).toHaveBeenCalledWith('class', 'myclass dark');
        });
        it('should assign theme class with existing class', function () {
            var channel = builder.build();
            channel.Initialize(function (id) { });
            expect(builder.portalMessageService.SubscribeMessage).toHaveBeenCalledWith(SharedIFrameMessages.ThemeInfo, jasmine.anything());
            var handler = builder.portalMessageService.SubscribeMessage.calls.first().args[1];
            var body = {
                getAttribute: function (attr) { },
                setAttribute: function (attr, val) { }
            };
            spyOn(body, 'getAttribute').and.callFake(function (attr) {
                return 'myclass';
            });
            spyOn(body, 'setAttribute');
            spyOn(document, 'getElementsByTagName').and.returnValue({ item: function () { return body; } });
            handler('dark');
            body.getAttribute.calls.reset();
            body.setAttribute.calls.reset();
            handler('light');
            expect(body.getAttribute).toHaveBeenCalledTimes(1);
            expect(body.getAttribute).toHaveBeenCalledWith('class');
            expect(body.setAttribute).toHaveBeenCalledWith('class', 'myclass light');
        });
        it('should send ready on instance ID received', function () {
            var channel = builder.build();
            var readyData = {};
            var instanceStub = {
                setInstanceId: function (iid) {
                }
            };
            spyOn(instanceStub, 'setInstanceId').and.returnValue(readyData);
            channel.Initialize(instanceStub.setInstanceId);
            expect(builder.portalMessageService.SubscribeMessage).toHaveBeenCalledWith(SharedIFrameMessages.InstanceId, jasmine.anything());
            var handler = builder.portalMessageService.SubscribeMessage.calls.argsFor(1)[1];
            handler('instance id');
            expect(builder.portalMessageService.PostMessage).toHaveBeenCalledWith(SharedIFrameMessages.Ready, readyData);
            expect(instanceStub.setInstanceId).toHaveBeenCalledWith('instance id');
        });
        it('should send portal initialization messages', function () {
            var channel = builder.build();
            channel.Initialize(function () { });
            expect(builder.portalMessageService.PostMessageWithNoInstanceId).toHaveBeenCalledTimes(3);
            expect(builder.portalMessageService.PostMessageWithNoInstanceId)
                .toHaveBeenCalledWith(SharedIFrameMessages.InitializationComplete);
            expect(builder.portalMessageService.PostMessageWithNoInstanceId)
                .toHaveBeenCalledWith(SharedIFrameMessages.Ready);
            expect(builder.portalMessageService.PostMessageWithNoInstanceId)
                .toHaveBeenCalledWith(SharedIFrameMessages.RevealContent);
        });
    });
});
//# sourceMappingURL=CommunicationChannel.spec.js.map