import { Promise } from 'es6-promise';
var LocalizationService = /** @class */ (function () {
    function LocalizationService(fallback) {
        var _this = this;
        this.strings = null;
        this._fallback = fallback || {};
        this._initPromise = new Promise(function (resolve, reject) {
            _this._initCallback = resolve;
            _this._initRejection = reject;
        });
    }
    LocalizationService.prototype.Register = function (messageSvc, messageName) {
        return messageSvc.SubscribeMessage(messageName, this.UpdateStrings.bind(this));
    };
    LocalizationService.prototype.GetStrings = function () {
        var _this = this;
        if (this.strings) {
            return Promise.resolve(this.strings);
        }
        else {
            return new Promise(function (resolve, reject) {
                _this._initPromise.then(function () {
                    resolve(_this.strings);
                }).catch(reject);
            });
        }
    };
    LocalizationService.prototype.UpdateStrings = function (message) {
        this.strings = message;
        if (!this.strings) {
            this._initRejection('Received null localization strings');
        }
        else {
            // populate missing strings from fallback json file
            for (var value in this._fallback) {
                if (!this.strings[value] && this._fallback[value] &&
                    typeof this._fallback[value] === 'string') {
                    // this is the case where the localization value is a simple string
                    this.strings[value] = this._fallback[value];
                    console.warn('Missing localization resource "' + value + '"');
                }
                else if (this.strings[value] && typeof this._fallback[value] === 'object') {
                    // if the localization strings are nested, we need to extract those so we can populate missing ones from fallback file
                    var subValues = this._fallback[value];
                    for (var subVal in subValues) {
                        if (!this.strings[value][subVal]) {
                            this.strings[value][subVal] = this._fallback[value][subVal];
                            console.warn('Missing localization resource "' + value + '.' + subVal + '"');
                        }
                    }
                }
            }
            this._initCallback();
        }
    };
    return LocalizationService;
}());
export { LocalizationService };
//# sourceMappingURL=LocalizationService.js.map