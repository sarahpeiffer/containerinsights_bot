import { LocalizationService } from './LocalizationService';
import 'jasmine';
var LocalizationServiceBuilder = /** @class */ (function () {
    function LocalizationServiceBuilder() {
        this.messageService = {
            SubscribeMessage: function (message, handler) {
                return { Unsubscribe: function () { } };
            },
            PostMessage: function (kind, data, lclWindow) {
            },
            PostMessageWithNoInstanceId: function (kind, data) {
            }
        };
        spyOn(this.messageService, 'SubscribeMessage');
    }
    LocalizationServiceBuilder.prototype.whereLocalizationMessageIs = function (strings, result) {
        this.messageService.SubscribeMessage = function (name, fn) {
            fn(strings);
            return result;
        };
        return this;
    };
    LocalizationServiceBuilder.prototype.build = function () {
        return new LocalizationService();
    };
    return LocalizationServiceBuilder;
}());
describe('LocalizationService', function () {
    var builder;
    beforeEach(function () {
        builder = new LocalizationServiceBuilder();
    });
    describe('Register', function () {
        it('should register correct message name', function () {
            var service = builder.build();
            service.Register(builder.messageService, 'localization-message');
            var args = builder.messageService.SubscribeMessage.calls.mostRecent().args;
            expect(args[0]).toBe('localization-message');
        });
    });
    describe('GetStrings', function () {
        it('should resolve promise when localization strings message received', function () {
            var strings = { 'hello': 'world' };
            var subscription = {};
            var service = builder.whereLocalizationMessageIs(strings, subscription).build();
            var result = service.Register(builder.messageService, 'localization-message');
            expect(result).toBe(subscription);
            return service.GetStrings().then(function (actual) {
                expect(actual['hello']).toBe('world');
            }).catch(function (e) {
                fail(e);
            });
        });
        it('should reject promise if null message received', function () {
            var subscription = {};
            var service = builder.whereLocalizationMessageIs(null, subscription).build();
            var result = service.Register(builder.messageService, 'localization-message');
            expect(result).toBe(subscription);
            return service.GetStrings().then(function (actual) {
                fail('it should reject promise');
            }).catch(function (e) {
                expect(e).toBe('Received null localization strings');
            });
        });
    });
});
//# sourceMappingURL=LocalizationService.spec.js.map