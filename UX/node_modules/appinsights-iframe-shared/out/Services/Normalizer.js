export var NormalizedTypes = {
    AzureTable: 'AZURE TABLE',
    AzureQueue: 'AZURE QUEUE',
    AzureBlob: 'AZURE BLOB',
    AzureSql: 'AZURE SQL',
    AzureDocumentDB: 'AZURE DOCUMENTDB',
    Redis: 'REDIS',
    AzureServiceBus: 'AZURE SERVICE BUS',
    AzureIotHub: 'AZURE IOT HUB',
    AzureEventHubs: 'AZURE EVENT HUBS',
};
export function NormalizeDependency(type, name, target) {
    var ret = {
        type: '',
        server: '',
        operation: ''
    };
    // Remove internal info
    type = type ? type.toUpperCase().split(' (')[0] : '';
    target = target.split(' | cid')[0];
    // Heuristics to simplify dependency names:
    // Azure dependencies do not require domain reporting (they're always static)
    var azureHeuristic = [NormalizedTypes.AzureTable, NormalizedTypes.AzureQueue, NormalizedTypes.AzureBlob,
        NormalizedTypes.AzureDocumentDB, NormalizedTypes.Redis, NormalizedTypes.AzureIotHub].indexOf(type) > -1;
    // Sometimes name and target are equal
    var targetNameEqualityHeuristic = target === name;
    // Sometimes target is within name. Replace only if at beginning (or after a protocol eg http://)
    var domainInTargetHeuristicA = name.indexOf(target) === 0;
    var domainInTargetHeuristicB = name.indexOf(target) === name.indexOf('://') + 3;
    // SQL dependencies repeat target inside of name, and contain a superfluous "SQL: "
    var SQLDomainInTargetHeuristic = type === 'SQL';
    // Service Bus/Event Hub dependencies have the following format: sb://<sbName>.servicebus.windows.net/ | <queueName>
    var ServiceBusHeuristic = type === NormalizedTypes.AzureServiceBus || type === NormalizedTypes.AzureEventHubs;
    if (azureHeuristic) {
        ret.type = type;
        ret.server = target.split('.')[0];
        ret.operation = name;
    }
    else if (targetNameEqualityHeuristic) {
        ret.type = type;
        ret.server = target;
    }
    else if (domainInTargetHeuristicA || domainInTargetHeuristicB) {
        var protocolIndex = name.indexOf('://');
        if (protocolIndex > -1) {
            protocolIndex += 3;
        }
        else {
            protocolIndex = 0;
        }
        ret.type = type;
        ret.server = name.slice(protocolIndex, name.indexOf(target) + target.length);
        ret.operation = (name.slice(0, protocolIndex).split(' ')[0] + ' ' + name.slice(name.indexOf(target) + target.length)).trim();
    }
    else if (SQLDomainInTargetHeuristic) {
        var formattedTarget = target;
        var protocolIndex = formattedTarget.indexOf(':');
        if (protocolIndex > -1) {
            formattedTarget = formattedTarget.slice(protocolIndex + 1);
        }
        var portIndex = formattedTarget.indexOf(',');
        if (portIndex > -1) {
            formattedTarget = formattedTarget.slice(0, portIndex);
        }
        var targetParts = target.split(' | ');
        var formattedType = type;
        if (formattedTarget.indexOf('windows.net') > -1) {
            formattedType = NormalizedTypes.AzureSql;
            formattedTarget = formattedTarget.slice(0, formattedTarget.indexOf('.'));
        }
        ret.type = formattedType;
        ret.server = formattedTarget;
        ret.operation = targetParts.length > 1 ? targetParts[1] : name;
    }
    else if (ServiceBusHeuristic) {
        var targetParts = target.split(' | ');
        var formattedTarget = targetParts[0];
        var protocolIndex = formattedTarget.indexOf('sb://');
        formattedTarget = protocolIndex === -1 ? formattedTarget.split('.')[0] : formattedTarget.split('.')[0].substring(5);
        ret.type = type;
        ret.server = formattedTarget;
        ret.operation = targetParts.length > 1 ? targetParts[1] : name;
    }
    else {
        ret.type = type;
        ret.server = target;
        ret.operation = name;
    }
    return ret;
}
//# sourceMappingURL=Normalizer.js.map