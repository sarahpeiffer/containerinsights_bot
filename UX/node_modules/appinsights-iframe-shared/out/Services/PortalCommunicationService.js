import { Utils } from '..';
/**
 * Service for communicating with the view model with a request/response model
 */
var PortalCommunicationService = /** @class */ (function () {
    function PortalCommunicationService(messageService) {
        this._messageService = messageService;
    }
    /**
     * Send a message to the view model and wait for a response with the same message name and matching ID in the payload.
     * @param message
     * @param data
     */
    PortalCommunicationService.prototype.request = function (message, data, responseIsSentSafely) {
        var _this = this;
        var subscriber;
        function cleanup() {
            subscriber.Unsubscribe();
        }
        return new Promise(function (resolve, reject) {
            data.id = Utils.RandomGuid();
            subscriber = _this._messageService.SubscribeMessage(message, function (response) {
                if (response.id === data.id) {
                    resolve(response);
                }
            }, responseIsSentSafely);
            _this._messageService.PostMessage(message, data);
        }).then(function (result) {
            cleanup();
            return result;
        }).catch(function (e) {
            cleanup();
            return Promise.reject(e);
        });
    };
    return PortalCommunicationService;
}());
export { PortalCommunicationService };
//# sourceMappingURL=PortalCommunicationService.js.map