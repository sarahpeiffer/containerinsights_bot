import { PortalCommunicationService } from './PortalCommunicationService';
describe('PortalCommunicationService', function () {
    var SubscribeMessage;
    var PostMessage;
    var Unsubscribe;
    var communicationService;
    beforeEach(function () {
        var messageService = {
            PostMessage: function () { },
            SubscribeMessage: function () { }
        };
        var subscription = {
            Unsubscribe: function () { }
        };
        PostMessage = spyOn(messageService, 'PostMessage');
        SubscribeMessage = spyOn(messageService, 'SubscribeMessage').and.returnValue(subscription);
        Unsubscribe = spyOn(subscription, 'Unsubscribe');
        communicationService = new PortalCommunicationService(messageService);
    });
    it('should resolve and cleanup after message received', function () {
        var message = 'my message';
        var data = {
            prop1: '1'
        };
        var promise = communicationService.request(message, data);
        expect(PostMessage).toHaveBeenCalledTimes(1);
        expect(PostMessage).toHaveBeenCalledWith(message, jasmine.anything());
        var sent = PostMessage.calls.mostRecent().args[1];
        expect(sent.prop1).toBe(data.prop1);
        expect(sent.id).toBeDefined();
        expect(SubscribeMessage).toHaveBeenCalledTimes(1);
        expect(SubscribeMessage).toHaveBeenCalledWith(message, jasmine.anything(), undefined);
        var handler = SubscribeMessage.calls.mostRecent().args[1];
        handler({
            response: '1',
            id: sent.id
        });
        return promise.then(function (result) {
            expect(result.response).toBe('1');
            expect(Unsubscribe).toHaveBeenCalledTimes(1);
        }).catch(function (e) {
            fail(e);
        });
    });
    it('should not resolve if ID doesnt match', function () {
        var message = 'my message';
        var data = {
            prop1: '1'
        };
        var promise = communicationService.request(message, data);
        expect(PostMessage).toHaveBeenCalledTimes(1);
        expect(PostMessage).toHaveBeenCalledWith(message, jasmine.anything());
        var sent = PostMessage.calls.mostRecent().args[1];
        expect(sent.prop1).toBe(data.prop1);
        expect(sent.id).toBeDefined();
        expect(SubscribeMessage).toHaveBeenCalledTimes(1);
        expect(SubscribeMessage).toHaveBeenCalledWith(message, jasmine.anything(), undefined);
        var handler = SubscribeMessage.calls.mostRecent().args[1];
        handler({
            response: '1',
            id: 'whatever'
        });
        handler({
            response: '3',
            id: sent.id
        });
        return promise.then(function (result) {
            expect(result.response).toBe('3');
            expect(Unsubscribe).toHaveBeenCalledTimes(1);
        }).catch(function (e) {
            fail(e);
        });
    });
});
//# sourceMappingURL=PortalCommunicationService.spec.js.map