import { Promise } from 'es6-promise';
var DelayedDataPoint = /** @class */ (function () {
    function DelayedDataPoint() {
        var _this = this;
        this.promise = new Promise(function (resolve, reject) {
            _this.resolve = resolve;
            _this.reject = reject;
        });
    }
    DelayedDataPoint.prototype.update = function (data, rejection) {
        this.data = data;
        if (!this.data) {
            this.reject(rejection);
        }
        else {
            this.resolve();
        }
    };
    DelayedDataPoint.prototype.get = function () {
        var _this = this;
        if (this.data) {
            return Promise.resolve({ inCache: false, value: this.data });
        }
        else {
            return new Promise(function (resolve, reject) {
                _this.promise.then(function () {
                    resolve({ inCache: true, value: _this.data });
                }).catch(reject);
            });
        }
    };
    return DelayedDataPoint;
}());
export { DelayedDataPoint };
var PortalConfigService = /** @class */ (function () {
    function PortalConfigService(messageService) {
        this._subscriptions = {};
        this._messageService = messageService;
    }
    PortalConfigService.prototype.SubscribeSetting = function (message) {
        var _this = this;
        this._subscriptions[message] = new DelayedDataPoint();
        if (this._messageService) {
            this._messageService.SubscribeMessage(message, function (d) { return _this._subscriptions[message].update(d, 'Received empty data for message ' + message); });
        }
        return this;
    };
    PortalConfigService.prototype.GetSetting = function (message) {
        return this._subscriptions[message].get();
    };
    return PortalConfigService;
}());
export { PortalConfigService };
//# sourceMappingURL=PortalConfigService.js.map