import { DelayedDataPoint, PortalConfigService } from './PortalConfigService';
describe('DelayedDataPoint', function () {
    describe('update', function () {
        it('should reject if data is null', function () {
            var dataPoint = new DelayedDataPoint();
            spyOn(dataPoint, 'reject');
            dataPoint.update(null, 'rejection msg');
            expect(dataPoint.data).toBeNull();
            expect(dataPoint.reject).toHaveBeenCalledWith('rejection msg');
        });
        it('should resolve and set data if data is not null', function () {
            var dataPoint = new DelayedDataPoint();
            spyOn(dataPoint, 'resolve');
            spyOn(dataPoint, 'reject');
            dataPoint.update('my data', 'rejection msg');
            expect(dataPoint.data).toBe('my data');
            expect(dataPoint.resolve).toHaveBeenCalled();
            expect(dataPoint.reject).not.toHaveBeenCalled();
        });
    });
    describe('get', function () {
        it('should resolve immediately if data present', function () {
            var dataPoint = new DelayedDataPoint();
            dataPoint.data = 'my data';
            return dataPoint.get().then(function (data) {
                expect(data.value).toBe('my data');
                expect(data.inCache).toBe(false);
            }).catch(function (err) { return fail(err); });
        });
        it('should reject if data was rejected', function () {
            var dataPoint = new DelayedDataPoint();
            dataPoint.data = null;
            dataPoint.reject('reject');
            return dataPoint.get().then(function (data) {
                fail('expected promise to fail');
            }).catch(function (err) { return expect(err).toBe('reject'); });
        });
        it('should resolve if data not available yet', function () {
            var dataPoint = new DelayedDataPoint();
            dataPoint.data = null;
            var pr = dataPoint.get().then(function (data) {
                expect(data.value).toBe('my data');
                expect(data.inCache).toBe(true);
            }).catch(function (err) { return fail(err); });
            dataPoint.data = 'my data';
            dataPoint.resolve();
            return pr;
        });
    });
});
describe('PortalConfigService', function () {
    describe('SubscribeSetting', function () {
        it('should register for auth token', function () {
            var messageService = {
                SubscribeMessage: function (message, handler) {
                }
            };
            spyOn(messageService, 'SubscribeMessage');
            var configService = new PortalConfigService(messageService);
            configService = configService.SubscribeSetting('authtoken');
            expect(messageService.SubscribeMessage).toHaveBeenCalledTimes(1);
            var args = messageService.SubscribeMessage.calls.first().args;
            expect(args[0]).toBe('authtoken');
            spyOn(configService['_subscriptions']['authtoken'], 'update');
            args[1]('my data');
            expect(configService['_subscriptions']['authtoken'].update)
                .toHaveBeenCalledWith('my data', 'Received empty data for message authtoken');
        });
    });
    describe('GetSetting', function () {
        it('should return auth token', function () {
            var messageService = {
                SubscribeMessage: function (message, handler) {
                }
            };
            var configService = new PortalConfigService(messageService);
            configService.SubscribeSetting('authtoken');
            var val = {};
            spyOn(configService['_subscriptions']['authtoken'], 'get').and.returnValue(val);
            var result = configService.GetSetting('authtoken');
            expect(result).toBe(val);
        });
    });
});
//# sourceMappingURL=PortalConfigService.spec.js.map