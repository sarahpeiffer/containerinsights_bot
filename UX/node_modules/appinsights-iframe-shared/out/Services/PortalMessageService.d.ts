import { IPortalMessageService, IPortalMessageSubscriber } from '../SharedInterfaces';
export declare class PortalMessageService implements IPortalMessageService {
    private static _instance;
    private _shellSrc;
    private _shellChannelName;
    private _listeners;
    private _instanceId;
    private _queues;
    /**
     * Initializes the PortalMessageService. This only needs to be called once.
     * @param signature - In a FramePart this should be FxFramePart, for AppBlade, use FxAppBlade.
     * @param trustedAuthority - Pass in from the trustedAuthority query string parameter to the iframe.
     * @param instanceId - Function to get the instance ID. If accessing window from inside this function, use the instance passed in.
     */
    static Initialize(signature: string, trustedAuthority: string, instanceId?: (win: Window) => string): void;
    /**
     * Gets an instance of PortalMessageService. PortalMessageService.Initialize must be called once before accessing this method.
     */
    static Instance(): PortalMessageService;
    constructor(signature: string, trustedAuthority: string, instanceId?: (win: Window) => string);
    private RegisterListeners();
    private SetOrigin(trustedAuthority);
    private static DeserializeObject<T>(obj);
    private static Deserialize<T>(obj);
    SubscribeMessage(kind: string, subscriber: Function, sentSafely?: boolean): IPortalMessageSubscriber;
    PostMessage(kind: string, data?: any, lclWindow?: Window): void;
    PostMessageWithNoInstanceId(kind: string, data?: any): void;
}
