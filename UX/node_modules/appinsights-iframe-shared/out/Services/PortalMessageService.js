import { PortalMessageSubscriber } from './';
var PortalMessageService = /** @class */ (function () {
    function PortalMessageService(signature, trustedAuthority, instanceId) {
        this._listeners = {};
        this._queues = {};
        this._shellChannelName = signature;
        this._instanceId = instanceId;
        this.SetOrigin(trustedAuthority);
        this.RegisterListeners();
    }
    /**
     * Initializes the PortalMessageService. This only needs to be called once.
     * @param signature - In a FramePart this should be FxFramePart, for AppBlade, use FxAppBlade.
     * @param trustedAuthority - Pass in from the trustedAuthority query string parameter to the iframe.
     * @param instanceId - Function to get the instance ID. If accessing window from inside this function, use the instance passed in.
     */
    PortalMessageService.Initialize = function (signature, trustedAuthority, instanceId) {
        PortalMessageService._instance = new PortalMessageService(signature, trustedAuthority, instanceId);
    };
    /**
     * Gets an instance of PortalMessageService. PortalMessageService.Initialize must be called once before accessing this method.
     */
    PortalMessageService.Instance = function () {
        return PortalMessageService._instance;
    };
    PortalMessageService.prototype.RegisterListeners = function () {
        var self = this;
        // For unknown reasons, IE and Edge sometimes throw exceptions if we reference window from inside
        // this event listener. To mitigate the issue, we reference window from 'this' for the function.
        window.addEventListener('message', function (event) {
            if (!event.data || event.data['signature'] !== self._shellChannelName) {
                return;
            }
            var data = event.data['data'];
            var kind = event.data['kind'];
            var instanceId = self._instanceId ? self._instanceId(this) : '';
            if (typeof kind !== 'string' || (instanceId && kind.indexOf(instanceId) < 0)) {
                return;
            }
            kind = instanceId ? kind.split(instanceId)[1] : kind;
            var subscribers = self._listeners[kind];
            if (subscribers && subscribers.length) {
                for (var i = 0; i < subscribers.length; i++) {
                    subscribers[i](data);
                }
            }
            else {
                self._queues[kind] = self._queues[kind] ? self._queues[kind].concat([data]) : [data];
            }
        }, false);
    };
    PortalMessageService.prototype.SetOrigin = function (trustedAuthority) {
        var src = trustedAuthority;
        if (src) {
            this._shellSrc = src;
        }
        else {
            this._shellSrc = window.location.origin;
        }
    };
    PortalMessageService.DeserializeObject = function (obj) {
        var newObj = {};
        Object.keys(obj).forEach(function (key) {
            var newKey = key;
            if (key[0] === '!' && key[1] === '_') {
                newKey = key.slice(2);
            }
            newObj[newKey] = PortalMessageService.Deserialize(obj[key]);
        });
        return newObj;
    };
    PortalMessageService.Deserialize = function (obj) {
        if (Array.isArray(obj)) {
            return obj.map(PortalMessageService.DeserializeObject);
        }
        else if (obj === Object(obj) && !(obj instanceof Date)) {
            return PortalMessageService.DeserializeObject(obj);
        }
        return obj;
    };
    PortalMessageService.prototype.SubscribeMessage = function (kind, subscriber, sentSafely) {
        if (!this._listeners[kind]) {
            this._listeners[kind] = [];
        }
        if (sentSafely) {
            var origSubscriber_1 = subscriber;
            subscriber = function (msg) { return origSubscriber_1(PortalMessageService.Deserialize(msg)); };
        }
        if (this._queues[kind]) {
            for (var _i = 0, _a = this._queues[kind]; _i < _a.length; _i++) {
                var item = _a[_i];
                subscriber(item);
            }
            this._queues[kind] = [];
        }
        this._listeners[kind].push(subscriber);
        return new PortalMessageSubscriber(this._listeners[kind], subscriber);
    };
    PortalMessageService.prototype.PostMessage = function (kind, data, lclWindow) {
        var win = lclWindow ? lclWindow : window;
        win.parent.postMessage({
            signature: this._shellChannelName,
            kind: this._instanceId && this._instanceId(win) ? this._instanceId(win) + kind : kind,
            data: data
        }, this._shellSrc);
    };
    PortalMessageService.prototype.PostMessageWithNoInstanceId = function (kind, data) {
        window.parent.postMessage({
            signature: this._shellChannelName,
            kind: kind,
            data: data
        }, this._shellSrc);
    };
    return PortalMessageService;
}());
export { PortalMessageService };
//# sourceMappingURL=PortalMessageService.js.map