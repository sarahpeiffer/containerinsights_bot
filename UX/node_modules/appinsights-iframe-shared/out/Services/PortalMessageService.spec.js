import { PortalMessageService } from './PortalMessageService';
import 'jasmine';
var PortalMessageServiceBuilder = /** @class */ (function () {
    function PortalMessageServiceBuilder() {
        var _this = this;
        spyOn(window, 'addEventListener')
            .and.callFake(function (name, listener) {
            _this.listener = listener;
        });
        spyOn(window, 'postMessage').and.callFake(function (data, origin) {
            _this.listener({ data: data, origin: origin });
        });
    }
    PortalMessageServiceBuilder.prototype.withInstanceId = function (id) {
        this.instanceId = id;
        return this;
    };
    PortalMessageServiceBuilder.prototype.build = function () {
        var _this = this;
        return new PortalMessageService('FxFramePart', '', function () { return _this.instanceId; });
    };
    return PortalMessageServiceBuilder;
}());
export { PortalMessageServiceBuilder };
describe('PortalMessageService', function () {
    var builder;
    beforeEach(function () {
        builder = new PortalMessageServiceBuilder();
    });
    describe('SubscribeMessage', function () {
        it('should call subscriber when message kind arrives', function () {
            var service = builder.build();
            var data = { hello: 'world' };
            var called = false;
            var listener = function (received) {
                expect(received).toBe(data);
                called = true;
            };
            service.SubscribeMessage('hello', listener);
            window.postMessage({
                kind: 'hello',
                signature: 'FxFramePart',
                data: data
            }, window.location.origin);
            expect(called).toBe(true);
        });
        it('should call each subscriber of the same kind when message arrives', function () {
            var service = builder.build();
            var data = { hello: 'world' };
            var listener1Called = false;
            var listener1 = function (received) {
                listener1Called = true;
            };
            var listener2Called = false;
            var listener2 = function (received) {
                listener2Called = true;
            };
            service.SubscribeMessage('hello', listener1);
            service.SubscribeMessage('hello', listener2);
            window.postMessage({
                kind: 'hello',
                signature: 'FxFramePart',
                data: data
            }, window.location.origin);
            expect(listener1Called).toBe(true);
            expect(listener2Called).toBe(true);
        });
        it('should not call subscriber when message of different kind arrives', function () {
            var service = builder.build();
            var data = { hello: 'world' };
            var called = false;
            var listener = function (received) {
                called = true;
            };
            service.SubscribeMessage('hello', listener);
            window.postMessage({
                kind: 'nomatch',
                signature: 'FxFramePart',
                data: data
            }, window.location.origin);
            expect(called).toBe(false);
        });
        it('should not call subscriber when message with wrong signature arrives', function () {
            var service = builder.build();
            var data = { hello: 'world' };
            var called = false;
            var listener = function (received) {
                called = true;
            };
            service.SubscribeMessage('hello', listener);
            window.postMessage({
                kind: 'hello',
                signature: 'nomatch',
                data: data
            }, window.location.origin);
            expect(called).toBe(false);
        });
    });
    describe('PostMessage', function () {
        it('should post a message with correct signature, kind and data', function () {
            var service = builder.withInstanceId('12').build();
            var data = { hello: 'world' };
            var spy = spyOn(window.parent, 'postMessage');
            service.PostMessage('hello', data);
            expect(spy).toHaveBeenCalledTimes(1);
            var args = spy.calls.mostRecent().args;
            expect(args[0].signature).toBe('FxFramePart');
            expect(args[0].kind).toBe('12hello');
            expect(args[0].data).toBe(data);
            expect(args[1]).toBe(window.location.origin);
        });
    });
    describe('PostMessageWithNoInstanceId', function () {
        it('should post message with exact kind', function () {
            var service = builder.withInstanceId('12').build();
            var spy = spyOn(window.parent, 'postMessage');
            service.PostMessageWithNoInstanceId('ready');
            expect(spy).toHaveBeenCalledTimes(1);
            var args = spy.calls.mostRecent().args;
            expect(args[0].signature).toBe('FxFramePart');
            expect(args[0].kind).toBe('ready');
            expect(args[1]).toBe(window.location.origin);
        });
    });
});
//# sourceMappingURL=PortalMessageService.spec.js.map