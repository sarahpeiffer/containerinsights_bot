import { PortalMessageService } from './PortalMessageService';
import 'jasmine';
var PortalMessageSubscriberBuilder = /** @class */ (function () {
    function PortalMessageSubscriberBuilder() {
        var _this = this;
        this.messageKind = 'hello';
        this.func = null;
        spyOn(window, 'addEventListener')
            .and.callFake(function (name, listener) {
            _this.listener = listener;
        });
        spyOn(window, 'postMessage').and.callFake(function (data, origin) {
            _this.listener({ data: data, origin: origin });
        });
    }
    PortalMessageSubscriberBuilder.prototype.withFunction = function (func) {
        this.func = func;
        return this;
    };
    PortalMessageSubscriberBuilder.prototype.build = function () {
        var messageService = new PortalMessageService('FxFramePart', '', null);
        return messageService.SubscribeMessage(this.messageKind, this.func);
    };
    return PortalMessageSubscriberBuilder;
}());
export { PortalMessageSubscriberBuilder };
describe('PortalMessageSubscriber', function () {
    var builder;
    beforeEach(function () {
        builder = new PortalMessageSubscriberBuilder();
    });
    describe('Unsubscribe', function () {
        it('should not call a function that has been unsubscribed', function () {
            var called1 = false;
            var func1 = function () {
                called1 = true;
            };
            var called2 = false;
            var func2 = function () {
                called2 = true;
            };
            var subscriber1 = builder.withFunction(func1).build();
            builder.withFunction(func2).build();
            subscriber1.Unsubscribe();
            var data = { hello: 'world' };
            window.postMessage({
                kind: builder.messageKind,
                signature: 'FxFramePart',
                data: data
            }, window.location.origin);
            expect(called1).toBe(false);
            expect(called2).toBe(true);
        });
        it('should not has no side effect if unsubscribe multiple times', function () {
            var called = false;
            var func = function () {
                called = true;
            };
            var subscriber = builder.withFunction(func).build();
            expect(function () { return subscriber.Unsubscribe(); }).not.toThrow();
            expect(function () { return subscriber.Unsubscribe(); }).not.toThrow();
        });
    });
});
//# sourceMappingURL=PortalMessageSubscriber.spec.js.map