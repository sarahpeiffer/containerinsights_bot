import { ITelemetryService } from '../../SharedInterfaces';
import { QueryTelemetryContext } from './QueryTelemetryService';
import { IRouteConfiguration } from './IRouteConfiguration';
import { TelemetryContext } from '../TelemetryContext';
import { HttpDebouncer } from './HttpDebouncer';
export declare enum HttpMethod {
    Get = 0,
    Post = 1,
}
export declare enum AuthenticationMethod {
    Draft = 0,
    Graph = 1,
    Csm = 2,
}
/**
 * Default retry interval in seconds. Used if we don't get a retry-after header.
 */
export declare const DefaultRetryInterval = 20;
export declare class AjaxHelper {
    private _routeConfig;
    private _queryTelemetryService;
    private _telemetryContext;
    private _instanceIdFn;
    constructor(routeConfig: IRouteConfiguration, telemetryService: ITelemetryService, telemetryContext: TelemetryContext, instanceId: () => string);
    ExecuteGetAjax<TResult>(buildUri: (host: string, appId?: string) => string, telemetryContext: QueryTelemetryContext, debouncer?: HttpDebouncer): Promise<TResult>;
    ExecuteGetArrayAjax<TResult>(buildUri: (host: string, appId?: string) => string, telemetryContext: QueryTelemetryContext, appId?: string, debouncer?: HttpDebouncer, stopOnFirst?: boolean): Promise<TResult[]>;
    ExecuteAjax<TResult, TParam>(buildUri: (host: string, appId: string) => string, method: HttpMethod, params: TParam, telemetryContext: QueryTelemetryContext, retryCount?: number, appId?: string, debouncer?: HttpDebouncer): Promise<TResult>;
    private _getHeaders(telemetryContext);
    private _getHostNameAndRetries(telemetryContext);
    private _unwrapCsmArray<TResult>(input);
}
