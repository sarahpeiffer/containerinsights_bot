import { Promise } from 'es6-promise';
import { HeaderNames, HeaderValues, StatusCodes } from './DraftDataTypes';
import { TimeConstants } from '../../TimeContext';
import { RoundRobinService } from './RoundRobinService';
import axios from 'axios';
import { QueryTelemetryService, QueryTelemetryContext } from './QueryTelemetryService';
import { PerformanceNow } from '../../PerformanceNow';
import { StringFormat } from '../../StringFormat';
export var HttpMethod;
(function (HttpMethod) {
    HttpMethod[HttpMethod["Get"] = 0] = "Get";
    HttpMethod[HttpMethod["Post"] = 1] = "Post";
})(HttpMethod || (HttpMethod = {}));
export var AuthenticationMethod;
(function (AuthenticationMethod) {
    AuthenticationMethod[AuthenticationMethod["Draft"] = 0] = "Draft";
    AuthenticationMethod[AuthenticationMethod["Graph"] = 1] = "Graph";
    AuthenticationMethod[AuthenticationMethod["Csm"] = 2] = "Csm";
})(AuthenticationMethod || (AuthenticationMethod = {}));
/**
 * Default retry interval in seconds. Used if we don't get a retry-after header.
 */
export var DefaultRetryInterval = 20;
var AjaxHelper = /** @class */ (function () {
    function AjaxHelper(routeConfig, telemetryService, telemetryContext, instanceId) {
        this._routeConfig = routeConfig;
        this._queryTelemetryService = new QueryTelemetryService(telemetryService, telemetryContext);
        this._instanceIdFn = instanceId;
        this._telemetryContext = telemetryContext;
        if (!window.performanceNow && typeof window.performanceNow !== 'function') {
            PerformanceNow.polyfill();
        }
        if (!String.prototype.format) {
            StringFormat.polyfill();
        }
    }
    AjaxHelper.prototype.ExecuteGetAjax = function (buildUri, telemetryContext, debouncer) {
        return this.ExecuteAjax(buildUri, HttpMethod.Get, null, telemetryContext, null, null, debouncer);
    };
    AjaxHelper.prototype.ExecuteGetArrayAjax = function (buildUri, telemetryContext, appId, debouncer, stopOnFirst) {
        var _this = this;
        return this.ExecuteAjax(buildUri, HttpMethod.Get, null, telemetryContext, null, appId, debouncer).then(function (result) {
            var resultArray = _this._unwrapCsmArray(result);
            if (result && result.nextLink && (!resultArray || resultArray.length === 0 || !stopOnFirst)) {
                // issue additional query by the continuation token
                var tc = new QueryTelemetryContext(_this._telemetryContext, telemetryContext.operationId, telemetryContext.partName, telemetryContext.queryName, null);
                return _this.ExecuteGetArrayAjax(function (host) { return result.nextLink; }, tc, appId, debouncer, stopOnFirst)
                    .then(function (additionalResult) {
                    return resultArray.concat(additionalResult);
                });
            }
            else {
                return resultArray;
            }
        });
    };
    AjaxHelper.prototype.ExecuteAjax = function (buildUri, method, params, telemetryContext, retryCount, appId, debouncer) {
        var _this = this;
        if (retryCount === void 0) { retryCount = 0; }
        telemetryContext.measurements.Request_Start = window.performanceNow();
        telemetryContext.retryCount = retryCount;
        return new Promise(function (resolve, reject) {
            Promise.all([_this._getHeaders(telemetryContext), _this._getHostNameAndRetries(telemetryContext)])
                .then(function (values) {
                var url = buildUri(values[1].hostName, appId || '');
                telemetryContext.measurements.Query_Start = window.performanceNow();
                var promise;
                if (debouncer) {
                    promise = debouncer.batch({
                        headers: values[0],
                        method: method === HttpMethod.Get ? 'GET' : 'POST',
                        params: params,
                        uri: url
                    });
                }
                else {
                    promise = method === HttpMethod.Get ?
                        axios.get(url, { headers: values[0] }) :
                        axios.post(url, params, { headers: values[0] });
                }
                promise.then(function (result) {
                    telemetryContext.measurements.Query_End = window.performanceNow();
                    telemetryContext.measurements.Query_End_Date = new Date();
                    telemetryContext.addResponseDetails(result);
                    _this._queryTelemetryService.LogQuery(telemetryContext);
                    resolve(result.data);
                }).catch(function (err) {
                    if (err.response) {
                        telemetryContext.addResponseDetails(err.response);
                    }
                    telemetryContext.measurements.Query_End = window.performanceNow();
                    telemetryContext.measurements.Query_End_Date = new Date();
                    var shouldReject = true;
                    if (err) {
                        if (err.response) {
                            if (err.response.status === StatusCodes.TooManyRequests && retryCount < values[1].retryCount) {
                                var retryAfter = err.response.headers ?
                                    err.response.headers[HeaderNames.RetryAfter] || DefaultRetryInterval : DefaultRetryInterval;
                                window.setTimeout(function () {
                                    _this.ExecuteAjax(buildUri, method, params, telemetryContext, ++retryCount, appId, debouncer)
                                        .then(function (result) {
                                        resolve(result);
                                    }, function (error) {
                                        reject(error);
                                    });
                                }, retryAfter * TimeConstants.second);
                                shouldReject = false;
                            }
                        }
                        else {
                            telemetryContext.error = err.toString();
                            telemetryContext.requestSucceed = false;
                            telemetryContext.statusText = err.toString();
                            telemetryContext.statusCode = 999;
                        }
                    }
                    _this._queryTelemetryService.LogQuery(telemetryContext);
                    if (shouldReject) {
                        /* we swallow the error because we already logged it and we don't want to log it again */
                        reject();
                    }
                });
            }).catch(function (e) {
                _this._queryTelemetryService.LogQuery(telemetryContext);
                /* we swallow the error because we already logged it and we don't want to log it again */
                reject();
            });
        });
    };
    AjaxHelper.prototype._getHeaders = function (telemetryContext) {
        var _this = this;
        telemetryContext.measurements.GetAuthHeader_Start = window.performanceNow();
        return new Promise(function (resolve, reject) {
            var headers = {};
            _this._routeConfig.Token().then(function (token) {
                telemetryContext.tokenInCache = !token.inCache;
                telemetryContext.measurements.GetAuthHeader_End = window.performanceNow();
                headers[HeaderNames.Authorization] = token.value;
                headers[HeaderNames.App] = HeaderValues.App;
                // iframe hash is session ID in ibiza
                headers[HeaderNames.SessionId] = window.location.hash ?
                    window.location.hash.substr(1, window.location.hash.length - 1) : '';
                headers[HeaderNames.HostingBladeInstanceId] = _this._instanceIdFn();
                headers[HeaderNames.ClientRequestId] = telemetryContext.requestId;
                headers[HeaderNames.ClientRequestInfo] = telemetryContext.getClientRequestInfo();
                // todo: add other headers
                resolve(headers);
            }).catch(function (err) {
                telemetryContext.measurements.GetAuthHeader_End = window.performanceNow();
                telemetryContext.requestSucceed = false;
                telemetryContext.error = err;
                reject(err);
            });
        });
    };
    AjaxHelper.prototype._getHostNameAndRetries = function (telemetryContext) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            telemetryContext.measurements.GetRouteInfo_Start = window.performanceNow();
            _this._routeConfig.RouteInfo().then(function (token) {
                telemetryContext.routeInfoInCache = !token.inCache;
                telemetryContext.measurements.GetRouteInfo_End = window.performanceNow();
                var config = token.value;
                var hostName = RoundRobinService.GetHostName(_this._routeConfig.RouteName(), config.Hosts);
                resolve({ hostName: hostName, retryCount: config.RetryCount });
            }).catch(function (err) {
                telemetryContext.measurements.GetRouteInfo_End = window.performanceNow();
                telemetryContext.requestSucceed = false;
                telemetryContext.error = err;
                reject(err);
            });
        });
    };
    AjaxHelper.prototype._unwrapCsmArray = function (input) {
        var result = null;
        if (input && input.value && Array.isArray(input.value)) {
            result = input.value;
        }
        else if (input && Array.isArray(input)) {
            result = input;
        }
        return result;
    };
    return AjaxHelper;
}());
export { AjaxHelper };
//# sourceMappingURL=AjaxHelper.js.map