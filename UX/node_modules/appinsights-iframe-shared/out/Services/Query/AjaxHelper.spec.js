import { AjaxHelper, HttpMethod } from './AjaxHelper';
import { RoundRobinService } from './RoundRobinService';
import { QueryTelemetryContext } from './QueryTelemetryService';
import { HeaderNames, HeaderValues } from './DraftDataTypes';
import axios from 'axios';
import { TelemetryContext } from '../TelemetryContext';
describe('AjaxHelper', function () {
    var ajaxHelper;
    var portalConfigService;
    var telemetryService;
    var telemetryContext;
    var instanceId;
    beforeEach(function () {
        portalConfigService = {
            AppId: function () { return Promise.resolve(null); },
            RouteInfo: function () { return Promise.resolve(null); },
            RouteName: function () { return 'Draft'; },
            Token: function () { return Promise.resolve(null); }
        };
        telemetryService = {
            LogEvent: function () { },
            LogException: function () { },
            Register: function () { return null; },
            LogTrace: function () { }
        };
        telemetryContext = new TelemetryContext(telemetryService);
        ajaxHelper = new AjaxHelper(portalConfigService, telemetryService, telemetryContext, function () { return instanceId; });
    });
    describe('_getHostNameAndRetries', function () {
        it('should return host name for prod app', function () {
            var config = {
                Hosts: ['prod1'],
                RetryCount: 3,
            };
            spyOn(portalConfigService, 'RouteInfo').and.returnValue(Promise.resolve({ value: config, inCache: false }));
            spyOn(RoundRobinService, 'GetHostName').and.returnValue('host');
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'mypart', 'myquery', null);
            return ajaxHelper['_getHostNameAndRetries'](tc).then(function (result) {
                expect(result.hostName).toBe('host');
                expect(result.retryCount).toBe(3);
                expect(RoundRobinService.GetHostName).toHaveBeenCalledTimes(1);
                expect(RoundRobinService.GetHostName).toHaveBeenCalledWith('Draft', config.Hosts);
                expect(tc.measurements.GetRouteInfo_Start).toBeGreaterThan(0);
                expect(tc.measurements.GetRouteInfo_End).toBeGreaterThan(0);
                expect(tc.routeInfoInCache).toBe(true);
            }).catch(function (e) {
                fail(e);
            });
        });
        it('should reject if portal config failed', function () {
            var error = {};
            spyOn(portalConfigService, 'RouteInfo').and.returnValue(Promise.reject(error));
            spyOn(RoundRobinService, 'GetHostName');
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'mypart', 'myquery', null);
            return ajaxHelper['_getHostNameAndRetries'](tc).then(function () {
                fail('Expected promise to fail');
            }).catch(function (e) {
                expect(RoundRobinService.GetHostName).not.toHaveBeenCalled();
                expect(e).toBe(error);
                expect(tc.measurements.GetRouteInfo_Start).toBeGreaterThan(0);
                expect(tc.measurements.GetRouteInfo_End).toBeGreaterThan(0);
                expect(tc.requestSucceed).toBe(false);
                expect(tc.error).toBe(error);
            });
        });
    });
    describe('_getHeaders', function () {
        it('should add headers', function () {
            var token = {};
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'mypart', 'myquery', null);
            window.location.hash = 'myval';
            instanceId = 'instanceId';
            spyOn(portalConfigService, 'Token').and.returnValue(Promise.resolve({ value: token, inCache: false }));
            return ajaxHelper['_getHeaders'](tc).then(function (result) {
                expect(result[HeaderNames.Authorization]).toBe(token);
                expect(result[HeaderNames.App]).toBe(HeaderValues.App);
                expect(result[HeaderNames.SessionId]).toBe('myval');
                expect(result[HeaderNames.HostingBladeInstanceId]).toBe('instanceId');
                expect(result[HeaderNames.ClientRequestId]).toBe(tc.requestId);
                expect(result[HeaderNames.ClientRequestInfo]).toBe(tc.getClientRequestInfo());
                window.location.hash = null;
                instanceId = null;
                expect(tc.measurements.GetAuthHeader_Start).toBeGreaterThan(0);
                expect(tc.measurements.GetAuthHeader_End).toBeGreaterThan(0);
                expect(tc.tokenInCache).toBe(true);
            }).catch(function (e) {
                fail(e);
            });
        });
        it('should reject if auth token fails', function () {
            var error = {};
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'mypart', 'myquery', null);
            window.location.hash = 'myval';
            instanceId = 'instanceId';
            spyOn(portalConfigService, 'Token').and.returnValue(Promise.reject(error));
            return ajaxHelper['_getHeaders'](tc).then(function (result) {
                fail('Expected promise to reject');
            }).catch(function (e) {
                expect(e).toBe(error);
                expect(tc.error).toBe(error);
                expect(tc.requestSucceed).toBe(false);
                expect(tc.measurements.GetAuthHeader_Start).toBeGreaterThan(0);
                expect(tc.measurements.GetAuthHeader_End).toBeGreaterThan(0);
            });
        });
    });
    describe('ExecuteAjax', function () {
        it('should execute post request', function () {
            var headers = {};
            var appId = 'app id';
            var hostName = 'hostname';
            var queryResult = {
                data: {}
            };
            var uriObj = {
                uri: function (host, id) { return null; }
            };
            spyOn(uriObj, 'uri').and.returnValue('myuri');
            var params = {};
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'mypart', 'myquery', null);
            spyOn(tc, 'addResponseDetails');
            spyOn(ajaxHelper, '_getHeaders').and.returnValue(Promise.resolve(headers));
            spyOn(ajaxHelper, '_getHostNameAndRetries').and.returnValue(Promise.resolve({ hostName: hostName, retryCount: 3 }));
            spyOn(ajaxHelper['_queryTelemetryService'], 'LogQuery');
            var axiosSpy = spyOn(axios, 'post').and.returnValue(Promise.resolve(queryResult));
            return ajaxHelper['ExecuteAjax'](uriObj.uri, HttpMethod.Post, params, tc, 0, appId).then(function (result) {
                var args = axiosSpy.calls.mostRecent().args;
                expect(axios.post).toHaveBeenCalledTimes(1);
                expect(args[0]).toBe('myuri');
                expect(args[1]).toBe(params);
                expect(args[2].headers).toBe(headers);
                expect(result).toBe(queryResult.data);
                expect(uriObj.uri).toHaveBeenCalledWith(hostName, appId);
                expect(ajaxHelper['_getHostNameAndRetries']).toHaveBeenCalledWith(tc);
                expect(ajaxHelper['_getHeaders']).toHaveBeenCalledWith(tc);
                expect(tc.addResponseDetails).toHaveBeenCalledWith(queryResult);
                expect(tc.measurements.Query_Start).toBeGreaterThan(0);
                expect(tc.measurements.Query_End).toBeGreaterThan(0);
                expect(tc.measurements.Query_End_Date).toBeDefined();
                expect(tc.measurements.Request_Start).toBeGreaterThan(0);
                expect(tc.retryCount).toBe(0);
                expect(ajaxHelper['_queryTelemetryService'].LogQuery).toHaveBeenCalled();
            }).catch(function (e) {
                fail(e);
            });
        });
        it('should reject if get headers fails', function () {
            var error = {};
            var appId = 'app id';
            var hostName = 'hostname';
            var queryResult = {
                data: {}
            };
            var uriObj = {
                uri: function (host, id) { return null; }
            };
            var params = {};
            spyOn(uriObj, 'uri').and.returnValue('myuri');
            spyOn(ajaxHelper, '_getHeaders').and.returnValue(Promise.reject(error));
            spyOn(ajaxHelper, '_getHostNameAndRetries').and.returnValue(Promise.resolve(hostName));
            spyOn(ajaxHelper['_queryTelemetryService'], 'LogQuery');
            spyOn(axios, 'post').and.returnValue(Promise.resolve(queryResult));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'mypart', 'myquery', null);
            return ajaxHelper['ExecuteAjax'](uriObj.uri, HttpMethod.Post, params, tc).then(function (result) {
                fail('Expected query to reject');
            }).catch(function (e) {
                expect(axios.post).not.toHaveBeenCalled();
                expect(e).not.toBeDefined();
                expect(ajaxHelper['_queryTelemetryService'].LogQuery).toHaveBeenCalledWith(tc);
                expect(ajaxHelper['_queryTelemetryService'].LogQuery).toHaveBeenCalledTimes(1);
                expect(tc.retryCount).toBe(0);
                expect(tc.measurements.Request_Start).toBeGreaterThan(0);
            });
        });
        it('should reject if get host name fails', function () {
            var error = {};
            var headers = {};
            var appId = 'app id';
            var queryResult = {
                data: {}
            };
            var uriObj = {
                uri: function (host, id) { return null; }
            };
            var params = {};
            spyOn(uriObj, 'uri').and.returnValue('myuri');
            spyOn(ajaxHelper, '_getHeaders').and.returnValue(Promise.resolve(headers));
            spyOn(ajaxHelper, '_getHostNameAndRetries').and.returnValue(Promise.reject(error));
            spyOn(ajaxHelper['_queryTelemetryService'], 'LogQuery');
            spyOn(axios, 'post').and.returnValue(Promise.resolve(queryResult));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'mypart', 'myquery', null);
            return ajaxHelper['ExecuteAjax'](uriObj.uri, HttpMethod.Post, params, tc).then(function (result) {
                fail('Expected query to reject');
            }).catch(function (e) {
                expect(axios.post).not.toHaveBeenCalled();
                expect(e).not.toBeDefined();
                expect(ajaxHelper['_queryTelemetryService'].LogQuery).toHaveBeenCalledWith(tc);
                expect(ajaxHelper['_queryTelemetryService'].LogQuery).toHaveBeenCalledTimes(1);
                expect(tc.retryCount).toBe(0);
                expect(tc.measurements.Request_Start).toBeGreaterThan(0);
            });
        });
        it('should reject if query fails', function () {
            var error = { response: { status: 400 } };
            var headers = {};
            var appId = 'app id';
            var hostName = 'hostname';
            var uriObj = {
                uri: function (host, id) { return null; }
            };
            var params = {};
            spyOn(uriObj, 'uri').and.returnValue('myuri');
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'mypart', 'myquery', null);
            spyOn(tc, 'addResponseDetails');
            spyOn(ajaxHelper, '_getHeaders').and.returnValue(Promise.resolve(headers));
            spyOn(ajaxHelper, '_getHostNameAndRetries').and.returnValue(Promise.resolve({ hostName: hostName, retryCount: 3 }));
            spyOn(ajaxHelper['_queryTelemetryService'], 'LogQuery');
            var axiosSpy = spyOn(axios, 'post').and.returnValue(Promise.reject(error));
            return ajaxHelper['ExecuteAjax'](uriObj.uri, HttpMethod.Post, params, tc, 0, appId).then(function (result) {
                fail('Expected query to reject');
            }).catch(function (e) {
                var args = axiosSpy.calls.mostRecent().args;
                expect(axios.post).toHaveBeenCalledTimes(1);
                expect(args[0]).toBe('myuri');
                expect(args[1]).toBe(params);
                expect(args[2].headers).toBe(headers);
                expect(uriObj.uri).toHaveBeenCalledWith(hostName, appId);
                expect(e).not.toBeDefined();
                expect(ajaxHelper['_getHeaders']).toHaveBeenCalledWith(tc);
                expect(ajaxHelper['_getHostNameAndRetries']).toHaveBeenCalledWith(tc);
                expect(tc.addResponseDetails).toHaveBeenCalledWith(error.response);
                expect(tc.retryCount).toBe(0);
                expect(tc.measurements.Request_Start).toBeGreaterThan(0);
                expect(tc.measurements.Query_End).toBeGreaterThan(0);
                expect(tc.measurements.Query_End_Date).toBeDefined();
                expect(ajaxHelper['_queryTelemetryService'].LogQuery).toHaveBeenCalledTimes(1);
                expect(ajaxHelper['_queryTelemetryService'].LogQuery).toHaveBeenCalledWith(tc);
            });
        });
        it('should retry if query fails with throttle code', function () {
            var timeoutSpy = spyOn(window, 'setTimeout').and.callFake(function (handler, time) {
                handler();
            });
            var error = { response: { status: 429, headers: { 'Retry-After': 15 } } };
            var headers = {};
            var appId = 'app id';
            var hostName = 'hostname';
            var uriObj = {
                uri: function (host, id) { return null; }
            };
            var params = {};
            spyOn(uriObj, 'uri').and.returnValue('myuri');
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'mypart', 'myquery', null);
            spyOn(tc, 'addResponseDetails');
            var appIdPr = Promise.resolve(appId);
            var headerPr = Promise.resolve(headers);
            var hostNamePr = Promise.resolve({ hostName: hostName, retryCount: 3 });
            spyOn(ajaxHelper, '_getHeaders').and.returnValue(headerPr);
            spyOn(ajaxHelper, '_getHostNameAndRetries').and.returnValue(hostNamePr);
            spyOn(ajaxHelper['_queryTelemetryService'], 'LogQuery');
            var axiosPr = Promise.reject(error);
            var axiosSpy = spyOn(axios, 'post').and.returnValue(axiosPr);
            var masterPromise = ajaxHelper['ExecuteAjax'](uriObj.uri, HttpMethod.Post, params, tc, 0, appId);
            return new Promise(function (resolve, reject) {
                masterPromise.then(function () {
                    fail('Expected to fail');
                    reject();
                }).catch(function () {
                    var args = axiosSpy.calls.mostRecent().args;
                    expect(axios.post).toHaveBeenCalledTimes(4);
                    expect(args[0]).toBe('myuri');
                    expect(args[1]).toBe(params);
                    expect(args[2].headers).toBe(headers);
                    expect(uriObj.uri).toHaveBeenCalledWith(hostName, appId);
                    expect(ajaxHelper['_getHeaders']).toHaveBeenCalledWith(tc);
                    expect(ajaxHelper['_getHostNameAndRetries']).toHaveBeenCalledWith(tc);
                    axiosPr.then(function () {
                        fail('Expected promise to reject');
                        reject();
                    }).catch(function () {
                        expect(tc.addResponseDetails).toHaveBeenCalledWith(error.response);
                        expect(tc.retryCount).toBe(3);
                        expect(tc.measurements.Request_Start).toBeGreaterThan(0);
                        expect(tc.measurements.Query_End).toBeGreaterThan(0);
                        expect(tc.measurements.Query_End_Date).toBeDefined();
                        expect(ajaxHelper['_queryTelemetryService'].LogQuery).toHaveBeenCalledTimes(4);
                        expect(ajaxHelper['_queryTelemetryService'].LogQuery).toHaveBeenCalledWith(tc);
                        expect(timeoutSpy).toHaveBeenCalledTimes(3);
                        var timeoutArgs = timeoutSpy.calls.mostRecent().args;
                        expect(timeoutArgs[1]).toBe(15000);
                        var finalResult = {};
                        spyOn(ajaxHelper, 'ExecuteAjax').and.returnValue(Promise.resolve(finalResult));
                        timeoutArgs[0]();
                        expect(ajaxHelper['ExecuteAjax']).toHaveBeenCalledWith(uriObj.uri, HttpMethod.Post, params, tc, 4, appId, undefined);
                        resolve();
                    });
                });
            });
        });
        it('should not retry if try count exceeded', function () {
            spyOn(window, 'setTimeout');
            var error = { response: { status: 429 } };
            var headers = {};
            var appId = 'app id';
            var hostName = 'hostname';
            var uriObj = {
                uri: function (host, id) { return null; }
            };
            var params = {};
            spyOn(uriObj, 'uri').and.returnValue('myuri');
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'mypart', 'myquery', null);
            spyOn(tc, 'addResponseDetails');
            spyOn(ajaxHelper, '_getHeaders').and.returnValue(Promise.resolve(headers));
            spyOn(ajaxHelper, '_getHostNameAndRetries').and.returnValue(Promise.resolve({ hostName: hostName, retryCount: 3 }));
            spyOn(ajaxHelper['_queryTelemetryService'], 'LogQuery');
            var axiosSpy = spyOn(axios, 'post').and.returnValue(Promise.reject(error));
            return ajaxHelper['ExecuteAjax'](uriObj.uri, HttpMethod.Post, params, tc, 3, appId).then(function (result) {
                fail('Expected query to reject');
            }).catch(function (e) {
                var args = axiosSpy.calls.mostRecent().args;
                expect(axios.post).toHaveBeenCalledTimes(1);
                expect(args[0]).toBe('myuri');
                expect(args[1]).toBe(params);
                expect(args[2].headers).toBe(headers);
                expect(uriObj.uri).toHaveBeenCalledWith(hostName, appId);
                expect(e).not.toBeDefined();
                expect(ajaxHelper['_getHeaders']).toHaveBeenCalledWith(tc);
                expect(ajaxHelper['_getHostNameAndRetries']).toHaveBeenCalledWith(tc);
                expect(tc.addResponseDetails).toHaveBeenCalledWith(error.response);
                expect(tc.retryCount).toBe(3);
                expect(tc.measurements.Request_Start).toBeGreaterThan(0);
                expect(tc.measurements.Query_End).toBeGreaterThan(0);
                expect(tc.measurements.Query_End_Date).toBeDefined();
                expect(ajaxHelper['_queryTelemetryService'].LogQuery).toHaveBeenCalledTimes(1);
                expect(ajaxHelper['_queryTelemetryService'].LogQuery).toHaveBeenCalledWith(tc);
                expect(window.setTimeout).not.toHaveBeenCalled();
            });
        });
    });
});
//# sourceMappingURL=AjaxHelper.spec.js.map