import Axios from 'axios';
import { ArmDebouncer } from './ArmDebouncer';
describe('ArmDebouncer', function () {
    var setInterval;
    var debouncer;
    var post;
    var resolve;
    var reject;
    beforeEach(function () {
        setInterval = spyOn(window, 'setInterval').and.returnValue(20);
        spyOn(window, 'clearInterval');
        debouncer = new ArmDebouncer(100, 2);
        post = spyOn(Axios, 'post').and.returnValue(new Promise(function (r, rj) {
            reject = rj;
            resolve = r;
        }));
    });
    it('should send a batched request with correct payload', function () {
        var request = {
            headers: {
                Authorization: 'my token',
                custom: '1'
            },
            method: 'POST',
            params: {},
            uri: 'https://management.azure.com/subscriptions/GUID/resourcegroups/MACTest/providers/microsoft.insights/alertrules?api-version=2014-04-01'
        };
        debouncer.batch(request);
        expect(setInterval).toHaveBeenCalledTimes(1);
        var callback = setInterval.calls.mostRecent().args[0];
        callback();
        expect(post).toHaveBeenCalledTimes(1);
        var args = post.calls.mostRecent().args;
        expect(args[0]).toBe('https://management.azure.com/batch?api-version=2015-11-01');
        var payload = args[1];
        expect(payload.requests.length).toBe(1);
        expect(payload.requests[0].url).toBe('/subscriptions/GUID/resourcegroups/MACTest/providers/microsoft.insights/alertrules?api-version=2014-04-01');
        expect(payload.requests[0].httpMethod).toBe(request.method);
        expect(payload.requests[0].requestHeaderDetails.custom).not.toBeDefined();
        expect(args[2].headers.Authorization).toBe('my token');
    });
    it('should batch 2 requests', function () {
        var requests = [{
                headers: {
                    Authorization: 'my token',
                    custom: '1'
                },
                method: 'POST',
                params: {},
                uri: 'https://management.azure.com/subscriptions/GUID/resourcegroups/MACTest/providers/microsoft.insights/alertrules'
            }, {
                headers: {
                    Authorization: 'my token',
                    custom: '1'
                },
                method: 'POST',
                params: {},
                uri: 'https://management.azure.com/subscriptions/GUID/resourcegroups/MACTest/providers/microsoft.insights/thinga'
            }];
        for (var i = 0; i < requests.length; i++) {
            debouncer.batch(requests[i]);
        }
        expect(setInterval).toHaveBeenCalledTimes(1);
        var callback = setInterval.calls.mostRecent().args[0];
        callback();
        expect(post).toHaveBeenCalledTimes(1);
        var args = post.calls.mostRecent().args;
        expect(args[0]).toBe('https://management.azure.com/batch?api-version=2015-11-01');
        var payload = args[1];
        expect(payload.requests.length).toBe(requests.length);
        expect(payload.requests[0].url).toBe('/subscriptions/GUID/resourcegroups/MACTest/providers/microsoft.insights/alertrules');
        expect(payload.requests[1].url).toBe('/subscriptions/GUID/resourcegroups/MACTest/providers/microsoft.insights/thinga');
        for (var i = 0; i < requests.length; i++) {
            expect(payload.requests[i].content).toBe(requests[i].params);
            expect(payload.requests[i].requestHeaderDetails.custom).not.toBeDefined();
            expect(payload.requests[i].httpMethod).toBe(requests[i].method);
        }
        expect(args[2].headers.Authorization).toBe('my token');
    });
    it('should reject if bad status code received for a batch response', function () {
        var request = {
            headers: {
                Authorization: 'my token',
                custom: '1'
            },
            method: 'POST',
            params: {},
            uri: 'https://management.azure.com/subscriptions/GUID/resourcegroups/MACTest/providers/microsoft.insights/thinga'
        };
        var promise = debouncer.batch(request);
        expect(setInterval).toHaveBeenCalledTimes(1);
        var callback = setInterval.calls.mostRecent().args[0];
        callback();
        expect(post).toHaveBeenCalledTimes(1);
        var payload = post.calls.mostRecent().args[1];
        expect(payload.requests.length).toBe(1);
        var responses = [{
                content: {},
                httpStatusCode: 400,
                headers: {},
                contentLength: 0
            }];
        resolve({
            status: 200,
            statusText: 'OK',
            headers: {},
            config: {},
            data: {
                responses: responses
            }
        });
        return promise.then(function () {
            fail('expected promise to reject');
        }).catch(function (e) {
            expect(e.response.status).toBe(400);
        });
    });
    it('should reject all if batch completely failed', function () {
        var request = {
            headers: {
                Authorization: 'my token',
                custom: '1'
            },
            method: 'POST',
            params: {},
            uri: 'https://management.azure.com/subscriptions/GUID/resourcegroups/MACTest/providers/microsoft.insights/thinga'
        };
        var promise = debouncer.batch(request);
        expect(setInterval).toHaveBeenCalledTimes(1);
        var callback = setInterval.calls.mostRecent().args[0];
        callback();
        expect(post).toHaveBeenCalledTimes(1);
        var payload = post.calls.mostRecent().args[1];
        expect(payload.requests.length).toBe(1);
        var responses = [{
                content: {},
                contentLength: 0,
                httpStatusCode: 400,
                headers: {}
            }];
        reject({
            status: 400,
            statusText: 'Bad request',
            headers: {},
            config: {},
            data: {
                responses: responses
            }
        });
        return promise.then(function () {
            fail('expected promise to reject');
        }).catch(function (e) {
            expect(e.status).toBe(400);
        });
    });
});
//# sourceMappingURL=ArmDebouncer.spec.js.map