import { ITelemetryService } from '../../SharedInterfaces';
import { TelemetryContext } from '../TelemetryContext';
import { IRouteConfiguration } from './IRouteConfiguration';
import { IArmConfiguration } from './IArmConfiguration';
import { QueryTelemetryContext } from './QueryTelemetryService';
export declare class AzureResourceCache {
    private _cache;
    constructor();
    get(resourceName: string, resourceType: string): string;
    set(resourceName: string, resourceType: string, resourceId: string): void;
}
export declare class ArmResourceService {
    private static _subscriptionsCount;
    private _queryTelemetryService;
    private _telemetryContext;
    private _ajaxHelper;
    private _armConfig;
    private _cache;
    private _debouncer;
    constructor(routeConfig: IRouteConfiguration, armConfig: IArmConfiguration, telemetryService: ITelemetryService, telemetryContext: TelemetryContext, instanceId: () => string);
    ExecuteQuery<TResult>(subscriptionId: string, resourceGroup: string, path: string, telemetryContext: QueryTelemetryContext, queryParams?: any): Promise<TResult[]>;
    GetResourceIdByName(resourceName: string, resourceType: string, telemetryContext: QueryTelemetryContext): Promise<string>;
    FetchResourcesInSubscriptions(resourceName: string, resourceType: string, telemetryContext: QueryTelemetryContext, stopOnFirst?: boolean): Promise<string[]>;
    FetchResourcesInSubscription(resourceName: string, resourceType: string, subscriptionId: string, telemetryContext: QueryTelemetryContext): Promise<string[]>;
    private _splitSubscriptionsIntoChunks(subscriptions);
    private _getFilterWithSubscriptionsquery(resourceName, resourceType, subscriptionClauses);
    private _getSubscriptionClauses(subscriptions);
    private _extendFilterWithCommonClauses(filter, resourceName, resourceType);
    private _getSubscriptions();
    private _executeAjax<TResult>(buildUri, telemetryContext, stopOnFirst?);
}
