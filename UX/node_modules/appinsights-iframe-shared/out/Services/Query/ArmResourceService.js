import { Promise } from 'es6-promise';
import { GraphPathTemplates } from './Constants';
import { Comparison, Operation, FilterHelper } from './shared';
import { AjaxHelper } from './AjaxHelper';
import { BuildGraphPath } from './UrlHelper';
import { QueryTelemetryService, QueryTelemetryContext } from './QueryTelemetryService';
import { ArmDebouncer } from './ArmDebouncer';
var AzureResourceCache = /** @class */ (function () {
    function AzureResourceCache() {
        this._cache = {};
    }
    AzureResourceCache.prototype.get = function (resourceName, resourceType) {
        return this._cache[resourceName + resourceType];
    };
    AzureResourceCache.prototype.set = function (resourceName, resourceType, resourceId) {
        this._cache[resourceName + resourceType] = resourceId;
    };
    return AzureResourceCache;
}());
export { AzureResourceCache };
/*
 *  Fetches ARM resources.
 */
var ArmResourceService = /** @class */ (function () {
    function ArmResourceService(routeConfig, armConfig, telemetryService, telemetryContext, instanceId) {
        this._queryTelemetryService = new QueryTelemetryService(telemetryService, telemetryContext);
        this._armConfig = armConfig;
        this._ajaxHelper = new AjaxHelper(routeConfig, telemetryService, telemetryContext, instanceId);
        this._cache = new AzureResourceCache();
        this._debouncer = new ArmDebouncer();
        this._telemetryContext = telemetryContext;
    }
    ArmResourceService.prototype.ExecuteQuery = function (subscriptionId, resourceGroup, path, telemetryContext, queryParams) {
        var graphPath = BuildGraphPath(subscriptionId, resourceGroup, path, queryParams);
        return this._executeAjax(function (host) { return host + graphPath; }, telemetryContext);
    };
    ArmResourceService.prototype.GetResourceIdByName = function (resourceName, resourceType, telemetryContext) {
        var _this = this;
        resourceName = resourceName.trim();
        var cached = this._cache.get(resourceName, resourceType);
        if (cached !== undefined) {
            telemetryContext.statusCode = 200;
            telemetryContext.statusText = 'OK';
            this._queryTelemetryService.LogCacheHit(telemetryContext);
            return Promise.resolve(cached);
        }
        else {
            return this.FetchResourcesInSubscriptions(resourceName, resourceType, telemetryContext, true).then(function (resultArray) {
                var result = resultArray && resultArray.length > 0 ? resultArray[0] : null;
                _this._cache.set(resourceName, resourceType, result);
                return result;
            });
        }
    };
    ArmResourceService.prototype.FetchResourcesInSubscriptions = function (resourceName, resourceType, telemetryContext, stopOnFirst) {
        var _this = this;
        return this._getSubscriptions().then(function (subscriptions) {
            if (!subscriptions || subscriptions.length === 0) {
                return [];
            }
            if (subscriptions.length === 1) {
                // issue regular call for the given subscription
                return _this.FetchResourcesInSubscription(resourceName, resourceType, subscriptions[0], telemetryContext);
            }
            var graphPath = BuildGraphPath('', '', GraphPathTemplates.Resources, null);
            var subscriptionClauses = _this._splitSubscriptionsIntoChunks(subscriptions);
            // issue first call for the current subscription (or all if count < 10) and wait for its result
            var filter = _this._getFilterWithSubscriptionsquery(resourceName, resourceType, subscriptionClauses[0]);
            var graphPathWithFilter = graphPath + '&' + filter.GetValue();
            return _this._executeAjax(function (host) { return host + graphPathWithFilter; }, telemetryContext, stopOnFirst).then(function (result) {
                if (result && result.length > 0) {
                    return result.map(function (x) { return x.id; });
                }
                // if resource is not found issue additional queries
                var promises = [];
                subscriptionClauses.slice(1).forEach(function (subscriptionClause) {
                    var tc = new QueryTelemetryContext(_this._telemetryContext, telemetryContext.operationId, telemetryContext.partName, telemetryContext.queryName, null);
                    promises.push(_this._executeAjax(function (host) {
                        var clauseFilter = _this._getFilterWithSubscriptionsquery(resourceName, resourceType, subscriptionClause);
                        return host + graphPath + '&' + clauseFilter.GetValue();
                    }, tc, stopOnFirst));
                });
                return Promise.all(promises).then(function (queryResults) {
                    var resourcesFound = [];
                    queryResults.forEach(function (resources) {
                        if (resources) {
                            resources.forEach(function (resource) {
                                resourcesFound.push(resource.id);
                            });
                        }
                    });
                    return resourcesFound;
                });
            });
        });
    };
    ArmResourceService.prototype.FetchResourcesInSubscription = function (resourceName, resourceType, subscriptionId, telemetryContext) {
        var graphPath = BuildGraphPath(subscriptionId, '', GraphPathTemplates.Resources, null);
        var filter = new FilterHelper();
        this._extendFilterWithCommonClauses(filter, resourceName, resourceType);
        var graphPathWithFilter = graphPath + '&' + filter.GetValue();
        return this._executeAjax(function (host) { return host + graphPathWithFilter; }, telemetryContext)
            .then(function (result) {
            return result && result.map(function (x) { return x.id; });
        });
    };
    ArmResourceService.prototype._splitSubscriptionsIntoChunks = function (subscriptions) {
        var subscriptionClauses = [];
        var length = subscriptions.length;
        if (length < ArmResourceService._subscriptionsCount) {
            // if subscriptions count less than maximum supported by ARM for parallelization
            // let's issue only one call for all subscriptions at once
            subscriptionClauses.push(this._getSubscriptionClauses(subscriptions));
        }
        else {
            // if subscriptions count more than maximum supported by ARM for parallelization
            // let's issue first call for the current subscription and wait for its result
            subscriptionClauses.push(this._getSubscriptionClauses([subscriptions[0]]));
            // -> if resource was not found than issue calls to all other subscriptions grouped by 10
            var i = 1;
            while (i < length) {
                subscriptionClauses.push(this._getSubscriptionClauses(subscriptions.slice(i, i + ArmResourceService._subscriptionsCount)));
                i += ArmResourceService._subscriptionsCount;
            }
        }
        return subscriptionClauses;
    };
    ArmResourceService.prototype._getFilterWithSubscriptionsquery = function (resourceName, resourceType, subscriptionClauses) {
        var filter = new FilterHelper();
        this._extendFilterWithCommonClauses(filter, resourceName, resourceType);
        filter.AppendComplexClause(subscriptionClauses, Operation.And);
        return filter;
    };
    ArmResourceService.prototype._getSubscriptionClauses = function (subscriptions) {
        var clauses = [];
        subscriptions.forEach(function (subscription) {
            clauses.push({
                clause: { name: 'SubscriptionId', value: subscription, operator: Comparison.Equal },
                operator: Operation.Or
            });
        });
        return clauses;
    };
    ArmResourceService.prototype._extendFilterWithCommonClauses = function (filter, resourceName, resourceType) {
        // resource name clause
        if (resourceName !== '') {
            filter.AppendClause({
                clause: { name: 'name', value: resourceName, operator: Comparison.Equal },
                operator: Operation.And
            });
        }
        // resource type clause
        if (resourceType !== '') {
            filter.AppendClause({
                clause: { name: 'resourceType', value: resourceType, operator: Comparison.Equal },
                operator: Operation.And
            });
        }
    };
    ArmResourceService.prototype._getSubscriptions = function () {
        return this._armConfig.Subscriptions().then(function (subscriptions) {
            if (subscriptions && subscriptions.value) {
                return subscriptions.value.split(',');
            }
            return null;
        });
    };
    ArmResourceService.prototype._executeAjax = function (buildUri, telemetryContext, stopOnFirst) {
        return this._ajaxHelper.ExecuteGetArrayAjax(buildUri, telemetryContext, null, this._debouncer, stopOnFirst);
    };
    // ARM supports parallel calls to up to 20 subscriptions
    ArmResourceService._subscriptionsCount = 20;
    return ArmResourceService;
}());
export { ArmResourceService };
//# sourceMappingURL=ArmResourceService.js.map