import { ArmResourceService } from '.';
import { Promise } from 'es6-promise';
import { TelemetryContext } from '../TelemetryContext';
import { QueryTelemetryContext } from './QueryTelemetryService';
var resourcePayload = [
    {
        'id': '/subscriptions/sub1/resourceGroups/rg1/providers/microsoft.insights/components/rs1',
        'name': 'rs1',
        'type': 'microsoft.insights/components',
        'kind': 'web',
        'location': 'eastus',
        'tags': {}
    },
    {
        'id': '/subscriptions/sub2/resourceGroups/rg2/providers/microsoft.insights/components/rs2',
        'name': 'rs2',
        'type': 'microsoft.insights/components',
        'kind': 'web',
        'location': 'westus',
        'tags': {}
    }
];
describe('ArmResourceService', function () {
    var armResourceService;
    var routeConfig;
    var armConfig;
    var telemetryService;
    var telemetryContext;
    var instanceId;
    beforeEach(function () {
        armConfig = {
            Subscriptions: function () { return Promise.resolve({ inCache: false, value: null }); }
        };
        routeConfig = {
            RouteInfo: function () { return Promise.resolve(null); },
            RouteName: function () { return 'Csm'; },
            Token: function () { return Promise.resolve(null); }
        };
        telemetryService = {
            LogEvent: function () { },
            LogException: function () { },
            Register: function () { return null; },
            LogTrace: function () { }
        };
        telemetryContext = new TelemetryContext(telemetryService);
    });
    describe('ExecuteQuery', function () {
        it('Executes query.', function () {
            armResourceService = new ArmResourceService(routeConfig, armConfig, telemetryService, telemetryContext, function () { return instanceId; });
            spyOn(armResourceService, 'ExecuteQuery').and.callThrough();
            spyOn(armResourceService, '_executeAjax').and.returnValue(Promise.resolve([]));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            return armResourceService.ExecuteQuery('sub1', 'rg1', 'somepath', tc).then(function (result) {
                expect(result.length).toBe(0);
                expect(armResourceService['_executeAjax']).toHaveBeenCalledTimes(1);
                var args = armResourceService['_executeAjax'].calls.mostRecent().args;
                expect(args[0]('')).toBe('/subscriptions/sub1/resourcegroups/rg1/somepath?api-version=2014-04-01-preview');
                expect(armResourceService['ExecuteQuery']).toHaveBeenCalledTimes(1);
            }).catch(function (e) {
                fail(e);
            });
        });
    });
    describe('FetchResourcesInSubscription', function () {
        it('Returns nothing if no components in the given subscription.', function () {
            armResourceService = new ArmResourceService(routeConfig, armConfig, telemetryService, telemetryContext, function () { return instanceId; });
            spyOn(armResourceService, 'FetchResourcesInSubscription').and.callThrough();
            spyOn(armResourceService, '_executeAjax').and.returnValue(Promise.resolve([]));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            return armResourceService.FetchResourcesInSubscription('test', 'test', 'sub1', tc).then(function (result) {
                expect(result.length).toBe(0);
                expect(armResourceService['_executeAjax']).toHaveBeenCalledTimes(1);
                var args = armResourceService['_executeAjax'].calls.mostRecent().args;
                expect(args[0]('')).toBe('/subscriptions/sub1/resources?api-version=2014-04-01-preview&$filter=name eq \'test\''
                    + ' and resourceType eq \'test\'');
                expect(armResourceService['FetchResourcesInSubscription']).toHaveBeenCalledTimes(1);
            }).catch(function (e) {
                fail(e);
            });
        });
        it('Returns resources for the given subscription.', function () {
            armResourceService = new ArmResourceService(routeConfig, armConfig, telemetryService, telemetryContext, function () { return instanceId; });
            spyOn(armResourceService, 'FetchResourcesInSubscription').and.callThrough();
            spyOn(armResourceService, '_executeAjax').and.returnValue(Promise.resolve(resourcePayload));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            return armResourceService.FetchResourcesInSubscription('test', 'test', 'sub1', tc).then(function (result) {
                expect(result.length).toBe(2);
                expect(armResourceService['_executeAjax']).toHaveBeenCalledTimes(1);
                var args = armResourceService['_executeAjax'].calls.mostRecent().args;
                expect(args[0]('')).toBe('/subscriptions/sub1/resources?api-version=2014-04-01-preview&$filter=name eq \'test\''
                    + ' and resourceType eq \'test\'');
                expect(armResourceService['FetchResourcesInSubscription']).toHaveBeenCalledTimes(1);
            }).catch(function (e) {
                fail(e);
            });
        });
    });
    describe('FetchResourcesInSubscriptions', function () {
        it('Returns nothing if null subscriptions list was received by iframe.', function () {
            armResourceService = new ArmResourceService(routeConfig, armConfig, telemetryService, telemetryContext, function () { return instanceId; });
            spyOn(armResourceService, 'FetchResourcesInSubscription').and.callThrough();
            spyOn(armResourceService, '_executeAjax').and.returnValue(Promise.resolve([]));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            return armResourceService.FetchResourcesInSubscriptions('test', 'test', tc).then(function (result) {
                expect(result.length).toBe(0);
                expect(armResourceService['_executeAjax']).toHaveBeenCalledTimes(0);
            }).catch(function (e) {
                fail(e);
            });
        });
        it('Returns nothing if empty subscriptions list was received by iframe.', function () {
            armConfig = {
                Subscriptions: function () { return Promise.resolve({ inCache: false, value: '' }); }
            };
            armResourceService = new ArmResourceService(routeConfig, armConfig, telemetryService, telemetryContext, function () { return instanceId; });
            spyOn(armResourceService, 'FetchResourcesInSubscription').and.callThrough();
            spyOn(armResourceService, '_executeAjax').and.returnValue(Promise.resolve([]));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            return armResourceService.FetchResourcesInSubscriptions('test', 'test', tc).then(function (result) {
                expect(result.length).toBe(0);
                expect(armResourceService['_executeAjax']).toHaveBeenCalledTimes(0);
            }).catch(function (e) {
                fail(e);
            });
        });
        it('Returns nothing for 1 subscription in the list and no components.', function () {
            armConfig = {
                Subscriptions: function () { return Promise.resolve({ inCache: false, value: 'sub1' }); }
            };
            armResourceService = new ArmResourceService(routeConfig, armConfig, telemetryService, telemetryContext, function () { return instanceId; });
            spyOn(armResourceService, 'FetchResourcesInSubscription').and.callThrough();
            spyOn(armResourceService, '_executeAjax').and.returnValue(Promise.resolve([]));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            return armResourceService.FetchResourcesInSubscriptions('test', 'test', tc).then(function (result) {
                expect(result.length).toBe(0);
                expect(armResourceService['_executeAjax']).toHaveBeenCalledTimes(1);
                var args = armResourceService['_executeAjax'].calls.mostRecent().args;
                expect(args[0]('')).toBe('/subscriptions/sub1/resources?api-version=2014-04-01-preview&$filter=name eq \'test\''
                    + ' and resourceType eq \'test\'');
                expect(armResourceService['FetchResourcesInSubscription']).toHaveBeenCalledTimes(1);
            }).catch(function (e) {
                fail(e);
            });
        });
        it('Returns nothing for multiple subscriptions (<10) and no components.', function () {
            armConfig = {
                Subscriptions: function () { return Promise.resolve({ inCache: false, value: 'sub1,sub2,sub3' }); }
            };
            armResourceService = new ArmResourceService(routeConfig, armConfig, telemetryService, telemetryContext, function () { return instanceId; });
            spyOn(armResourceService, 'FetchResourcesInSubscription').and.callThrough();
            spyOn(armResourceService, '_executeAjax').and.returnValue(Promise.resolve([]));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            return armResourceService.FetchResourcesInSubscriptions('test', 'test', tc).then(function (result) {
                expect(result.length).toBe(0);
                expect(armResourceService['_executeAjax']).toHaveBeenCalledTimes(1);
                var args = armResourceService['_executeAjax'].calls.mostRecent().args;
                expect(args[0]('')).toBe('/resources?api-version=2014-04-01-preview&$filter=name eq \'test\''
                    + ' and resourceType eq \'test\' and (  SubscriptionId eq \'sub1\' or SubscriptionId eq \'sub2\' or SubscriptionId eq \'sub3\')');
                expect(armResourceService['FetchResourcesInSubscription']).toHaveBeenCalledTimes(0);
            }).catch(function (e) {
                fail(e);
            });
        });
        it('Returns nothing for multiple subscriptions (>20) and no components.', function () {
            armConfig = {
                Subscriptions: function () { return Promise.resolve({ inCache: false, value: 'sub1,sub2,sub3,sub4,sub5,sub6,sub7,sub8,sub9,sub10,sub11,'
                        + 'sub12,sub13,sub14,sub15,sub16,sub17,sub18,sub19,sub20,sub21' }); }
            };
            armResourceService = new ArmResourceService(routeConfig, armConfig, telemetryService, telemetryContext, function () { return instanceId; });
            spyOn(armResourceService, 'FetchResourcesInSubscription').and.callThrough();
            spyOn(armResourceService, '_executeAjax').and.returnValue(Promise.resolve([]));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            return armResourceService.FetchResourcesInSubscriptions('test', 'test', tc).then(function (result) {
                expect(result.length).toBe(0);
                expect(armResourceService['_executeAjax']).toHaveBeenCalledTimes(2);
                expect(armResourceService['FetchResourcesInSubscription']).toHaveBeenCalledTimes(0);
            }).catch(function (e) {
                fail(e);
            });
        });
        it('Returns resources for 1 subscription in the list.', function () {
            armConfig = {
                Subscriptions: function () { return Promise.resolve({ inCache: false, value: 'sub1' }); }
            };
            armResourceService = new ArmResourceService(routeConfig, armConfig, telemetryService, telemetryContext, function () { return instanceId; });
            spyOn(armResourceService, 'FetchResourcesInSubscription').and.callThrough();
            spyOn(armResourceService, '_executeAjax').and.returnValue(Promise.resolve(resourcePayload));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            return armResourceService.FetchResourcesInSubscriptions('test', 'test', tc).then(function (result) {
                expect(result.length).toBe(2);
                expect(armResourceService['_executeAjax']).toHaveBeenCalledTimes(1);
                expect(armResourceService['FetchResourcesInSubscription']).toHaveBeenCalledTimes(1);
            }).catch(function (e) {
                fail(e);
            });
        });
        it('Returns resources for multiple subscriptions (<20) in the list.', function () {
            armConfig = {
                Subscriptions: function () { return Promise.resolve({ inCache: false, value: 'sub1,sub2,sub3' }); }
            };
            armResourceService = new ArmResourceService(routeConfig, armConfig, telemetryService, telemetryContext, function () { return instanceId; });
            spyOn(armResourceService, 'FetchResourcesInSubscription').and.callThrough();
            spyOn(armResourceService, '_executeAjax').and.returnValue(Promise.resolve(resourcePayload));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            return armResourceService.FetchResourcesInSubscriptions('test', 'test', tc).then(function (result) {
                expect(result.length).toBe(2);
                expect(armResourceService['_executeAjax']).toHaveBeenCalledTimes(1);
                expect(armResourceService['FetchResourcesInSubscription']).toHaveBeenCalledTimes(0);
            }).catch(function (e) {
                fail(e);
            });
        });
        it('Returns resources for multiple subscriptions (>20) in the list.', function () {
            armConfig = {
                Subscriptions: function () { return Promise.resolve({ inCache: false, value: 'sub1,sub2,sub3,sub4,sub5,sub6,sub7,sub8,sub9,sub10,sub11,'
                        + 'sub12,sub13,sub14,sub15,sub16,sub17,sub18,sub19,sub20,sub21' }); }
            };
            armResourceService = new ArmResourceService(routeConfig, armConfig, telemetryService, telemetryContext, function () { return instanceId; });
            spyOn(armResourceService, 'FetchResourcesInSubscription').and.callThrough();
            spyOn(armResourceService, '_executeAjax').and.returnValue(Promise.resolve(resourcePayload));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            return armResourceService.FetchResourcesInSubscriptions('test', 'test', tc).then(function (result) {
                expect(result.length).toBe(2);
                expect(armResourceService['_executeAjax']).toHaveBeenCalledTimes(1);
                expect(armResourceService['FetchResourcesInSubscription']).toHaveBeenCalledTimes(0);
            }).catch(function (e) {
                fail(e);
            });
        });
        it('Returns resources for multiple subscriptions (>20) if no resources found in the first one.', function () {
            armConfig = {
                Subscriptions: function () { return Promise.resolve({ inCache: false, value: 'sub1,sub2,sub3,sub4,sub5,sub6,sub7,sub8,sub9,sub10,sub11,'
                        + 'sub12,sub13,sub14,sub15,sub16,sub17,sub18,sub19,sub20,sub21' }); }
            };
            armResourceService = new ArmResourceService(routeConfig, armConfig, telemetryService, telemetryContext, function () { return instanceId; });
            spyOn(armResourceService, 'FetchResourcesInSubscription').and.callThrough();
            spyOn(armResourceService, '_executeAjax').and.returnValues(Promise.resolve([]), Promise.resolve(resourcePayload));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            return armResourceService.FetchResourcesInSubscriptions('test', 'test', tc).then(function (result) {
                expect(result.length).toBe(2);
                expect(armResourceService['_executeAjax']).toHaveBeenCalledTimes(2);
                expect(armResourceService['FetchResourcesInSubscription']).toHaveBeenCalledTimes(0);
            }).catch(function (e) {
                fail(e);
            });
        });
        it('Returns joined resources for multiple subscriptions (>20) if no resources found in the first one.', function () {
            armConfig = {
                Subscriptions: function () { return Promise.resolve({
                    inCache: false, value: 'sub1,sub2,sub3,sub4,sub5,sub6,sub7,sub8,sub9,sub10,sub11,sub12,'
                        + 'sub13,sub14,sub15,sub16,sub17,sub18,sub19,sub20,sub21'
                }); }
            };
            armResourceService = new ArmResourceService(routeConfig, armConfig, telemetryService, telemetryContext, function () { return instanceId; });
            spyOn(armResourceService, 'FetchResourcesInSubscription').and.callThrough();
            spyOn(armResourceService, '_executeAjax').and.returnValues(Promise.resolve([]), Promise.resolve(resourcePayload), Promise.resolve(resourcePayload));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            return armResourceService.FetchResourcesInSubscriptions('test', 'test', tc).then(function (result) {
                expect(result.length).toBe(2);
                expect(armResourceService['_executeAjax']).toHaveBeenCalledTimes(2);
                expect(armResourceService['FetchResourcesInSubscription']).toHaveBeenCalledTimes(0);
                var args = armResourceService['_executeAjax'].calls.allArgs;
                expect(args()[1][0]('')).toBe('/resources?api-version=2014-04-01-preview&$filter=name eq \'test\' and resourceType eq \'test\' and'
                    + ' (  SubscriptionId eq \'sub2\' or SubscriptionId eq \'sub3\' or SubscriptionId eq \'sub4\' or '
                    + 'SubscriptionId eq \'sub5\' or SubscriptionId eq \'sub6\' or SubscriptionId eq \'sub7\' or SubscriptionId eq \'sub8\' or '
                    + 'SubscriptionId eq \'sub9\' or SubscriptionId eq \'sub10\' or SubscriptionId eq \'sub11\' or '
                    + 'SubscriptionId eq \'sub12\' or SubscriptionId eq \'sub13\' or SubscriptionId eq \'sub14\' or '
                    + 'SubscriptionId eq \'sub15\' or SubscriptionId eq \'sub16\' or SubscriptionId eq \'sub17\' or SubscriptionId eq \'sub18\' or '
                    + 'SubscriptionId eq \'sub19\' or SubscriptionId eq \'sub20\' or SubscriptionId eq \'sub21\')');
            }).catch(function (e) {
                fail(e);
            });
        });
    });
    describe('GetResourceIdByName', function () {
        it('Should fetch resources with query', function () {
            armResourceService = new ArmResourceService(routeConfig, armConfig, telemetryService, telemetryContext, function () { return instanceId; });
            spyOn(armResourceService, 'FetchResourcesInSubscriptions').and.returnValue(Promise.resolve(['resource ID', 'resource ID 1']));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            return armResourceService.GetResourceIdByName('resource name', 'resource type', tc).then(function (id) {
                expect(id).toBe('resource ID');
                expect(armResourceService['FetchResourcesInSubscriptions']).toHaveBeenCalledTimes(1);
            });
        });
        it('Should not fetch if cached', function () {
            armResourceService = new ArmResourceService(routeConfig, armConfig, telemetryService, telemetryContext, function () { return instanceId; });
            spyOn(armResourceService, 'FetchResourcesInSubscriptions').and.returnValue(Promise.resolve(['resource ID', 'resource ID 1']));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            return armResourceService.GetResourceIdByName('resource name', 'resource type', tc).then(function (id) {
                armResourceService['FetchResourcesInSubscriptions'].calls.reset();
                return armResourceService.GetResourceIdByName('resource name', 'resource type', tc).then(function (final) {
                    expect(armResourceService['FetchResourcesInSubscriptions']).not.toHaveBeenCalled();
                    expect(final).toBe('resource ID');
                });
            });
        });
        it('Should fetch if another resource cached', function () {
            armResourceService = new ArmResourceService(routeConfig, armConfig, telemetryService, telemetryContext, function () { return instanceId; });
            spyOn(armResourceService, 'FetchResourcesInSubscriptions').and.returnValue(Promise.resolve(['resource ID', 'resource ID 1']));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            return armResourceService.GetResourceIdByName('resource name', 'resource type', tc).then(function (id) {
                armResourceService['FetchResourcesInSubscriptions'].calls.reset();
                return armResourceService.GetResourceIdByName('resource name', 'type 1', tc).then(function (final) {
                    expect(armResourceService['FetchResourcesInSubscriptions']).toHaveBeenCalledTimes(1);
                });
            });
        });
    });
});
//# sourceMappingURL=ArmResourceService.spec.js.map