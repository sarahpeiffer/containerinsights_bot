import { ITelemetryService } from '../../SharedInterfaces';
import { TelemetryContext } from '../TelemetryContext';
import { QueryTelemetryContext, IRouteConfiguration, IArmConfiguration, ComponentId, DraftMetadata } from '.';
export declare class ComponentIdService {
    private _armResourceService;
    private _queryTelemetryService;
    private _insightsProvider;
    constructor(routeConfig: IRouteConfiguration, armConfig: IArmConfiguration, telemetryService: ITelemetryService, telemetryContext: TelemetryContext, instanceId: () => string);
    /** Gets extended AI resource information from ARM by name */
    FetchComponentIdByName(name: string, telemetryContext: QueryTelemetryContext): Promise<ComponentId>;
    /**
    * Converts a resource ID string to a Shared.DataModels.ComponentId instance.
    * Resource ID string in the format "/subscriptions/{0}/resourcegroups/{1}/providers/microsoft.insights/components/{2}"
    */
    ResourceIdToComponentId(resourceId: string): ComponentId;
    GetComponentIdFromMetadata(metadata: DraftMetadata): ComponentId;
    /** DEPRECATED
     * Use DraftQueryService.ExecuteMetadataQuery + GetComponentIdFromMetadata instead.
     */
    GetComponentId(appName: string, telemetryContext: QueryTelemetryContext): Promise<ComponentId>;
    private _getData(name, telemetryContext);
}
