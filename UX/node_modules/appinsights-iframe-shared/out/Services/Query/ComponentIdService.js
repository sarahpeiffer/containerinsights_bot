import { Promise } from 'es6-promise';
import { ComponentIdCache } from './ComponentIdCache';
import { ArmResourceService, QueryTelemetryService } from '.';
var ComponentIdService = /** @class */ (function () {
    function ComponentIdService(routeConfig, armConfig, telemetryService, telemetryContext, instanceId) {
        this._insightsProvider = 'microsoft.insights/components';
        this._queryTelemetryService = new QueryTelemetryService(telemetryService, telemetryContext);
        this._armResourceService = new ArmResourceService(routeConfig, armConfig, telemetryService, telemetryContext, instanceId);
    }
    /** Gets extended AI resource information from ARM by name */
    ComponentIdService.prototype.FetchComponentIdByName = function (name, telemetryContext) {
        var _this = this;
        return this._getData(name, telemetryContext).then(function (result) {
            if (!result || result.length === 0) {
                return null;
            }
            return _this.ResourceIdToComponentId(result[0]);
        });
    };
    /**
    * Converts a resource ID string to a Shared.DataModels.ComponentId instance.
    * Resource ID string in the format "/subscriptions/{0}/resourcegroups/{1}/providers/microsoft.insights/components/{2}"
    */
    ComponentIdService.prototype.ResourceIdToComponentId = function (resourceId) {
        var parts = (resourceId + '').split('/');
        var subscriptionId;
        var resourceGroup;
        var componentName;
        for (var i = 0; i < parts.length; i++) {
            switch (parts[i].toLowerCase()) {
                case 'subscriptions':
                    // next value is the subscriptionId
                    if (i + 1 < parts.length) {
                        subscriptionId = parts[i + 1];
                        i++;
                    }
                    break;
                case 'resourcegroups':
                    // next value is resource group
                    if (i + 1 < parts.length) {
                        resourceGroup = parts[i + 1];
                        i++;
                    }
                    break;
                case 'components':
                    // next value is component name
                    if (i + 1 < parts.length) {
                        componentName = parts[i + 1];
                        i++;
                    }
                    break;
            }
        }
        return { SubscriptionId: subscriptionId, ResourceGroup: resourceGroup, Name: componentName };
    };
    ComponentIdService.prototype.GetComponentIdFromMetadata = function (metadata) {
        if (metadata && metadata.applications && metadata.applications.length) {
            return this.ResourceIdToComponentId(metadata.applications[0].resourceId);
        }
        else {
            return null;
        }
    };
    /** DEPRECATED
     * Use DraftQueryService.ExecuteMetadataQuery + GetComponentIdFromMetadata instead.
     */
    ComponentIdService.prototype.GetComponentId = function (appName, telemetryContext) {
        var componentId = ComponentIdCache.Instance().Get(appName);
        if (componentId) {
            telemetryContext.statusCode = 200;
            telemetryContext.statusText = 'OK';
            this._queryTelemetryService.LogCacheHit(telemetryContext);
            return Promise.resolve(componentId);
        }
        else {
            return this.FetchComponentIdByName(appName, telemetryContext).then(function (id) {
                ComponentIdCache.Instance().Add(appName, id);
                return id;
            });
        }
    };
    ComponentIdService.prototype._getData = function (name, telemetryContext) {
        return this._armResourceService.FetchResourcesInSubscriptions(name, this._insightsProvider, telemetryContext);
    };
    return ComponentIdService;
}());
export { ComponentIdService };
//# sourceMappingURL=ComponentIdService.js.map