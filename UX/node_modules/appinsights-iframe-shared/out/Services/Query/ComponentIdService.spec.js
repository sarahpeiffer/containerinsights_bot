import { ComponentIdService, ComponentIdCache } from '.';
import { TelemetryContext } from '../TelemetryContext';
import { Promise } from 'es6-promise';
import { QueryTelemetryContext } from './QueryTelemetryService';
describe('ComponentIdService', function () {
    var componentIdService;
    var routeConfig;
    var armConfig;
    var telemetryService;
    var telemetryContext;
    var instanceId;
    var componentId;
    beforeEach(function () {
        componentId = {
            SubscriptionId: 'sub1',
            ResourceGroup: 'rg1',
            Name: 'res1'
        };
        routeConfig = {
            RouteInfo: function () { return Promise.resolve(null); },
            RouteName: function () { return 'Csm'; },
            Token: function () { return Promise.resolve(null); }
        };
        armConfig = {
            Subscriptions: function () { return Promise.resolve({ inCache: false, value: null }); }
        };
        telemetryService = {
            LogEvent: function () { },
            LogException: function () { },
            Register: function () { return null; },
            LogTrace: function () { }
        };
        telemetryContext = new TelemetryContext(telemetryService);
        ComponentIdCache.Instance().Clear();
    });
    describe('ResourceIdToComponentId', function () {
        it('Extracts component out of id', function () {
            componentIdService = new ComponentIdService(routeConfig, armConfig, telemetryService, telemetryContext, function () { return instanceId; });
            var id = '/subscriptions/sub1/resourcegroups/rg1/providers/microsoft.insights/components/res1';
            var result = componentIdService.ResourceIdToComponentId(id);
            var expected = {
                SubscriptionId: 'sub1',
                ResourceGroup: 'rg1',
                Name: 'res1'
            };
            expect(result.SubscriptionId).toBe(expected.SubscriptionId);
            expect(result.ResourceGroup).toBe(expected.ResourceGroup);
            expect(result.Name).toBe(expected.Name);
        });
        it('Extracts component with undefined values out of empty id', function () {
            componentIdService = new ComponentIdService(routeConfig, armConfig, telemetryService, telemetryContext, function () { return instanceId; });
            var id = '';
            var result = componentIdService.ResourceIdToComponentId(id);
            expect(result.SubscriptionId).toBe(undefined);
            expect(result.ResourceGroup).toBe(undefined);
            expect(result.Name).toBe(undefined);
        });
    });
    describe('FetchComponentIdByName', function () {
        it('Returns component by the name.', function () {
            armConfig = {
                Subscriptions: function () { return Promise.resolve({ inCache: false, value: 'sub1' }); }
            };
            componentIdService = new ComponentIdService(routeConfig, armConfig, telemetryService, telemetryContext, function () { return instanceId; });
            var expectedResult = ['/subscriptions/sub1/resourceGroups/rg1/providers/microsoft.insights/components/rs1'];
            spyOn(componentIdService, '_getData').and.returnValue(Promise.resolve(expectedResult));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            return componentIdService.FetchComponentIdByName('rs1', tc).then(function (result) {
                expect(result.Name).toBe('rs1');
                expect(result.ResourceGroup).toBe('rg1');
                expect(result.SubscriptionId).toBe('sub1');
                expect(componentIdService['_getData']).toHaveBeenCalledTimes(1);
            }).catch(function (e) {
                fail(e);
            });
        });
        it('Returns no component if not found.', function () {
            armConfig = {
                Subscriptions: function () { return Promise.resolve({ inCache: false, value: 'sub1' }); }
            };
            componentIdService = new ComponentIdService(routeConfig, armConfig, telemetryService, telemetryContext, function () { return instanceId; });
            spyOn(componentIdService, '_getData').and.returnValue(Promise.resolve([]));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            return componentIdService.FetchComponentIdByName('rs1', tc).then(function (result) {
                expect(result).toBeNull();
                expect(componentIdService['_getData']).toHaveBeenCalledTimes(1);
            }).catch(function (e) {
                fail(e);
            });
        });
        it('Returns first found component by the name.', function () {
            armConfig = {
                Subscriptions: function () { return Promise.resolve({ inCache: false, value: 'sub1' }); }
            };
            componentIdService = new ComponentIdService(routeConfig, armConfig, telemetryService, telemetryContext, function () { return instanceId; });
            var expectedResult = [
                '/subscriptions/sub1/resourceGroups/rg1/providers/microsoft.insights/components/rs1',
                '/subscriptions/sub1/resourceGroups/rg2/providers/microsoft.insights/components/rs2',
            ];
            spyOn(componentIdService, '_getData').and.returnValue(Promise.resolve(expectedResult));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            return componentIdService.FetchComponentIdByName('rs1', tc).then(function (result) {
                expect(result.Name).toBe('rs1');
                expect(result.ResourceGroup).toBe('rg1');
                expect(result.SubscriptionId).toBe('sub1');
            }).catch(function (e) {
                fail(e);
            });
        });
    });
    describe('GetComponentId', function () {
        it('Returns component from the portal for central component.', function () {
            componentIdService = new ComponentIdService(routeConfig, armConfig, telemetryService, telemetryContext, function () { return instanceId; });
            spyOn(componentIdService, '_getData').and.returnValue(Promise.resolve(['/subscriptions/sub1/resourcegroups/rg1/providers/microsoft.insights/components/res1']));
            ComponentIdCache.Instance().Add('appName', componentId);
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            return componentIdService.GetComponentId('appName', tc).then(function (result) {
                expect(result.Name).toBe('res1');
                expect(result.ResourceGroup).toBe('rg1');
                expect(result.SubscriptionId).toBe('sub1');
                expect(componentIdService['_getData']).toHaveBeenCalledTimes(0);
            }).catch(function (e) {
                fail(e);
            });
        });
        it('Returns component from the cache for the second call.', function () {
            componentIdService = new ComponentIdService(routeConfig, armConfig, telemetryService, telemetryContext, function () { return instanceId; });
            spyOn(componentIdService, '_getData').and.returnValue(Promise.resolve(['/subscriptions/sub1/resourcegroups/rg1/providers/microsoft.insights/components/res1']));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            return componentIdService.GetComponentId('appName', tc).then(function (result) {
                expect(result.Name).toBe('res1');
                expect(result.ResourceGroup).toBe('rg1');
                expect(result.SubscriptionId).toBe('sub1');
                expect(componentIdService['_getData']).toHaveBeenCalledTimes(1);
                return componentIdService.GetComponentId('appName', tc).then(function (newResult) {
                    expect(newResult.Name).toBe('res1');
                    expect(newResult.ResourceGroup).toBe('rg1');
                    expect(newResult.SubscriptionId).toBe('sub1');
                    expect(componentIdService['_getData']).toHaveBeenCalledTimes(1);
                }).catch(function (e) {
                    fail(e);
                });
            }).catch(function (e) {
                fail(e);
            });
        });
        it('Returns component from ARM for non-central node.', function () {
            armConfig = {
                Subscriptions: function () { return Promise.resolve({ inCache: false, value: 'sub1' }); }
            };
            componentIdService = new ComponentIdService(routeConfig, armConfig, telemetryService, telemetryContext, function () { return instanceId; });
            var expectedResult = [
                '/subscriptions/sub1/resourceGroups/rg2/providers/microsoft.insights/components/rs2',
            ];
            spyOn(componentIdService, '_getData').and.returnValue(Promise.resolve(expectedResult));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            return componentIdService.GetComponentId('appName', tc).then(function (result) {
                expect(result.Name).toBe('rs2');
                expect(result.ResourceGroup).toBe('rg2');
                expect(result.SubscriptionId).toBe('sub1');
                expect(componentIdService['_getData']).toHaveBeenCalledTimes(1);
            }).catch(function (e) {
                fail(e);
            });
        });
    });
});
//# sourceMappingURL=ComponentIdService.spec.js.map