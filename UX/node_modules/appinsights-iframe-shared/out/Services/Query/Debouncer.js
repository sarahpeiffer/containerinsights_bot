/**
 * Queues requests and executes them together on the set interval. Can be used to reduce the number of XHR requests being made
 * by batching all requests made every n milliseconds.
 */
var Debouncer = /** @class */ (function () {
    /**
     * Create a new Debouncer
     * @param maxBatchSize Maximum number of requests to execute at once.
     * @param executeBatch Callback to execute a batch of requests
     * @param interval Interval to execute batches on
     */
    function Debouncer(maxBatchSize, executeBatch, interval) {
        if (interval === void 0) { interval = 100; }
        this._interval = interval;
        this._maxBatchSize = maxBatchSize;
        this._queue = [];
        this._executeBatch = executeBatch;
    }
    /**
     * Queue a request
     * @param request Request to execute
     */
    Debouncer.prototype.execute = function (request) {
        this._queue.push(request);
        this._initInterval();
    };
    Debouncer.prototype._initInterval = function () {
        var _this = this;
        if (!this._intervalHandle) {
            this._intervalHandle = window.setInterval(function () {
                _this._send();
                if (!_this._queue.length) {
                    _this._destroyInterval();
                }
            }, this._interval);
        }
    };
    Debouncer.prototype._destroyInterval = function () {
        window.clearInterval(this._intervalHandle);
        delete this._intervalHandle;
    };
    Debouncer.prototype._send = function () {
        var toSend = this._queue.splice(0, this._maxBatchSize);
        var leftovers = this._executeBatch(toSend);
        if (leftovers && leftovers.length) {
            // add back to queue
            (_a = this._queue).push.apply(_a, leftovers);
        }
        var _a;
    };
    return Debouncer;
}());
export { Debouncer };
//# sourceMappingURL=Debouncer.js.map