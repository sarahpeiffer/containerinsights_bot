import { Debouncer } from './Debouncer';
describe('Debouncer', function () {
    var debouncer;
    var executeBatch;
    var setInterval;
    var clearInterval;
    beforeEach(function () {
        var batcher = {
            executeBatch: function () { }
        };
        setInterval = spyOn(window, 'setInterval').and.returnValue(20);
        executeBatch = spyOn(batcher, 'executeBatch');
        debouncer = new Debouncer(2, executeBatch, 100);
        clearInterval = spyOn(window, 'clearInterval');
    });
    it('should set interval on execute', function () {
        debouncer.execute({});
        expect(setInterval).toHaveBeenCalledTimes(1);
        expect(setInterval).toHaveBeenCalledWith(jasmine.anything(), 100);
    });
    it('should not execute more than max batch size at once', function () {
        var calls = [{}, {}, {}];
        for (var i = 0; i < calls.length; i++) {
            debouncer.execute(calls[i]);
        }
        expect(setInterval).toHaveBeenCalledTimes(1);
        expect(setInterval).toHaveBeenCalledWith(jasmine.anything(), 100);
        var callback = setInterval.calls.mostRecent().args[0];
        callback();
        expect(executeBatch).toHaveBeenCalledTimes(1);
        expect(executeBatch.calls.mostRecent().args[0].length).toBe(2);
        for (var i = 0; i < 2; i++) {
            expect(executeBatch.calls.mostRecent().args[0][i]).toBe(calls[i]);
        }
        executeBatch.calls.reset();
        callback();
        expect(executeBatch).toHaveBeenCalledTimes(1);
        expect(executeBatch.calls.mostRecent().args[0].length).toBe(1);
        expect(executeBatch.calls.mostRecent().args[0][0]).toBe(calls[2]);
        expect(clearInterval).toHaveBeenCalledTimes(1);
        expect(clearInterval).toHaveBeenCalledWith(20);
    });
    it('should batch 2 requests together in same interval', function () {
        var calls = [{}, {}];
        for (var i = 0; i < calls.length; i++) {
            debouncer.execute(calls[i]);
        }
        expect(setInterval).toHaveBeenCalledTimes(1);
        expect(setInterval).toHaveBeenCalledWith(jasmine.anything(), 100);
        var callback = setInterval.calls.mostRecent().args[0];
        callback();
        expect(executeBatch).toHaveBeenCalledTimes(1);
        expect(executeBatch.calls.mostRecent().args[0].length).toBe(calls.length);
        for (var i = 0; i < calls.length; i++) {
            expect(executeBatch.calls.mostRecent().args[0][i]).toBe(calls[i]);
        }
    });
});
//# sourceMappingURL=Debouncer.spec.js.map