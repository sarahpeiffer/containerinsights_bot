import { StringMap } from '../../SharedInterfaces';
export interface ODataQueryParameters {
    eventType: string;
    eventId?: string;
    parameters: ODataParameters;
}
export declare const ODataKeys: string[];
export interface ODataParameters {
    timespan?: string;
    $filter?: string;
    $search?: string;
    $orderby?: string;
    $select?: string;
    $skip?: number;
    $top?: number;
    $format?: string;
    $count?: boolean;
    $apply?: string;
}
export interface KQLQueryParameters {
    csl: string;
    timespan: string;
}
export interface DraftMetadata {
    applications: {
        id: string;
        name: string;
        resourceId: string;
    }[];
}
export interface KQLQueryResultV1 {
    tables: KQLTableV1[];
}
export interface KQLTableV1 {
    name: string;
    columns: KQLColumnV1[];
    rows: string[][];
}
export interface KQLColumnV1 {
    name: string;
    type: string;
}
export interface KQLQueryResult {
    Tables: KQLTable[];
}
export interface KQLTable {
    TableName: string;
    Columns: KQLColumn[];
    Rows: string[][];
}
export interface KQLColumn {
    ColumnName: string;
    ColumnType: string;
    DataTypes: string;
}
export declare const HeaderNames: {
    Authorization: string;
    SessionId: string;
    App: string;
    ClientRequestId: string;
    UserId: string;
    ClientRequestInfo: string;
    CacheControl: string;
    HostingBladeInstanceId: string;
    RetryAfter: string;
};
export declare const HeaderValues: {
    App: string;
};
export declare const Paths: {
    KQLQuery: string;
    ODataQuery: string;
    MetricQuery: string;
    MetricMetadataQuery: string;
    Metadata: string;
};
export declare const Versions: {
    Beta: string;
    V1: string;
};
export declare const StatusCodes: {
    Success: number;
    NoContent: number;
    TooManyRequests: number;
    BadRequest: number;
};
export interface MetricQueryParameters {
    id: string;
    parameters: {
        aggregation?: string;
        metricId: string;
        segment?: string;
        timespan?: string;
        top?: number;
        interval?: string;
        orderBy?: string;
        filter?: string;
        useKusto?: string;
        useMDM?: string;
    };
}
export interface MetricQueryResult {
    status: number;
    id: string;
    body: {
        value: SegmentedMetricResult | SegmentedIntervalMetricResult | UnsegmentedMetricResult | UnsegmentedIntervalMetricResult;
    };
}
export interface MetricAggregationResult {
    [key: string]: number;
}
export interface SegmentedMetricResult {
    start: Date;
    end: Date;
    segments: StringMap<string | MetricAggregationResult>[];
}
export interface UnsegmentedMetricResult {
    start: Date;
    end: Date;
    [key: string]: MetricAggregationResult | Date;
}
export interface UnsegmentedIntervalMetricResult {
    start: Date;
    end: Date;
    interval: string;
    segments: UnsegmentedMetricResult[];
}
export interface SegmentedIntervalMetricResult {
    start: Date;
    end: Date;
    interval: string;
    segments: SegmentedMetricResult[];
}
export declare enum DraftQueryBackend {
    Kusto = 1,
    MDM = 2,
}
export declare type MetricResult = SegmentedMetricResult | SegmentedIntervalMetricResult | UnsegmentedMetricResult | UnsegmentedIntervalMetricResult;
