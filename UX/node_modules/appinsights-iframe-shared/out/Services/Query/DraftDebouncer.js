import * as tslib_1 from "tslib";
import { HttpDebouncer } from './HttpDebouncer';
import { Utils, HeaderNames, StatusCodes } from '../..';
import Axios from 'axios';
/**
 * Debouncer for Draft. Calls /$batch API on debounced request batches.
 */
var DraftDebouncer = /** @class */ (function (_super) {
    tslib_1.__extends(DraftDebouncer, _super);
    function DraftDebouncer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DraftDebouncer.prototype.getBatchScope = function (request) {
        /**
         * Because we're batching, round-robining isn't necessary.
         */
        request.uri = request.uri.replace(/api([0-9]*)\./, 'api.');
        // Get batch endpoint for base url
        // This allows the batch to support both /beta and /v1 versions of Draft. Version is determined at the URL of the batch request.
        var match = request.uri.match(/\/(?:(beta)|(v1))\//);
        var splitUri = Utils.GetUriSchemeAndAuthority(request.uri);
        var authority = splitUri.scheme + splitUri.authority + (match && match.length ? match[0] : '');
        return {
            scope: authority,
            authority: authority
        };
    };
    DraftDebouncer.prototype.executeBatch = function (data, uri) {
        var _this = this;
        if (data.length) {
            var token = '';
            var batchID_1 = Utils.RandomGuid();
            if (data[0].headers) {
                token = data[0].headers[HeaderNames.Authorization];
            }
            var endpoint = uri + '$batch';
            var requestMap_1 = {};
            return Axios.post(endpoint, {
                requests: data.map(function (request) {
                    var payload = _this.getBatchRequestPayload(request);
                    requestMap_1[payload.id] = request;
                    return payload;
                })
            }, {
                headers: {
                    Authorization: token
                }
            }).then(function (response) {
                (response.data.responses || []).forEach(function (draftResponse) {
                    // Draft batch API doesn't guarantee same order of responses, so we need to find the right response.
                    var matchingRequest = requestMap_1[draftResponse.id];
                    var actualResponse = {
                        data: draftResponse.body,
                        headers: draftResponse.headers,
                        status: draftResponse.status,
                        statusText: '',
                        config: Object.assign({}, response.config, {
                            url: matchingRequest.uri,
                            method: matchingRequest.method,
                            headers: draftResponse.headers ?
                                Object.assign(draftResponse.headers, { BatchID: batchID_1, BatchURL: response.config.url }) : {}
                        }),
                        request: response.request
                    };
                    if (matchingRequest) {
                        if (actualResponse.status >= StatusCodes.BadRequest) {
                            matchingRequest.reject({ response: actualResponse });
                        }
                        else {
                            if (typeof actualResponse.data === 'string') {
                                actualResponse.data = JSON.parse(actualResponse.data);
                            }
                            if (!actualResponse.headers) {
                                actualResponse.headers = {};
                            }
                            matchingRequest.resolve(actualResponse);
                        }
                    }
                });
            }).catch(function (error) {
                data.forEach(function (batchRequest) {
                    batchRequest.reject(error);
                });
            });
        }
    };
    DraftDebouncer.prototype.getBatchRequestPayload = function (request) {
        var appId = '';
        var path = '';
        // Strip out the app ID from the Draft URL, and grab everything after it for the "path" of the batch request.
        var matches = request.uri.match(/\/apps\/([\w\-]*)(.*)/);
        if (matches && matches.length === 3) {
            appId = matches[1];
            path = matches[2];
        }
        else {
            throw new Error('App ID not found in URL ' + request.uri);
        }
        var payload = {
            id: Utils.RandomGuid(),
            application: appId,
            path: path,
            body: request.params,
            headers: request.headers,
            method: request.method
        };
        if (payload.headers) {
            delete payload.headers[HeaderNames.Authorization];
        }
        return payload;
    };
    return DraftDebouncer;
}(HttpDebouncer));
export { DraftDebouncer };
//# sourceMappingURL=DraftDebouncer.js.map