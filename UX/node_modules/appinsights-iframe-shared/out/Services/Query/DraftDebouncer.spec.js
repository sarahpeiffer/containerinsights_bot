import { DraftDebouncer } from './DraftDebouncer';
import Axios from 'axios';
describe('DraftDebouncer', function () {
    var setInterval;
    var clearInterval;
    var debouncer;
    var post;
    var resolve;
    var reject;
    beforeEach(function () {
        setInterval = spyOn(window, 'setInterval').and.returnValue(20);
        clearInterval = spyOn(window, 'clearInterval');
        debouncer = new DraftDebouncer(100, 2);
        post = spyOn(Axios, 'post').and.returnValue(new Promise(function (r, rj) {
            reject = rj;
            resolve = r;
        }));
    });
    it('should send a batched request with correct payload', function () {
        var request = {
            headers: {
                Authorization: 'my token',
                custom: '1'
            },
            method: 'POST',
            params: {},
            uri: 'https://api1.aimon.applicationinsights.io/v1/apps/e9af3d9f-9f40-4be0-b5b1-638f5203e10d/query'
        };
        debouncer.batch(request);
        expect(setInterval).toHaveBeenCalledTimes(1);
        var callback = setInterval.calls.mostRecent().args[0];
        callback();
        expect(post).toHaveBeenCalledTimes(1);
        var args = post.calls.mostRecent().args;
        expect(args[0]).toBe('https://api.aimon.applicationinsights.io/v1/$batch');
        var payload = args[1];
        expect(payload.requests.length).toBe(1);
        expect(payload.requests[0].application).toBe('e9af3d9f-9f40-4be0-b5b1-638f5203e10d');
        expect(payload.requests[0].body).toBe(request.params);
        expect(payload.requests[0].headers.custom).toBe(request.headers.custom);
        expect(payload.requests[0].id).toBeTruthy();
        expect(payload.requests[0].method).toBe(request.method);
        expect(payload.requests[0].path).toBe('/query');
        expect(args[2].headers.Authorization).toBe('my token');
    });
    it('should batch 2 requests to beta', function () {
        var requests = [{
                headers: {
                    Authorization: 'my token',
                    custom: '1'
                },
                method: 'POST',
                params: {},
                uri: 'https://api1.applicationinsights.io/beta/apps/e9af3d9f-9f40-4be0-b5b1-638f5203e10d/query'
            }, {
                headers: {
                    Authorization: 'my token',
                    custom: '1'
                },
                method: 'POST',
                params: {},
                uri: 'https://api2.applicationinsights.io/beta/apps/2342344-9f40-4be0-b5b1-638f5203e10d/metrics'
            }];
        for (var i = 0; i < requests.length; i++) {
            debouncer.batch(requests[i]);
        }
        expect(setInterval).toHaveBeenCalledTimes(1);
        var callback = setInterval.calls.mostRecent().args[0];
        callback();
        expect(post).toHaveBeenCalledTimes(1);
        var args = post.calls.mostRecent().args;
        expect(args[0]).toBe('https://api.applicationinsights.io/beta/$batch');
        var payload = args[1];
        expect(payload.requests.length).toBe(requests.length);
        expect(payload.requests[0].application).toBe('e9af3d9f-9f40-4be0-b5b1-638f5203e10d');
        expect(payload.requests[0].path).toBe('/query');
        expect(payload.requests[1].application).toBe('2342344-9f40-4be0-b5b1-638f5203e10d');
        expect(payload.requests[1].path).toBe('/metrics');
        for (var i = 0; i < requests.length; i++) {
            expect(payload.requests[i].body).toBe(requests[i].params);
            expect(payload.requests[i].headers.custom).toBe(requests[i].headers.custom);
            expect(payload.requests[i].id).toBeTruthy();
            expect(payload.requests[i].method).toBe(requests[i].method);
        }
        expect(args[2].headers.Authorization).toBe('my token');
    });
    it('should not batch v1 and beta requests together', function () {
        var requests = [{
                headers: {
                    Authorization: 'my token',
                    custom: '1'
                },
                method: 'POST',
                params: {},
                uri: 'https://api1.applicationinsights.io/beta/apps/e9af3d9f-9f40-4be0-b5b1-638f5203e10d/query'
            }, {
                headers: {
                    Authorization: 'my token',
                    custom: '1'
                },
                method: 'POST',
                params: {},
                uri: 'https://api2.applicationinsights.io/v1/apps/2342344-9f40-4be0-b5b1-638f5203e10d/metrics'
            }];
        for (var i = 0; i < requests.length; i++) {
            debouncer.batch(requests[i]);
        }
        expect(setInterval).toHaveBeenCalledTimes(2);
        var callbacks = setInterval.calls.all().map(function (t) { return t.args[0]; });
        callbacks[0]();
        callbacks[1]();
        expect(post).toHaveBeenCalledTimes(2);
        var betaArgs = post.calls.all()[0].args;
        expect(betaArgs[0]).toBe('https://api.applicationinsights.io/beta/$batch');
        var v1Args = post.calls.all()[1].args;
        expect(v1Args[0]).toBe('https://api.applicationinsights.io/v1/$batch');
    });
    it('should work with out of order responses', function () {
        var requests = [{
                headers: {
                    Authorization: 'my token',
                    custom: '1'
                },
                method: 'POST',
                params: {},
                uri: 'https://api1.applicationinsights.io/beta/apps/e9af3d9f-9f40-4be0-b5b1-638f5203e10d/query'
            }, {
                headers: {
                    Authorization: 'my token',
                    custom: '1'
                },
                method: 'POST',
                params: {},
                uri: 'https://api2.applicationinsights.io/beta/apps/2342344-9f40-4be0-b5b1-638f5203e10d/metrics'
            }];
        var promises = [];
        for (var i = 0; i < requests.length; i++) {
            promises.push(debouncer.batch(requests[i]));
        }
        expect(setInterval).toHaveBeenCalledTimes(1);
        var callback = setInterval.calls.mostRecent().args[0];
        callback();
        expect(post).toHaveBeenCalledTimes(1);
        var payload = post.calls.mostRecent().args[1];
        expect(payload.requests.length).toBe(requests.length);
        var responses = [{
                id: payload.requests[1].id,
                body: {},
                status: 200,
                headers: {}
            }, {
                id: payload.requests[0].id,
                body: {},
                status: 200,
                headers: {}
            }];
        resolve({
            status: 200,
            statusText: 'OK',
            headers: {},
            config: {},
            data: {
                responses: responses
            }
        });
        return Promise.all(promises).then(function (results) {
            expect(results.length).toBe(2);
            expect(results[0].data).toBe(responses[1].body);
            expect(results[1].data).toBe(responses[0].body);
            expect(results[0].status).toBe(200);
            expect(results[1].status).toBe(200);
        });
    });
    it('should reject if bad status code received for a batch response', function () {
        var request = {
            headers: {
                Authorization: 'my token',
                custom: '1'
            },
            method: 'POST',
            params: {},
            uri: 'https://api1.applicationinsights.io/beta/apps/e9af3d9f-9f40-4be0-b5b1-638f5203e10d/query'
        };
        var promise = debouncer.batch(request);
        expect(setInterval).toHaveBeenCalledTimes(1);
        var callback = setInterval.calls.mostRecent().args[0];
        callback();
        expect(post).toHaveBeenCalledTimes(1);
        var payload = post.calls.mostRecent().args[1];
        expect(payload.requests.length).toBe(1);
        var responses = [{
                id: payload.requests[0].id,
                body: {},
                status: 400,
                headers: {}
            }];
        resolve({
            status: 200,
            statusText: 'OK',
            headers: {},
            config: {},
            data: {
                responses: responses
            }
        });
        return promise.then(function () {
            fail('expected promise to reject');
        }).catch(function (e) {
            expect(e.response.status).toBe(400);
        });
    });
    it('should reject all if batch completely failed', function () {
        var request = {
            headers: {
                Authorization: 'my token',
                custom: '1'
            },
            method: 'POST',
            params: {},
            uri: 'https://api1.applicationinsights.io/beta/apps/e9af3d9f-9f40-4be0-b5b1-638f5203e10d/query'
        };
        var promise = debouncer.batch(request);
        expect(setInterval).toHaveBeenCalledTimes(1);
        var callback = setInterval.calls.mostRecent().args[0];
        callback();
        expect(post).toHaveBeenCalledTimes(1);
        var payload = post.calls.mostRecent().args[1];
        expect(payload.requests.length).toBe(1);
        var responses = [{
                id: payload.requests[0].id,
                body: {},
                status: 400,
                headers: {}
            }];
        reject({
            status: 400,
            statusText: 'Bad request',
            headers: {},
            config: {},
            data: {
                responses: responses
            }
        });
        return promise.then(function () {
            fail('expected promise to reject');
        }).catch(function (e) {
            expect(e.status).toBe(400);
        });
    });
});
//# sourceMappingURL=DraftDebouncer.spec.js.map