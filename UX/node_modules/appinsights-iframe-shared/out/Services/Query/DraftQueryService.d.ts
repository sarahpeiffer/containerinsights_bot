import { ODataQueryParameters, KQLQueryResult, MetricQueryParameters, MetricQueryResult, KQLQueryResultV1, DraftMetadata } from './DraftDataTypes';
import { ITelemetryService } from '../../SharedInterfaces';
import { QueryTelemetryContext } from './QueryTelemetryService';
import { TelemetryContext } from '../TelemetryContext';
import { IDraftConfiguration } from './IRouteConfiguration';
/**
 * Executes Draft queries and returns response.
 */
export declare class DraftQueryService {
    private _metricQueryCache;
    private _kqlQueryCache;
    private _odataQueryCache;
    private _metadataQueryCache;
    private _routeConfig;
    private _queryTelemetryService;
    private _ajaxHelper;
    private _debouncer;
    constructor(routeConfig: IDraftConfiguration, telemetryService: ITelemetryService, telemetryContext: TelemetryContext, instanceId: () => string, debounce?: boolean);
    ClearCaches(): void;
    ExecuteMetadataQuery(appId: string, telemetryContext: QueryTelemetryContext): Promise<DraftMetadata>;
    /**
     * Execute a KQL query against Draft using /v1 version.
     * @param query
     * @param telemetryContext
     * @param localAppId
     */
    ExecuteKQLQueryV1(query: string, telemetryContext: QueryTelemetryContext, localAppId?: string, timespan?: string): Promise<KQLQueryResultV1>;
    /**
     * @deprecated
     * Execute a KQL query against Draft using /beta version.
     * @param query
     * @param telemetryContext
     * @param localAppId
     */
    ExecuteKQLQuery(query: string, telemetryContext: QueryTelemetryContext, localAppId?: string): Promise<KQLQueryResult>;
    /**
     * Execute an OData query against Draft using /beta version.
     * @deprecated
     * @param query
     * @param telemetryContext
     * @param localAppId
     */
    ExecuteODataQuery(query: ODataQueryParameters, telemetryContext: QueryTelemetryContext, localAppId?: string): Promise<any>;
    /**
     * Execute an OData query against Draft using /v1 version.
     * @param query
     * @param telemetryContext
     * @param localAppId
     */
    ExecuteODataQueryV1(query: ODataQueryParameters, telemetryContext: QueryTelemetryContext, localAppId?: string): Promise<any>;
    /**
     * Execute a metrics query against Draft using /beta version.
     * @deprecated
     * @param queries
     * @param telemetryContext
     * @param localAppId
     */
    ExecuteMetricQuery(queries: MetricQueryParameters[], telemetryContext: QueryTelemetryContext, localAppId?: string): Promise<MetricQueryResult[]>;
    /**
     * Execute a metrics query against Draft using /v1 version.
     * @param queries
     * @param telemetryContext
     * @param localAppId
     */
    ExecuteMetricQueryV1(queries: MetricQueryParameters[], telemetryContext: QueryTelemetryContext, localAppId?: string): Promise<MetricQueryResult[]>;
    /**
     * @deprecated
     * Execute a metrics metadata query against Draft using /beta version.
     * @param telemetryContext
     * @param localAppId
     */
    ExecuteMetricMetadataQuery(telemetryContext: QueryTelemetryContext, localAppId?: string): Promise<any>;
    /**
     * Execute a metrics metadata query against Draft using /v1 version.
     * @param telemetryContext
     * @param localAppId
     */
    ExecuteMetricMetadataQueryV1(telemetryContext: QueryTelemetryContext, localAppId?: string): Promise<any>;
    private _executeODataQuery(version, query, telemetryContext, localAppId?);
    private _executeMetricQuery(version, queries, telemetryContext, localAppId?);
    private _executeMetricMetadataQuery(version, telemetryContext, localAppId?);
    private _executeKQLQuery<T>(version, query, telemetryContext, localAppId?, timespan?);
    private _executeAjax<TResult, TParam>(buildUri, method, params, telemetryContext, retryCount?, appId?, debouncer?);
    private _buildODataUrl(host, query);
    private _getAppId(telemetryContext, appId?);
}
