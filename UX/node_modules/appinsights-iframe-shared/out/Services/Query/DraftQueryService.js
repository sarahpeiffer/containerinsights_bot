import * as tslib_1 from "tslib";
import { ODataKeys, Paths, Versions, StatusCodes } from './DraftDataTypes';
import { QueryCache } from './QueryCache';
import { QueryTelemetryService } from './QueryTelemetryService';
import { stringify } from 'query-string';
import { AjaxHelper, HttpMethod } from './AjaxHelper';
import { DraftDebouncer } from './DraftDebouncer';
/**
 * Executes Draft queries and returns response.
 */
var DraftQueryService = /** @class */ (function () {
    function DraftQueryService(routeConfig, telemetryService, telemetryContext, instanceId, debounce) {
        if (debounce === void 0) { debounce = false; }
        this._metricQueryCache = new QueryCache(Infinity, function (k) { return JSON.stringify(k); });
        this._kqlQueryCache = new QueryCache(Infinity, function (k) { return k; });
        this._odataQueryCache = new QueryCache(Infinity, JSON.stringify);
        this._metadataQueryCache = new QueryCache(Infinity, function (q) { return q; });
        this._queryTelemetryService = new QueryTelemetryService(telemetryService, telemetryContext);
        this._ajaxHelper = new AjaxHelper(routeConfig, telemetryService, telemetryContext, instanceId);
        if (debounce) {
            this._debouncer = new DraftDebouncer();
        }
        this._routeConfig = routeConfig;
    }
    DraftQueryService.prototype.ClearCaches = function () {
        this._metricQueryCache.Clear();
        this._kqlQueryCache.Clear();
    };
    DraftQueryService.prototype.ExecuteMetadataQuery = function (appId, telemetryContext) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var cached, metadata;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cached = this._metadataQueryCache.Get(appId);
                        if (cached) {
                            this._queryTelemetryService.LogCacheHit(telemetryContext);
                            return [2 /*return*/, cached];
                        }
                        return [4 /*yield*/, this._executeAjax(function (host, a) { return Paths.Metadata.format(host, a, 'v1'); }, HttpMethod.Get, null, telemetryContext, 0, appId, null)];
                    case 1:
                        metadata = _a.sent();
                        if (metadata) {
                            this._metadataQueryCache.Store(appId, metadata);
                        }
                        return [2 /*return*/, metadata];
                }
            });
        });
    };
    /**
     * Execute a KQL query against Draft using /v1 version.
     * @param query
     * @param telemetryContext
     * @param localAppId
     */
    DraftQueryService.prototype.ExecuteKQLQueryV1 = function (query, telemetryContext, localAppId, timespan) {
        return this._executeKQLQuery(Versions.V1, query, telemetryContext, localAppId, timespan);
    };
    /**
     * @deprecated
     * Execute a KQL query against Draft using /beta version.
     * @param query
     * @param telemetryContext
     * @param localAppId
     */
    DraftQueryService.prototype.ExecuteKQLQuery = function (query, telemetryContext, localAppId) {
        return this._executeKQLQuery(Versions.Beta, query, telemetryContext, localAppId);
    };
    /**
     * Execute an OData query against Draft using /beta version.
     * @deprecated
     * @param query
     * @param telemetryContext
     * @param localAppId
     */
    DraftQueryService.prototype.ExecuteODataQuery = function (query, telemetryContext, localAppId) {
        return this._executeODataQuery(Versions.Beta, query, telemetryContext, localAppId);
    };
    /**
     * Execute an OData query against Draft using /v1 version.
     * @param query
     * @param telemetryContext
     * @param localAppId
     */
    DraftQueryService.prototype.ExecuteODataQueryV1 = function (query, telemetryContext, localAppId) {
        return this._executeODataQuery(Versions.V1, query, telemetryContext, localAppId);
    };
    /**
     * Execute a metrics query against Draft using /beta version.
     * @deprecated
     * @param queries
     * @param telemetryContext
     * @param localAppId
     */
    DraftQueryService.prototype.ExecuteMetricQuery = function (queries, telemetryContext, localAppId) {
        return this._executeMetricQuery(Versions.Beta, queries, telemetryContext, localAppId);
    };
    /**
     * Execute a metrics query against Draft using /v1 version.
     * @param queries
     * @param telemetryContext
     * @param localAppId
     */
    DraftQueryService.prototype.ExecuteMetricQueryV1 = function (queries, telemetryContext, localAppId) {
        return this._executeMetricQuery(Versions.V1, queries, telemetryContext, localAppId);
    };
    /**
     * @deprecated
     * Execute a metrics metadata query against Draft using /beta version.
     * @param telemetryContext
     * @param localAppId
     */
    DraftQueryService.prototype.ExecuteMetricMetadataQuery = function (telemetryContext, localAppId) {
        return this._executeMetricMetadataQuery(Versions.Beta, telemetryContext, localAppId);
    };
    /**
     * Execute a metrics metadata query against Draft using /v1 version.
     * @param telemetryContext
     * @param localAppId
     */
    DraftQueryService.prototype.ExecuteMetricMetadataQueryV1 = function (telemetryContext, localAppId) {
        return this._executeMetricMetadataQuery(Versions.V1, telemetryContext, localAppId);
    };
    DraftQueryService.prototype._executeODataQuery = function (version, query, telemetryContext, localAppId) {
        var _this = this;
        var cache = this._odataQueryCache.Get(query);
        if (cache) {
            this._queryTelemetryService.LogCacheHit(telemetryContext);
            return Promise.resolve(cache);
        }
        return new Promise(function (resolve, reject) {
            _this._executeAjax(function (host, appId) {
                return _this._buildODataUrl(Paths.ODataQuery.format(host, appId, version), query);
            }, HttpMethod.Get, null, telemetryContext, 0, localAppId).then(function (result) {
                _this._queryTelemetryService.LogQuery(telemetryContext);
                _this._odataQueryCache.Store(query, result);
                resolve(result);
            }).catch(function (e) { return reject(e); });
        });
    };
    DraftQueryService.prototype._executeMetricQuery = function (version, queries, telemetryContext, localAppId) {
        var _this = this;
        var cachedResults = [];
        queries = queries.map(function (t) { return t; });
        for (var i = 0; i < queries.length; i++) {
            var q = queries[i];
            var cache = this._metricQueryCache.Get(q);
            if (cache) {
                cachedResults.push(cache);
                // remove query from batch
                queries.splice(i, 1);
                i--;
            }
        }
        if (cachedResults.length) {
            this._queryTelemetryService.LogCacheHit(telemetryContext);
        }
        if (queries.length) {
            return new Promise(function (resolve, reject) {
                _this._executeAjax(function (host, appId) {
                    return Paths.MetricQuery.format(host, appId, version);
                }, HttpMethod.Post, queries, telemetryContext, 0, localAppId).then(function (results) {
                    var allSuccess = true;
                    var status = { code: StatusCodes.Success, text: 'OK' };
                    var error;
                    var failedQuery;
                    results.forEach(function (r) {
                        var query = queries.filter(function (t) { return t.id === r.id; });
                        telemetryContext.batchedNames.push(r.id);
                        if (query.length && r.status === StatusCodes.Success) {
                            _this._metricQueryCache.Store(query[0], r);
                        }
                        else if (r.status !== StatusCodes.Success) {
                            allSuccess = false;
                            status = {
                                code: r.status,
                                text: r.body['error'] ? r.body['error']['code'] : ''
                            };
                            error = r.body['error'] ? r.body['error']['message'] : '';
                            failedQuery = r.id;
                        }
                    });
                    cachedResults.forEach(function (c) {
                        results.push(c);
                    });
                    telemetryContext.requestSucceed = allSuccess;
                    telemetryContext.statusCode = status.code;
                    telemetryContext.statusText = status.text;
                    telemetryContext.error = error;
                    telemetryContext.failedQuery = failedQuery;
                    _this._queryTelemetryService.LogQuery(telemetryContext);
                    resolve(results);
                }).catch(function (e) {
                    reject(e);
                });
            });
        }
        else {
            return Promise.resolve(cachedResults);
        }
    };
    DraftQueryService.prototype._executeMetricMetadataQuery = function (version, telemetryContext, localAppId) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._executeAjax(function (host, appId) {
                return Paths.MetricMetadataQuery.format(host, appId, version);
            }, HttpMethod.Get, null, telemetryContext, 0, localAppId).then(function (result) {
                _this._queryTelemetryService.LogQuery(telemetryContext);
                resolve(result);
            }).catch(function (e) { return reject(e); });
        });
    };
    DraftQueryService.prototype._executeKQLQuery = function (version, query, telemetryContext, localAppId, timespan) {
        var _this = this;
        var parameters = {
            csl: 'set truncationmaxrecords=10000;set truncationmaxsize=67108864;' + query,
            timespan: timespan
        };
        var queryCacheKey = "appId: " + localAppId + ", queryString: " + query + ", version: " + version;
        if (this._kqlQueryCache.Get(queryCacheKey)) {
            this._queryTelemetryService.LogCacheHit(telemetryContext);
            return Promise.resolve(this._kqlQueryCache.Get(queryCacheKey));
        }
        return new Promise(function (resolve, reject) {
            _this._executeAjax(function (host, appId) {
                return Paths.KQLQuery.format(host, appId, version);
            }, HttpMethod.Post, parameters, telemetryContext, 0, localAppId).then(function (result) {
                _this._queryTelemetryService.LogQuery(telemetryContext);
                _this._kqlQueryCache.Store(queryCacheKey, result);
                resolve(result);
            }).catch(function (e) {
                reject(e);
            });
        });
    };
    DraftQueryService.prototype._executeAjax = function (buildUri, method, params, telemetryContext, retryCount, appId, debouncer) {
        var _this = this;
        if (retryCount === void 0) { retryCount = 0; }
        if (debouncer === void 0) { debouncer = this._debouncer; }
        return this._getAppId(telemetryContext, appId).then(function (result) {
            return _this._ajaxHelper.ExecuteAjax(buildUri, method, params, telemetryContext, retryCount, result, debouncer);
        });
    };
    DraftQueryService.prototype._buildODataUrl = function (host, query) {
        var url = host + '/' + (query.eventType || '$all');
        if (query.parameters) {
            var obj_1 = {};
            ODataKeys.forEach(function (k) {
                if (query.parameters[k] != null) {
                    obj_1[k] = query.parameters[k];
                }
            });
            var queryString = stringify(obj_1);
            if (queryString) {
                url += '?' + queryString;
            }
        }
        return url;
    };
    DraftQueryService.prototype._getAppId = function (telemetryContext, appId) {
        var _this = this;
        telemetryContext.measurements.GetAppId_Start = window.performanceNow();
        if (appId) {
            return Promise.resolve(appId);
        }
        else if (!this._routeConfig.AppId) {
            return Promise.resolve(null);
        }
        else {
            return new Promise(function (resolve, reject) {
                _this._routeConfig.AppId().then(function (token) {
                    telemetryContext.measurements.GetAppId_End = window.performanceNow();
                    if (token) {
                        telemetryContext.appIdInCache = !token.inCache;
                        resolve(token.value);
                    }
                    else {
                        telemetryContext.appIdInCache = true;
                        resolve(null);
                    }
                }).catch(function (e) {
                    telemetryContext.measurements.GetAppId_End = window.performanceNow();
                    telemetryContext.requestSucceed = false;
                    telemetryContext.error = e;
                    reject(e);
                });
            });
        }
    };
    return DraftQueryService;
}());
export { DraftQueryService };
//# sourceMappingURL=DraftQueryService.js.map