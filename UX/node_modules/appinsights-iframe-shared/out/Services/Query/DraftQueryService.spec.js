import { DraftQueryService } from './DraftQueryService';
import { HttpMethod } from './AjaxHelper';
import { QueryTelemetryContext } from './QueryTelemetryService';
import { Paths } from './DraftDataTypes';
import { TelemetryContext } from '../TelemetryContext';
describe('DraftQueryService', function () {
    var draftQueryService;
    var portalConfigService;
    var telemetryService;
    var telemetryContext;
    var instanceId;
    beforeEach(function () {
        portalConfigService = {
            AppId: function () { return Promise.resolve(null); },
            RouteInfo: function () { return Promise.resolve(null); },
            RouteName: function () { return 'Draft'; },
            Token: function () { return Promise.resolve(null); }
        };
        telemetryService = {
            LogEvent: function () { },
            LogException: function () { },
            Register: function () { return null; },
            LogTrace: function () { }
        };
        telemetryContext = new TelemetryContext(telemetryService);
        draftQueryService = new DraftQueryService(portalConfigService, telemetryService, telemetryContext, function () { return instanceId; });
    });
    describe('ExecuteKQLQueryV1', function () {
        it('should execute post with correct path and params and store result', function () {
            spyOn(draftQueryService['_kqlQueryCache'], 'Get').and.returnValue(null);
            spyOn(draftQueryService['_kqlQueryCache'], 'Store');
            var queryResult = {};
            spyOn(draftQueryService, '_executeAjax').and.returnValue(Promise.resolve(queryResult));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            spyOn(draftQueryService['_queryTelemetryService'], 'LogQuery');
            return draftQueryService.ExecuteKQLQueryV1('my query', tc).then(function (result) {
                expect(result).toBe(queryResult);
                expect(draftQueryService['_executeAjax']).toHaveBeenCalledTimes(1);
                var args = draftQueryService['_executeAjax'].calls.mostRecent().args;
                expect(args[1]).toBe(HttpMethod.Post);
                expect(args[2].csl).toBe('set truncationmaxrecords=10000;set truncationmaxsize=67108864;my query');
                expect(args[0]('myhost', 'appid')).toBe(Paths.KQLQuery.format('myhost', 'appid', 'v1'));
                expect(args[3]).toBe(tc);
                expect(draftQueryService['_kqlQueryCache'].Store).toHaveBeenCalledWith('appId: undefined, queryString: my query, version: v1', queryResult);
                expect(draftQueryService['_queryTelemetryService'].LogQuery).toHaveBeenCalledTimes(1);
                expect(draftQueryService['_queryTelemetryService'].LogQuery).toHaveBeenCalledWith(tc);
            }).catch(function (e) {
                fail(e);
            });
        });
    });
    describe('ExecuteKQLQuery', function () {
        it('should execute post with correct path and params and store result', function () {
            spyOn(draftQueryService['_kqlQueryCache'], 'Get').and.returnValue(null);
            spyOn(draftQueryService['_kqlQueryCache'], 'Store');
            var queryResult = {};
            spyOn(draftQueryService, '_executeAjax').and.returnValue(Promise.resolve(queryResult));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            spyOn(draftQueryService['_queryTelemetryService'], 'LogQuery');
            return draftQueryService.ExecuteKQLQuery('my query', tc).then(function (result) {
                expect(result).toBe(queryResult);
                expect(draftQueryService['_executeAjax']).toHaveBeenCalledTimes(1);
                var args = draftQueryService['_executeAjax'].calls.mostRecent().args;
                expect(args[1]).toBe(HttpMethod.Post);
                expect(args[2].csl).toBe('set truncationmaxrecords=10000;set truncationmaxsize=67108864;my query');
                expect(args[0]('myhost', 'appid')).toBe(Paths.KQLQuery.format('myhost', 'appid', 'beta'));
                expect(args[3]).toBe(tc);
                expect(draftQueryService['_kqlQueryCache'].Store).toHaveBeenCalledWith('appId: undefined, queryString: my query, version: beta', queryResult);
                expect(draftQueryService['_queryTelemetryService'].LogQuery).toHaveBeenCalledTimes(1);
                expect(draftQueryService['_queryTelemetryService'].LogQuery).toHaveBeenCalledWith(tc);
            }).catch(function (e) {
                fail(e);
            });
        });
        it('should reject if query fails', function () {
            spyOn(draftQueryService['_kqlQueryCache'], 'Get').and.returnValue(null);
            spyOn(draftQueryService['_kqlQueryCache'], 'Store');
            var error = {};
            spyOn(draftQueryService, '_executeAjax').and.returnValue(Promise.reject(error));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            return draftQueryService.ExecuteKQLQuery('my query', tc).then(function (result) {
                fail('Expected promise to reject');
            }).catch(function (e) {
                expect(e).toBe(error);
                expect(draftQueryService['_executeAjax']).toHaveBeenCalledTimes(1);
                var args = draftQueryService['_executeAjax'].calls.mostRecent().args;
                expect(args[1]).toBe(HttpMethod.Post);
                expect(args[2].csl).toBe('set truncationmaxrecords=10000;set truncationmaxsize=67108864;my query');
                expect(args[0]('myhost', 'appid')).toBe(Paths.KQLQuery.format('myhost', 'appid', 'beta'));
                expect(draftQueryService['_kqlQueryCache'].Store).not.toHaveBeenCalled();
                expect(args[3]).toBe(tc);
            });
        });
        it('should not issue query if cache hit', function () {
            var queryResult = {};
            spyOn(draftQueryService['_kqlQueryCache'], 'Get').and.returnValue(queryResult);
            spyOn(draftQueryService['_kqlQueryCache'], 'Store');
            spyOn(draftQueryService, '_executeAjax');
            spyOn(draftQueryService['_queryTelemetryService'], 'LogCacheHit');
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            return draftQueryService.ExecuteKQLQuery('my query', tc).then(function (result) {
                expect(result).toBe(queryResult);
                expect(draftQueryService['_executeAjax']).not.toHaveBeenCalled();
                expect(draftQueryService['_kqlQueryCache'].Store).not.toHaveBeenCalled();
                expect(draftQueryService['_queryTelemetryService'].LogCacheHit).toHaveBeenCalledTimes(1);
                expect(draftQueryService['_queryTelemetryService'].LogCacheHit).toHaveBeenCalledWith(tc);
            }).catch(function (e) {
                fail(e);
            });
        });
    });
    describe('ExecuteODataQueryV1', function () {
        it('should issue query if cache missed', function () {
            var result = {};
            spyOn(draftQueryService['_odataQueryCache'], 'Get').and.returnValue(null);
            var storeSpy = spyOn(draftQueryService['_odataQueryCache'], 'Store');
            var execAjaxSpy = spyOn(draftQueryService, '_executeAjax').and.returnValue(Promise.resolve(result));
            var query = {};
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            var logCacheHitSpy = spyOn(draftQueryService['_queryTelemetryService'], 'LogCacheHit');
            var logQuerySpy = spyOn(draftQueryService['_queryTelemetryService'], 'LogQuery');
            return draftQueryService.ExecuteODataQueryV1(query, tc).then(function (returned) {
                expect(returned).toBe(result);
                expect(execAjaxSpy).toHaveBeenCalledTimes(1);
                var args = execAjaxSpy.calls.mostRecent().args;
                expect(args[1]).toBe(HttpMethod.Get);
                expect(args[0]('host', 'appid')).toBe(Paths.ODataQuery.format('host', 'appid', 'v1') + '/$all');
                expect(args[2]).toBeNull();
                expect(args[3]).toBe(tc);
                expect(logCacheHitSpy).not.toHaveBeenCalled();
                expect(logQuerySpy).toHaveBeenCalledTimes(1);
                expect(logQuerySpy).toHaveBeenCalledWith(tc);
                expect(storeSpy).toHaveBeenCalledTimes(1);
                expect(storeSpy).toHaveBeenCalledWith(query, result);
            }).catch(function (e) {
                fail(JSON.stringify(e));
            });
        });
    });
    describe('ExecuteODataQuery', function () {
        it('should not issue query if the query hit cache', function () {
            var result = {};
            spyOn(draftQueryService['_odataQueryCache'], 'Get').and.returnValue(result);
            var execAjaxSpy = spyOn(draftQueryService, '_executeAjax');
            var query = {};
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            var logCacheHitSpy = spyOn(draftQueryService['_queryTelemetryService'], 'LogCacheHit');
            return draftQueryService.ExecuteODataQuery(query, tc).then(function (returned) {
                expect(returned).toBe(result);
                expect(execAjaxSpy).not.toHaveBeenCalled();
                expect(logCacheHitSpy).toHaveBeenCalledTimes(1);
                expect(logCacheHitSpy).toHaveBeenCalledWith(tc);
            }).catch(function (e) {
                fail(JSON.stringify(e));
            });
        });
        it('should issue query if cache missed', function () {
            var result = {};
            spyOn(draftQueryService['_odataQueryCache'], 'Get').and.returnValue(null);
            var storeSpy = spyOn(draftQueryService['_odataQueryCache'], 'Store');
            var execAjaxSpy = spyOn(draftQueryService, '_executeAjax').and.returnValue(Promise.resolve(result));
            var query = {};
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            var logCacheHitSpy = spyOn(draftQueryService['_queryTelemetryService'], 'LogCacheHit');
            var logQuerySpy = spyOn(draftQueryService['_queryTelemetryService'], 'LogQuery');
            return draftQueryService.ExecuteODataQuery(query, tc).then(function (returned) {
                expect(returned).toBe(result);
                expect(execAjaxSpy).toHaveBeenCalledTimes(1);
                var args = execAjaxSpy.calls.mostRecent().args;
                expect(args[1]).toBe(HttpMethod.Get);
                expect(args[0]('host', 'appid')).toBe(Paths.ODataQuery.format('host', 'appid', 'beta') + '/$all');
                expect(args[2]).toBeNull();
                expect(args[3]).toBe(tc);
                expect(logCacheHitSpy).not.toHaveBeenCalled();
                expect(logQuerySpy).toHaveBeenCalledTimes(1);
                expect(logQuerySpy).toHaveBeenCalledWith(tc);
                expect(storeSpy).toHaveBeenCalledTimes(1);
                expect(storeSpy).toHaveBeenCalledWith(query, result);
            }).catch(function (e) {
                fail(JSON.stringify(e));
            });
        });
        it('should reject if query fails', function () {
            spyOn(draftQueryService['_odataQueryCache'], 'Get').and.returnValue(null);
            var storeSpy = spyOn(draftQueryService['_odataQueryCache'], 'Store');
            var execAjaxSpy = spyOn(draftQueryService, '_executeAjax').and.returnValue(Promise.reject('some-error'));
            var query = {};
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            var logCacheHitSpy = spyOn(draftQueryService['_queryTelemetryService'], 'LogCacheHit');
            var logQuerySpy = spyOn(draftQueryService['_queryTelemetryService'], 'LogQuery');
            return draftQueryService.ExecuteODataQuery(query, tc).then(function (returned) {
                fail('should reject');
            }).catch(function (e) {
                expect(e).toBe('some-error');
                expect(execAjaxSpy).toHaveBeenCalledTimes(1);
                expect(logCacheHitSpy).not.toHaveBeenCalled();
                expect(logQuerySpy).not.toHaveBeenCalled();
                expect(storeSpy).not.toHaveBeenCalled();
            });
        });
    });
    describe('ExecuteMetricQueryV1', function () {
        it('should issue query if all queries miss', function () {
            var result1 = { id: 'q1', status: 200 };
            var result2 = { id: 'q2', status: 200 };
            spyOn(draftQueryService['_metricQueryCache'], 'Get').and.returnValue(null);
            var queries = [{ id: 'q1' }, { id: 'q2' }];
            spyOn(draftQueryService, '_executeAjax').and.returnValue(Promise.resolve([result1, result2]));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            spyOn(draftQueryService['_queryTelemetryService'], 'LogCacheHit');
            spyOn(draftQueryService['_queryTelemetryService'], 'LogQuery');
            return draftQueryService.ExecuteMetricQueryV1(queries, tc).then(function (result) {
                expect(result.length).toBe(2);
                expect(result.filter(function (t) { return t.id === 'q1'; }).length).toBe(1);
                expect(result.filter(function (t) { return t.id === 'q2'; }).length).toBe(1);
                expect(draftQueryService['_executeAjax']).toHaveBeenCalledTimes(1);
                var args = draftQueryService['_executeAjax'].calls.mostRecent().args;
                expect(args[1]).toBe(HttpMethod.Post);
                expect(args[0]('host', 'appId')).toBe(Paths.MetricQuery.format('host', 'appId', 'v1'));
                expect(args[2].length).toBe(2);
                expect(args[2][0]).toBe(queries[0]);
                expect(args[2][1]).toBe(queries[1]);
                expect(args[3]).toBe(tc);
                expect(draftQueryService['_queryTelemetryService'].LogCacheHit).not.toHaveBeenCalled();
                expect(draftQueryService['_queryTelemetryService'].LogQuery).toHaveBeenCalledTimes(1);
                expect(draftQueryService['_queryTelemetryService'].LogQuery).toHaveBeenCalledWith(tc);
            }).catch(function (e) {
                fail(JSON.stringify(e));
            });
        });
    });
    describe('ExecuteMetricQuery', function () {
        it('should not issue query if all queries hit cache', function () {
            var result1 = {};
            var result2 = {};
            spyOn(draftQueryService['_metricQueryCache'], 'Get').and.returnValues(result1, result2);
            var queries = [{}, {}];
            spyOn(draftQueryService, '_executeAjax');
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            spyOn(draftQueryService['_queryTelemetryService'], 'LogCacheHit');
            return draftQueryService.ExecuteMetricQuery(queries, tc).then(function (result) {
                expect(result.length).toBe(2);
                expect(result[0]).toBe(result1);
                expect(result[1]).toBe(result2);
                expect(draftQueryService['_executeAjax']).not.toHaveBeenCalled();
                expect(draftQueryService['_queryTelemetryService'].LogCacheHit).toHaveBeenCalledTimes(1);
                expect(draftQueryService['_queryTelemetryService'].LogCacheHit).toHaveBeenCalledWith(tc);
            }).catch(function (e) {
                fail(JSON.stringify(e));
            });
        });
        it('should not issue query if queries empty', function () {
            spyOn(draftQueryService['_metricQueryCache'], 'Get');
            var queries = [];
            spyOn(draftQueryService, '_executeAjax');
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            spyOn(draftQueryService['_queryTelemetryService'], 'LogCacheHit');
            return draftQueryService.ExecuteMetricQuery(queries, tc).then(function (result) {
                expect(result.length).toBe(0);
                expect(draftQueryService['_executeAjax']).not.toHaveBeenCalled();
                expect(draftQueryService['_metricQueryCache'].Get).not.toHaveBeenCalled();
                expect(draftQueryService['_queryTelemetryService'].LogCacheHit).not.toHaveBeenCalled();
            }).catch(function (e) {
                fail(JSON.stringify(e));
            });
        });
        it('should issue query for miss if 1 query hit cache, 1 missed', function () {
            var result1 = { id: 'q1', status: 200 };
            var result2 = { id: 'q2', status: 200 };
            spyOn(draftQueryService['_metricQueryCache'], 'Get').and.returnValues(null, result2);
            var queries = [{ id: 'q1' }, { id: 'q2' }];
            spyOn(draftQueryService, '_executeAjax').and.returnValue(Promise.resolve([result1]));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            spyOn(draftQueryService['_queryTelemetryService'], 'LogCacheHit');
            spyOn(draftQueryService['_queryTelemetryService'], 'LogQuery');
            return draftQueryService.ExecuteMetricQuery(queries, tc).then(function (result) {
                expect(result.length).toBe(2);
                expect(result.filter(function (t) { return t.id === 'q1'; }).length).toBe(1);
                expect(result.filter(function (t) { return t.id === 'q2'; }).length).toBe(1);
                expect(draftQueryService['_executeAjax']).toHaveBeenCalledTimes(1);
                var args = draftQueryService['_executeAjax'].calls.mostRecent().args;
                expect(args[1]).toBe(HttpMethod.Post);
                expect(args[0]('host', 'appId')).toBe(Paths.MetricQuery.format('host', 'appId', 'beta'));
                expect(args[2].length).toBe(1);
                expect(args[2][0]).toBe(queries[0]);
                expect(args[3]).toBe(tc);
                expect(draftQueryService['_queryTelemetryService'].LogCacheHit).toHaveBeenCalledTimes(1);
                expect(draftQueryService['_queryTelemetryService'].LogCacheHit).toHaveBeenCalledWith(tc);
                expect(draftQueryService['_queryTelemetryService'].LogQuery).toHaveBeenCalledTimes(1);
                expect(draftQueryService['_queryTelemetryService'].LogQuery).toHaveBeenCalledWith(tc);
            }).catch(function (e) {
                fail(JSON.stringify(e));
            });
        });
        it('should issue query if all queries miss', function () {
            var result1 = { id: 'q1', status: 200 };
            var result2 = { id: 'q2', status: 200 };
            spyOn(draftQueryService['_metricQueryCache'], 'Get').and.returnValue(null);
            var queries = [{ id: 'q1' }, { id: 'q2' }];
            spyOn(draftQueryService, '_executeAjax').and.returnValue(Promise.resolve([result1, result2]));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            spyOn(draftQueryService['_queryTelemetryService'], 'LogCacheHit');
            spyOn(draftQueryService['_queryTelemetryService'], 'LogQuery');
            return draftQueryService.ExecuteMetricQuery(queries, tc).then(function (result) {
                expect(result.length).toBe(2);
                expect(result.filter(function (t) { return t.id === 'q1'; }).length).toBe(1);
                expect(result.filter(function (t) { return t.id === 'q2'; }).length).toBe(1);
                expect(draftQueryService['_executeAjax']).toHaveBeenCalledTimes(1);
                var args = draftQueryService['_executeAjax'].calls.mostRecent().args;
                expect(args[1]).toBe(HttpMethod.Post);
                expect(args[0]('host', 'appId')).toBe(Paths.MetricQuery.format('host', 'appId', 'beta'));
                expect(args[2].length).toBe(2);
                expect(args[2][0]).toBe(queries[0]);
                expect(args[2][1]).toBe(queries[1]);
                expect(args[3]).toBe(tc);
                expect(draftQueryService['_queryTelemetryService'].LogCacheHit).not.toHaveBeenCalled();
                expect(draftQueryService['_queryTelemetryService'].LogQuery).toHaveBeenCalledTimes(1);
                expect(draftQueryService['_queryTelemetryService'].LogQuery).toHaveBeenCalledWith(tc);
            }).catch(function (e) {
                fail(JSON.stringify(e));
            });
        });
        it('should log info if 1 query in batch failed', function () {
            var result1 = { id: 'q1', status: 200 };
            var result2 = { id: 'q2', status: 400, body: { error: { message: 'error message', code: 'badcode' } } };
            spyOn(draftQueryService['_metricQueryCache'], 'Get').and.returnValue(null);
            var queries = [{ id: 'q1' }, { id: 'q2' }];
            spyOn(draftQueryService, '_executeAjax').and.returnValue(Promise.resolve([result1, result2]));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            spyOn(draftQueryService['_queryTelemetryService'], 'LogCacheHit');
            spyOn(draftQueryService['_queryTelemetryService'], 'LogQuery');
            return draftQueryService.ExecuteMetricQuery(queries, tc).then(function (result) {
                expect(tc.requestSucceed).toBe(false);
                expect(tc.statusCode).toBe(400);
                expect(tc.statusText).toBe('badcode');
                expect(tc.error).toBe('error message');
                expect(tc.failedQuery).toBe('q2');
                expect(tc.batchedNames.join()).toBe('q1,q2');
                expect(draftQueryService['_queryTelemetryService'].LogQuery).toHaveBeenCalledTimes(1);
                expect(draftQueryService['_queryTelemetryService'].LogQuery).toHaveBeenCalledWith(tc);
            }).catch(function (e) {
                fail(JSON.stringify(e));
            });
        });
        it('should reject if query fails', function () {
            var result2 = { id: 'q2', status: 200 };
            spyOn(draftQueryService['_metricQueryCache'], 'Get').and.returnValues(null, result2);
            var queries = [{ id: 'q1' }, { id: 'q2' }];
            var error = {};
            spyOn(draftQueryService, '_executeAjax').and.returnValue(Promise.reject(error));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            spyOn(draftQueryService['_queryTelemetryService'], 'LogCacheHit');
            return draftQueryService.ExecuteMetricQuery(queries, tc).then(function (result) {
                fail('Expected promise to reject');
            }).catch(function (e) {
                expect(draftQueryService['_executeAjax']).toHaveBeenCalledTimes(1);
                var args = draftQueryService['_executeAjax'].calls.mostRecent().args;
                expect(args[1]).toBe(HttpMethod.Post);
                expect(args[0]('host', 'appId')).toBe(Paths.MetricQuery.format('host', 'appId', 'beta'));
                expect(args[2].length).toBe(1);
                expect(args[2][0]).toBe(queries[0]);
                expect(args[3]).toBe(tc);
                expect(e).toBe(error);
                expect(draftQueryService['_queryTelemetryService'].LogCacheHit).toHaveBeenCalled();
            });
        });
    });
    describe('ExecuteMetricMetadataQueryV1', function () {
        it('should issue query and log', function () {
            var expected = {};
            spyOn(draftQueryService, '_executeAjax').and.returnValue(Promise.resolve(expected));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            spyOn(draftQueryService['_queryTelemetryService'], 'LogCacheHit');
            spyOn(draftQueryService['_queryTelemetryService'], 'LogQuery');
            return draftQueryService.ExecuteMetricMetadataQueryV1(tc).then(function (result) {
                expect(result).toBe(expected);
                expect(draftQueryService['_executeAjax']).toHaveBeenCalledTimes(1);
                var args = draftQueryService['_executeAjax'].calls.mostRecent().args;
                expect(args[1]).toBe(HttpMethod.Get);
                expect(args[0]('host', 'appId')).toBe(Paths.MetricMetadataQuery.format('host', 'appId', 'v1'));
                expect(args[2]).toBe(null);
                expect(args[3]).toBe(tc);
                expect(draftQueryService['_queryTelemetryService'].LogCacheHit).toHaveBeenCalledTimes(0);
                expect(draftQueryService['_queryTelemetryService'].LogQuery).toHaveBeenCalledTimes(1);
                expect(draftQueryService['_queryTelemetryService'].LogQuery).toHaveBeenCalledWith(tc);
            }).catch(function (e) {
                fail(JSON.stringify(e));
            });
        });
    });
    describe('ExecuteMetricMetadataQuery', function () {
        it('should issue query and log', function () {
            var expected = {};
            spyOn(draftQueryService, '_executeAjax').and.returnValue(Promise.resolve(expected));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            spyOn(draftQueryService['_queryTelemetryService'], 'LogCacheHit');
            spyOn(draftQueryService['_queryTelemetryService'], 'LogQuery');
            return draftQueryService.ExecuteMetricMetadataQuery(tc).then(function (result) {
                expect(result).toBe(expected);
                expect(draftQueryService['_executeAjax']).toHaveBeenCalledTimes(1);
                var args = draftQueryService['_executeAjax'].calls.mostRecent().args;
                expect(args[1]).toBe(HttpMethod.Get);
                expect(args[0]('host', 'appId')).toBe(Paths.MetricMetadataQuery.format('host', 'appId', 'beta'));
                expect(args[2]).toBe(null);
                expect(args[3]).toBe(tc);
                expect(draftQueryService['_queryTelemetryService'].LogCacheHit).toHaveBeenCalledTimes(0);
                expect(draftQueryService['_queryTelemetryService'].LogQuery).toHaveBeenCalledTimes(1);
                expect(draftQueryService['_queryTelemetryService'].LogQuery).toHaveBeenCalledWith(tc);
            }).catch(function (e) {
                fail(JSON.stringify(e));
            });
        });
        it('should issue query and log failure', function () {
            spyOn(draftQueryService, '_executeAjax').and.returnValue(Promise.reject(null));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            spyOn(draftQueryService['_queryTelemetryService'], 'LogCacheHit');
            spyOn(draftQueryService['_queryTelemetryService'], 'LogQuery');
            return draftQueryService.ExecuteMetricMetadataQuery(tc).then(function (result) {
                fail('should fail');
            }).catch(function (e) {
                expect(draftQueryService['_executeAjax']).toHaveBeenCalledTimes(1);
                var args = draftQueryService['_executeAjax'].calls.mostRecent().args;
                expect(args[1]).toBe(HttpMethod.Get);
                expect(args[0]('host', 'appId')).toBe(Paths.MetricMetadataQuery.format('host', 'appId', 'beta'));
                expect(args[2]).toBe(null);
                expect(args[3]).toBe(tc);
                expect(draftQueryService['_queryTelemetryService'].LogCacheHit).toHaveBeenCalledTimes(0);
                expect(draftQueryService['_queryTelemetryService'].LogQuery).toHaveBeenCalledTimes(0);
            });
        });
    });
    describe('ClearCaches', function () {
        it('should clear all caches', function () {
            spyOn(draftQueryService['_metricQueryCache'], 'Clear');
            spyOn(draftQueryService['_kqlQueryCache'], 'Clear');
            draftQueryService.ClearCaches();
            expect(draftQueryService['_metricQueryCache'].Clear).toHaveBeenCalledTimes(1);
            expect(draftQueryService['_kqlQueryCache'].Clear).toHaveBeenCalledTimes(1);
        });
    });
    describe('buildODataUrl', function () {
        it('should return correct result if no event type', function () {
            var host = 'host';
            var query = { eventType: null, parameters: {} };
            var result = draftQueryService['_buildODataUrl'](host, query);
            expect(result).toBe('host/$all');
        });
        it('should return correct result if event type is specified', function () {
            var host = 'host';
            var query = { eventType: 'my-type', parameters: {} };
            var result = draftQueryService['_buildODataUrl'](host, query);
            expect(result).toBe('host/my-type');
        });
        it('should return correct result if query param is not empty', function () {
            var host = 'host';
            var query = { eventType: 'my-type', parameters: { $filter: 'v1', timespan: 'v2' } };
            var result = draftQueryService['_buildODataUrl'](host, query);
            expect(result).toBe('host/my-type?%24filter=v1&timespan=v2');
        });
    });
});
//# sourceMappingURL=DraftQueryService.spec.js.map