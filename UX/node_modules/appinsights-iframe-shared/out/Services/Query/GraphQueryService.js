import { AjaxHelper } from './AjaxHelper';
import { BuildGraphPath } from './UrlHelper';
import { GraphPathTemplates } from './Constants';
import { QueryCache } from './QueryCache';
import { TimeConstants } from '../../TimeContext';
/**
 * Executes Graph queries and returns response.
 */
var GraphQueryService = /** @class */ (function () {
    function GraphQueryService(routeConfig, telemetryService, telemetryContext, instanceId) {
        this._cache = new QueryCache(TimeConstants.minute * 3, JSON.stringify);
        this._ajaxHelper = new AjaxHelper(routeConfig, telemetryService, telemetryContext, instanceId);
    }
    GraphQueryService.prototype.ExecuteQuery = function (componentId, path, telemetryContext, queryParams) {
        var _this = this;
        var graphPath = BuildGraphPath(componentId.SubscriptionId, componentId.ResourceGroup, path, queryParams);
        var cache = this._cache.Get(graphPath);
        if (cache) {
            return Promise.resolve(cache);
        }
        return this._executeAjax(function (host, appId) { return GraphPathTemplates.GraphBase.format(host, graphPath); }, telemetryContext).then(function (result) {
            _this._cache.Store(graphPath, result);
            return result;
        });
    };
    GraphQueryService.prototype._executeAjax = function (buildUri, telemetryContext) {
        return this._ajaxHelper.ExecuteGetAjax(buildUri, telemetryContext);
    };
    return GraphQueryService;
}());
export { GraphQueryService };
//# sourceMappingURL=GraphQueryService.js.map