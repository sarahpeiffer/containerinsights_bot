import { GraphQueryService } from './GraphQueryService';
import { QueryTelemetryContext } from './QueryTelemetryService';
import { TelemetryContext } from '../TelemetryContext';
describe('GraphQueryService', function () {
    var graphQueryService;
    var portalConfigService;
    var telemetryService;
    var telemetryContext;
    var instanceId;
    beforeEach(function () {
        portalConfigService = {
            AppId: function () { return Promise.resolve(null); },
            RouteInfo: function () { return Promise.resolve(null); },
            RouteName: function () { return 'Graph'; },
            Token: function () { return Promise.resolve(null); }
        };
        telemetryService = {
            LogEvent: function () { },
            LogException: function () { },
            Register: function () { return null; },
            LogTrace: function () { }
        };
        telemetryContext = new TelemetryContext(telemetryService);
        graphQueryService = new GraphQueryService(portalConfigService, telemetryService, telemetryContext, function () { return instanceId; });
    });
    describe('ExecuteQuery', function () {
        it('should execute get with correct path and store result', function () {
            var queryResult = {};
            spyOn(graphQueryService, '_executeAjax').and.returnValue(Promise.resolve(queryResult));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            var componentId = {
                SubscriptionId: 'sub1',
                ResourceGroup: 'rg1',
                Name: 'name1'
            };
            var path = "somepath";
            return graphQueryService.ExecuteQuery(componentId, path, tc).then(function (result) {
                expect(result).toBe(queryResult);
                expect(graphQueryService['_executeAjax']).toHaveBeenCalledTimes(1);
                var args = graphQueryService['_executeAjax'].calls.mostRecent().args;
                expect(args[0]('myhost')).toBe('https://myhost/data/arm/subscriptions/sub1/resourcegroups/rg1/somepath?api-version=2014-04-01-preview');
                expect(args[1]).toBe(tc);
            }).catch(function (e) {
                fail(e);
            });
        });
        it('should execute get with correct path and query params and store result', function () {
            var queryResult = {};
            spyOn(graphQueryService, '_executeAjax').and.returnValue(Promise.resolve(queryResult));
            var tc = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            var componentId = {
                SubscriptionId: 'sub1',
                ResourceGroup: 'rg1',
                Name: 'name1'
            };
            var path = "somepath";
            var queryParams = {
                field1: 'somefield',
                field2: true
            };
            return graphQueryService.ExecuteQuery(componentId, path, tc, queryParams).then(function (result) {
                expect(result).toBe(queryResult);
                expect(graphQueryService['_executeAjax']).toHaveBeenCalledTimes(1);
                var args = graphQueryService['_executeAjax'].calls.mostRecent().args;
                expect(args[0]('myhost')).toBe('https://myhost/data/arm/subscriptions/sub1/resourcegroups/rg1/somepath?api-version=2014-04-01-preview'
                    + '&field1=somefield&field2=true');
                expect(args[1]).toBe(tc);
            }).catch(function (e) {
                fail(e);
            });
        });
    });
});
//# sourceMappingURL=GraphQueryService.spec.js.map