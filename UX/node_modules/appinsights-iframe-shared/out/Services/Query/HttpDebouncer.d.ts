/// <reference types="es6-promise" />
import { StringMap } from '../..';
import { Debouncer } from './Debouncer';
import { AxiosResponse } from 'axios';
export interface BatchableHttpRequest<T> {
    params: T;
    method: string;
    uri: string;
    headers: any;
}
export interface DeferredPayload<T> {
    resolve: (value?: T | Thenable<T>) => void;
    reject: (error?: any) => void;
}
export declare type DeferredBatchableHttpRequest<TR, TP> = BatchableHttpRequest<TR> & DeferredPayload<AxiosResponse<TP>>;
/**
 * Abstract class for creating a debouncers. Follows template-method pattern, allowing the specific debouncer to define
 * how to execute batches on its particular service.
 */
export declare abstract class HttpDebouncer {
    private _maxBatchSize;
    private _interval;
    protected _debouncers: StringMap<Debouncer<DeferredBatchableHttpRequest<any, any>>>;
    constructor(interval?: number, maxBatchSize?: number);
    /**
     * Execute an HTTP request with debouncing, allowing the request to be batched if it was executed in close time proximity to other
     * batchable requests. Returns a promise with an AxiosResponse contract so it is interchangeable with a normal HTTP request.
     * @param request
     */
    batch<TParams, TResponse>(request: BatchableHttpRequest<TParams>): Promise<AxiosResponse<TResponse>>;
    /**
     * Define the batch scope and host name (authority) for the batch request.
     * Batched requests with different scopes will never be batched together.
     * The authority defines the host name to execute batch calls against.
     * @param request
     */
    protected abstract getBatchScope<T>(request: BatchableHttpRequest<T>): {
        scope: string;
        authority: string;
    };
    /**
     * Execute a batch of requests. Size of the batch will not exceed max batch size of the debouncer.
     * @param data Batch of requests. When the batch completes, resolve or reject should be called on each request.
     * @param uri The authority returned by getBatchScope.
     */
    protected abstract executeBatch<TParams, TResponse>(data: (DeferredBatchableHttpRequest<TParams, TResponse>)[], uri: string): Promise<void>;
    private getDebouncer(scope, authority);
}
