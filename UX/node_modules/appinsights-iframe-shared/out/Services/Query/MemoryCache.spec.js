import { MemoryCache } from './MemoryCache';
describe('MemoryCache', function () {
    describe('Store', function () {
        it('should store key with no expiration if lifetime is infinity', function () {
            var cache = new MemoryCache();
            cache.Store('mykey', 'myval', Infinity);
            expect(cache['_cache']['mykey'].item).toBe('myval');
            expect(cache['_cache']['mykey'].expiration).toBe(null);
        });
        it('should store key with expiration if lifetime set', function () {
            var cache = new MemoryCache();
            cache.Store('mykey', 'myval', 60000);
            expect(cache['_cache']['mykey'].item).toBe('myval');
            expect(cache['_cache']['mykey'].expiration > new Date(Date.now() + 50000)).toBe(true);
        });
    });
    describe('Get', function () {
        it('should get value if expiration is null and cache hit', function () {
            var cache = new MemoryCache();
            cache['_cache']['mykey'] = { item: 'myval', expiration: null };
            var value = cache.Get('mykey');
            expect(value).toBe('myval');
        });
        it('should get value if expiration not hit and cache hit', function () {
            var cache = new MemoryCache();
            cache['_cache']['mykey'] = { item: 'myval', expiration: new Date(Date.now() + 600000) };
            var value = cache.Get('mykey');
            expect(value).toBe('myval');
        });
        it('should return null if item expired', function () {
            var cache = new MemoryCache();
            cache['_cache']['mykey'] = { item: 'myval', expiration: new Date(Date.now() - 600000) };
            cache.Store('dummy', 'value', 1); // Cache is only cleared on calls to store
            var value = cache.Get('mykey');
            expect(value).toBe(null);
            expect(['_cache']['mykey']).not.toBeDefined();
        });
        it('should return null if item not present', function () {
            var cache = new MemoryCache();
            cache['_cache']['mykey1'] = { item: 'myval', expiration: null };
            var value = cache.Get('mykey');
            expect(value).toBe(null);
        });
    });
    describe('Clear', function () {
        it('should clear cache', function () {
            var cache = new MemoryCache();
            cache['_cache']['mykey'] = { item: 'myval', expiration: null };
            expect(cache.Get('mykey')).toBe('myval');
            cache.Clear();
            expect(cache.Get('mykey')).toBeNull();
        });
    });
});
//# sourceMappingURL=MemoryCache.spec.js.map