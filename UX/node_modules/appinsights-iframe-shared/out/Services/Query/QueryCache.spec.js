import { QueryCache } from './QueryCache';
describe('QueryCache', function () {
    describe('Get', function () {
        it('should get value from cache with key function', function () {
            var cache = new QueryCache(123, function (k) { return 'keyfn:' + k; });
            var value = {};
            spyOn(cache['_cache'], 'Get').and.returnValue(value);
            var result = cache.Get('query');
            expect(result).toBe(value);
            expect(cache['_cache'].Get).toHaveBeenCalledWith('keyfn:query');
        });
    });
    describe('Store', function () {
        it('should store value with lifetime and key function', function () {
            var cache = new QueryCache(123, function (k) { return 'keyfn:' + k; });
            var value = {};
            spyOn(cache['_cache'], 'Store');
            cache.Store('query', value);
            expect(cache['_cache'].Store).toHaveBeenCalledWith('keyfn:query', value, 123);
        });
    });
    describe('Clear', function () {
        it('should clear cache', function () {
            var cache = new QueryCache(123, function (k) { return 'keyfn:' + k; });
            spyOn(cache['_cache'], 'Clear');
            cache.Clear();
            expect(cache['_cache'].Clear).toHaveBeenCalledTimes(1);
        });
    });
});
//# sourceMappingURL=QueryCache.spec.js.map