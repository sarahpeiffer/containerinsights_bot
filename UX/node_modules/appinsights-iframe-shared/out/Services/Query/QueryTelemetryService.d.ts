import { AxiosResponse } from 'axios';
import { TimeContext } from '../../TimeContext';
import { ITelemetryService } from '../../SharedInterfaces';
import { TelemetryContext } from '../TelemetryContext';
export declare class QueryTelemetryContext {
    requestId: string;
    measurements?: QueryMeasurements;
    tokenInCache?: boolean;
    routeInfoInCache?: boolean;
    appIdInCache?: boolean;
    requestSucceed?: boolean;
    batchedNames?: string[];
    statusCode?: number;
    statusText?: string;
    method?: string;
    url?: string;
    batchUrl?: string;
    batchID?: string;
    cacheControl?: string;
    error?: string;
    failedQuery?: string;
    retryCount?: number;
    timeContext?: {
        duration: string;
        interval: string;
    };
    filters?: string;
    queryName?: string;
    partName?: string;
    operationId?: string;
    actionName: string;
    constructor(telemetryContext: TelemetryContext, operationId: string, partName: string, queryName: string, timeContext: TimeContext, filters?: string);
    getClientRequestInfo(): string;
    getTelemetryProperties(): any;
    getTelemetryMeasurements(): any;
    addResponseDetails(response: AxiosResponse): void;
}
export interface QueryMeasurements {
    GetAuthHeader_Start?: number;
    GetAuthHeader_End?: number;
    GetRouteInfo_Start?: number;
    GetRouteInfo_End?: number;
    GetAppId_Start?: number;
    GetAppId_End?: number;
    Request_Start?: number;
    Query_Start?: number;
    Query_End?: number;
    Query_End_Date?: Date;
}
export declare class QueryTelemetryService {
    private _telemetryService;
    private _telemetryContext;
    constructor(telemetryService: ITelemetryService, telemetryContext: TelemetryContext);
    LogQuery(context: QueryTelemetryContext): void;
    LogCacheHit(context: QueryTelemetryContext): void;
}
