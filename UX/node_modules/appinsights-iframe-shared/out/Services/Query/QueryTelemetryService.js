import { StatusCodes, HeaderNames } from './DraftDataTypes';
import { Utils } from '../../Utils';
import { TelemetryConstants } from '../../TelemetryConstants';
import { GrainToKQLInterval, GetBucketizedDuration } from '../..';
var QueryTelemetryContext = /** @class */ (function () {
    function QueryTelemetryContext(telemetryContext, operationId, partName, queryName, timeContext, filters) {
        this.queryName = queryName;
        this.filters = filters;
        this.requestId = Utils.RandomGuid();
        this.measurements = {};
        if (timeContext) {
            this.timeContext = {
                interval: GrainToKQLInterval(timeContext),
                duration: GetBucketizedDuration(timeContext)
            };
        }
        else {
            this.timeContext = { interval: '', duration: '' };
        }
        this.batchedNames = [];
        this.partName = partName;
        this.operationId = operationId;
        this.actionName = telemetryContext.GetOperationName(operationId);
        telemetryContext.RecordQueryIssued(operationId, queryName);
    }
    QueryTelemetryContext.prototype.getClientRequestInfo = function () {
        return "query=" + this.queryName + "&part=" + this.partName + "&action=" + this.actionName;
    };
    QueryTelemetryContext.prototype.getTelemetryProperties = function () {
        return {
            ClientRequestId: this.requestId,
            ClientRequestInfoPartName: this.partName,
            StatusText: this.statusText,
            Status: this.statusCode,
            Result: this.requestSucceed ? 'Succeed' : 'Fail',
            Url: this.url,
            Type: this.method,
            TimeRange: this.timeContext.duration,
            Grain: this.timeContext.interval,
            EndTime: this.measurements.Query_End_Date,
            QueryName: this.queryName,
            RetryCount: this.retryCount,
            Filters: this.filters,
            Error: typeof this.error === 'string' ? this.error : JSON.stringify(this.error),
            CacheControl: this.cacheControl,
            AuthTokenCached: this.tokenInCache,
            AppIdCached: this.appIdInCache,
            RouteInfoCached: this.routeInfoInCache,
            OperationId: this.operationId,
            FailedQuery: this.failedQuery,
            BatchUrl: this.batchUrl,
            BatchID: this.batchID,
            BatchedQueryNames: this.batchedNames.join(','),
            ActionName: this.actionName
        };
    };
    QueryTelemetryContext.prototype.getTelemetryMeasurements = function () {
        return {
            Ajax_TotalTime: this.measurements.Query_End && this.measurements.Request_Start
                ? this.measurements.Query_End - this.measurements.Request_Start : 0,
            Ajax_QueryTime: this.measurements.Query_End && this.measurements.Query_Start
                ? this.measurements.Query_End - this.measurements.Query_Start : 0,
            Ajax_GetAuthHeaderDuration: this.measurements.GetAuthHeader_End && this.measurements.GetAppId_Start
                ? this.measurements.GetAuthHeader_End - this.measurements.GetAuthHeader_Start : 0,
            Ajax_GetRouteInfoDuration: this.measurements.GetRouteInfo_End && this.measurements.GetRouteInfo_Start
                ? this.measurements.GetRouteInfo_End - this.measurements.GetRouteInfo_Start : 0,
            Ajax_GetAppIdDuration: this.measurements.GetAppId_End && this.measurements.GetAppId_Start
                ? this.measurements.GetAppId_End - this.measurements.GetAppId_Start : 0
        };
    };
    QueryTelemetryContext.prototype.addResponseDetails = function (response) {
        if (response) {
            this.statusCode = response.status;
            this.statusText = response.statusText;
            this.requestSucceed = response.status === StatusCodes.Success || response.status === StatusCodes.NoContent;
            this.cacheControl = response.config.headers[HeaderNames.CacheControl];
            this.url = response.config.url;
            this.method = response.config.method;
            if (response.config.headers.BatchID) {
                this.batchID = response.config.headers.BatchID;
                this.batchUrl = response.config.headers.BatchURL;
            }
            if (!this.requestSucceed && response.data && response.data.error) {
                this.error = response.data.error;
            }
        }
        else {
            this.requestSucceed = false;
        }
    };
    return QueryTelemetryContext;
}());
export { QueryTelemetryContext };
var QueryTelemetryService = /** @class */ (function () {
    function QueryTelemetryService(telemetryService, telemetryContext) {
        this._telemetryService = telemetryService;
        this._telemetryContext = telemetryContext;
    }
    QueryTelemetryService.prototype.LogQuery = function (context) {
        this._telemetryContext.RecordQueryComplete(context.operationId, context.queryName, context.requestSucceed, false, context.statusCode, context.statusText, context.batchedNames);
        this._telemetryService.LogEvent(TelemetryConstants.AjaxQuery, context.getTelemetryProperties(), context.getTelemetryMeasurements());
    };
    QueryTelemetryService.prototype.LogCacheHit = function (context) {
        context.requestSucceed = true;
        this._telemetryContext.RecordQueryComplete(context.operationId, context.queryName, true, true, context.statusCode, context.statusText, context.batchedNames);
        this._telemetryService.LogEvent('Memory cache hit', context.getTelemetryProperties(), context.getTelemetryMeasurements());
    };
    return QueryTelemetryService;
}());
export { QueryTelemetryService };
//# sourceMappingURL=QueryTelemetryService.js.map