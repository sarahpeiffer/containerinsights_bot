import { QueryTelemetryContext, QueryTelemetryService } from './QueryTelemetryService';
import { Utils } from '../../Utils';
import { TimeContext } from '../../TimeContext';
import * as TimeContextConverter from '../../TimeContextConverter';
import { TelemetryContext } from '../TelemetryContext';
describe('QueryTelemetryContext', function () {
    var telemetryContext;
    beforeEach(function () {
        var telemetryService = {
            LogEvent: function () { },
            LogException: function () { },
            LogTrace: function () { },
            Register: function () { return null; }
        };
        telemetryContext = new TelemetryContext(telemetryService);
    });
    describe('ctor', function () {
        it('should initialize with time context', function () {
            spyOn(telemetryContext, 'RecordQueryIssued');
            var requestId = 'sldkfj';
            spyOn(Utils, 'RandomGuid').and.returnValue(requestId);
            spyOn(TimeContextConverter, 'GrainToKQLInterval').and.returnValue('grain');
            spyOn(TimeContextConverter, 'GetBucketizedDuration').and.returnValue('duration');
            var result = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', new TimeContext(23984234), 'my filter');
            expect(result.queryName).toBe('my query');
            expect(result.partName).toBe('my part');
            expect(result.filters).toBe('my filter');
            expect(result.operationId).toBe('opid');
            expect(result.timeContext.interval).toBe('grain');
            expect(result.timeContext.duration).toBe('duration');
            expect(result.requestId).toBe(requestId);
            expect(result.measurements).toBeTruthy();
            expect(telemetryContext.RecordQueryIssued).toHaveBeenCalledTimes(1);
            expect(telemetryContext.RecordQueryIssued).toHaveBeenCalledWith('opid', 'my query');
        });
    });
    describe('getClientRequestInfo', function () {
        it('should return request info string', function () {
            spyOn(telemetryContext, 'GetOperationName').and.returnValue('action');
            var context = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            expect(context.getClientRequestInfo()).toBe('query=my query&part=my part&action=action');
        });
    });
    describe('getTelemetryProperties', function () {
        it('should return telemetry properties for successful request', function () {
            var context = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', new TimeContext(23983));
            context.statusText = 'status text';
            context.statusCode = 200;
            context.requestSucceed = true;
            context.url = 'my url';
            context.method = 'my method';
            context.measurements.Query_End_Date = new Date();
            context.queryName = 'my query';
            context.retryCount = 3;
            context.filters = 'my filter';
            context.error = 'my error';
            context.cacheControl = 'cache control';
            context.tokenInCache = true;
            context.appIdInCache = false;
            context.routeInfoInCache = true;
            var result = context.getTelemetryProperties();
            expect(result.ClientRequestId).toBe(context.requestId);
            expect(result.ClientRequestInfoPartName).toBe(context.partName);
            expect(result.StatusText).toBe(context.statusText);
            expect(result.Status).toBe(context.statusCode);
            expect(result.Url).toBe(context.url);
            expect(result.Type).toBe(context.method);
            expect(result.TimeRange).toBe(context.timeContext.duration);
            expect(result.Grain).toBe(context.timeContext.interval);
            expect(result.EndTime).toBe(context.measurements.Query_End_Date);
            expect(result.QueryName).toBe(context.queryName);
            expect(result.RetryCount).toBe(context.retryCount);
            expect(result.Filters).toBe(context.filters);
            expect(result.Error).toBe(context.error);
            expect(result.CacheControl).toBe(context.cacheControl);
            expect(result.Result).toBe('Succeed');
            expect(result.AuthTokenCached).toBe(context.tokenInCache);
            expect(result.AppIdCached).toBe(context.appIdInCache);
            expect(result.RouteInfoCached).toBe(context.routeInfoInCache);
            expect(result.OperationId).toBe(context.operationId);
        });
        it('should return telemetry properties for failing request', function () {
            var context = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', new TimeContext(23983));
            context.statusText = 'status text';
            context.statusCode = 200;
            context.requestSucceed = false;
            context.url = 'my url';
            context.method = 'my method';
            context.measurements.Query_End_Date = new Date();
            context.queryName = 'my query';
            context.retryCount = 3;
            context.filters = 'my filter';
            context.error = 'my error';
            context.cacheControl = 'cache control';
            context.tokenInCache = true;
            context.appIdInCache = false;
            context.routeInfoInCache = true;
            var result = context.getTelemetryProperties();
            expect(result.ClientRequestId).toBe(context.requestId);
            expect(result.ClientRequestInfoPartName).toBe(context.partName);
            expect(result.StatusText).toBe(context.statusText);
            expect(result.Status).toBe(context.statusCode);
            expect(result.Url).toBe(context.url);
            expect(result.Type).toBe(context.method);
            expect(result.TimeRange).toBe(context.timeContext.duration);
            expect(result.Grain).toBe(context.timeContext.interval);
            expect(result.EndTime).toBe(context.measurements.Query_End_Date);
            expect(result.QueryName).toBe(context.queryName);
            expect(result.RetryCount).toBe(context.retryCount);
            expect(result.Filters).toBe(context.filters);
            expect(result.Error).toBe(context.error);
            expect(result.CacheControl).toBe(context.cacheControl);
            expect(result.Result).toBe('Fail');
            expect(result.AuthTokenCached).toBe(context.tokenInCache);
            expect(result.AppIdCached).toBe(context.appIdInCache);
            expect(result.RouteInfoCached).toBe(context.routeInfoInCache);
        });
    });
    describe('getTelemetryMeasurements', function () {
        it('should measure durations', function () {
            var context = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            context.measurements.Query_Start = 10;
            context.measurements.Query_End = 20;
            context.measurements.Request_Start = 5;
            context.measurements.GetAuthHeader_Start = 10;
            context.measurements.GetAuthHeader_End = 15;
            context.measurements.GetAppId_Start = 5;
            context.measurements.GetAppId_End = 25;
            context.measurements.GetRouteInfo_Start = 1;
            context.measurements.GetRouteInfo_End = 3;
            var results = context.getTelemetryMeasurements();
            expect(results.Ajax_TotalTime).toBe(15);
            expect(results.Ajax_QueryTime).toBe(10);
            expect(results.Ajax_GetAuthHeaderDuration).toBe(5);
            expect(results.Ajax_GetAppIdDuration).toBe(20);
            expect(results.Ajax_GetRouteInfoDuration).toBe(2);
        });
    });
    describe('addResponseDetails', function () {
        it('should add response details for successfull request', function () {
            var response = {
                status: 200,
                statusText: 'successful',
                config: {
                    headers: {
                        'Cache-Control': 'cache'
                    },
                    url: 'my url',
                    method: 'POST'
                },
            };
            var context = new QueryTelemetryContext(telemetryContext, 'opid', 'part', 'query', null);
            context.addResponseDetails(response);
            expect(context.statusCode).toBe(200);
            expect(context.statusText).toBe('successful');
            expect(context.cacheControl).toBe('cache');
            expect(context.url).toBe('my url');
            expect(context.method).toBe('POST');
            expect(context.requestSucceed).toBe(true);
        });
        it('should add response details for failing request', function () {
            var response = {
                status: 400,
                statusText: 'fail',
                config: {
                    headers: {
                        'Cache-Control': 'cache'
                    },
                    url: 'my url',
                    method: 'POST',
                },
                data: {
                    error: 'my error'
                }
            };
            var context = new QueryTelemetryContext(telemetryContext, 'opid', 'part', 'query', null);
            context.addResponseDetails(response);
            expect(context.statusCode).toBe(400);
            expect(context.statusText).toBe('fail');
            expect(context.cacheControl).toBe('cache');
            expect(context.url).toBe('my url');
            expect(context.method).toBe('POST');
            expect(context.requestSucceed).toBe(false);
            expect(context.error).toBe('my error');
        });
        it('should add response details for null request', function () {
            var context = new QueryTelemetryContext(telemetryContext, 'opid', 'part', 'query', null);
            context.addResponseDetails(null);
        });
    });
});
describe('QueryTelemetryService', function () {
    var queryTelemetryService;
    var telemetryService;
    var telemetryContext;
    beforeEach(function () {
        telemetryService = {
            LogEvent: function () { },
            LogException: function () { },
            Register: function () { return null; },
            LogTrace: function () { }
        };
        telemetryContext = new TelemetryContext(telemetryService);
        queryTelemetryService = new QueryTelemetryService(telemetryService, telemetryContext);
    });
    describe('LogQuery', function () {
        it('should log event', function () {
            spyOn(telemetryContext, 'RecordQueryComplete');
            var context = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            context.requestSucceed = false;
            context.statusCode = 205;
            context.statusText = 'my stat';
            var props = {};
            var measurements = {};
            spyOn(context, 'getTelemetryProperties').and.returnValue(props);
            spyOn(context, 'getTelemetryMeasurements').and.returnValue(measurements);
            spyOn(telemetryService, 'LogEvent');
            queryTelemetryService.LogQuery(context);
            expect(telemetryService.LogEvent).toHaveBeenCalledTimes(1);
            expect(telemetryService.LogEvent).toHaveBeenCalledWith('Ajax query', props, measurements);
            expect(telemetryContext.RecordQueryComplete).toHaveBeenCalledTimes(1);
            expect(telemetryContext.RecordQueryComplete).toHaveBeenCalledWith('opid', 'my query', false, false, 205, 'my stat', context.batchedNames);
        });
    });
    describe('LogCacheHit', function () {
        it('should log event', function () {
            spyOn(telemetryContext, 'RecordQueryComplete');
            var context = new QueryTelemetryContext(telemetryContext, 'opid', 'my part', 'my query', null);
            context.requestSucceed = false;
            context.statusCode = 205;
            context.statusText = 'my stat';
            var props = {};
            var measurements = {};
            spyOn(context, 'getTelemetryProperties').and.returnValue(props);
            spyOn(context, 'getTelemetryMeasurements').and.returnValue(measurements);
            spyOn(telemetryService, 'LogEvent');
            queryTelemetryService.LogCacheHit(context);
            expect(telemetryService.LogEvent).toHaveBeenCalledTimes(1);
            expect(telemetryService.LogEvent).toHaveBeenCalledWith('Memory cache hit', props, measurements);
            expect(telemetryContext.RecordQueryComplete).toHaveBeenCalledTimes(1);
            expect(telemetryContext.RecordQueryComplete).toHaveBeenCalledWith('opid', 'my query', true, true, 205, 'my stat', context.batchedNames);
        });
    });
});
//# sourceMappingURL=QueryTelemetryService.spec.js.map