import { MetricResult } from './DraftDataTypes';
import { StringMap, TimeSeries } from '../../SharedInterfaces';
import { TimeContext } from '../../TimeContext';
export declare class TimeSeriesManager {
    private static _timeSeriesCache;
    static RetrieveMetricData(key: string, tc: TimeContext, metricName: string): TimeSeries;
    static ClearCache(): void;
    static ProcessMetricData(key: string, tc: TimeContext, metricName: string, aggregation: string, data: MetricResult): TimeSeries;
    static RetrieveGroupedKQLData(key: string, tc: TimeContext, columns: string[], selectedOperations: string[]): StringMap<StringMap<TimeSeries>>;
    static ProcessGroupedKQLData(key: string, tc: TimeContext, columns: string[], selectedOperations: string[], data: StringMap<any>[], groupnameGen: (a: StringMap<any>) => string): StringMap<StringMap<TimeSeries>>;
    static RetrieveKQLData(key: string, tc: TimeContext, columns: string[]): StringMap<TimeSeries>;
    static ProcessKQLData(key: string, tc: TimeContext, columns: string[], data: StringMap<any>[]): StringMap<TimeSeries>;
    static AdjustTimeContextForCache(tc: TimeContext, globalTimeContext: TimeContext): TimeContext;
    private static convertMetricQueryToTimeSeries(metricName, aggregation, result);
    private static extractKQLData(query, columns);
    private static extractGroupedKQLData(query, columns, groupnameGen);
    private static composeMetricKey(key, metricName, grain);
    private static composeKQLkey(key, operation, metricName, grain);
}
