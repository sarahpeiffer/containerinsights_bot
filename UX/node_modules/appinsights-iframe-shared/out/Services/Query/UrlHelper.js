import { ResourceIdToResourceInfo } from './shared/ResourceCore';
import { Providers, ResourceType, GraphPathTemplates, ApiVersions } from './Constants';
import { stringify } from 'query-string';
/**
 * Builds CSM path to be used in an ajax call, based on the specified subscription id and resource group, in the
 * format "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/".
 *
 * @param subscriptionId The subscription id.
 * @param resourceGroup The resource group name.
 */
export function BuildCsmPath(subscriptionId, resourceGroup) {
    return GraphPathTemplates.CsmBase.format(subscriptionId, resourceGroup);
}
/**
* Builds CSM path to be used in an ajax call, based on the specified subscription id, in the
* format "/subscriptions/{subscriptionId}".
*
* @param subscriptionId The subscription id.
*/
export function BuildCsmPathWithSubscription(subscriptionId) {
    return GraphPathTemplates.CsmSubscriptionBase.format(subscriptionId);
}
/**
 * Builds a full graph path to be used in an ajax call, based on the specified parameters and the graph path of the action
 * to be called.
 *
 * @param subscriptionId The subscription id.
 * @param resourceGroup The resource group name.
 * @param graphPath The specific path to the graph action to be called, e.g. /components/WebsiteName/usageseries/
 * @param queryParams An object specifying query parameters to be appended to the url.
 */
export function BuildGraphPath(subscriptionId, resourceGroup, graphPath, queryParams) {
    var path;
    if (subscriptionId === '') {
        path = '/{0}'.format(graphPath);
    }
    else if (resourceGroup === '') {
        path = '{0}/{1}'.format(BuildCsmPathWithSubscription(subscriptionId), graphPath);
    }
    else {
        path = '{0}/{1}'.format(BuildCsmPath(subscriptionId, resourceGroup), graphPath);
    }
    if (!queryParams) {
        queryParams = {};
    }
    // Make a copy of the params and add in the API version.
    var fullParams = queryParams;
    // Don't override api version if it's explicitly specified
    if (!fullParams['api-version']) {
        var version = undefined;
        var pathLowerCase = path.toLowerCase();
        if (pathLowerCase.indexOf(Providers.InsightsProvider) !== -1) {
            var resourceInfo = ResourceIdToResourceInfo(path, resourceGroup !== '', false /* DO NOT parse ResourceTypeName*/);
            if (resourceInfo && resourceInfo.RemainingPathSegments &&
                (resourceInfo.RemainingPathSegments.indexOf(ResourceType.WebTests) !== -1 ||
                    resourceInfo.RemainingPathSegments.indexOf(ResourceType.SyntheticMonitorLocations) !== -1)) {
                version = ApiVersions.WebTestsApiVersion;
            }
            else if (resourceInfo) {
                switch (resourceInfo.ResourceType) {
                    case ResourceType.AlertRules:
                        version = ApiVersions.AlertRulesApiVersion;
                        break;
                    case ResourceType.Features:
                        version = ApiVersions.FeaturesApiVersion;
                        break;
                    case ResourceType.EventTypes:
                        version = ApiVersions.EventTypesApiVersion;
                        break;
                    case ResourceType.AlertsV2:
                        version = ApiVersions.AlertsV2ApiVersion;
                        break;
                    default:
                        if (IsPreviewPath(resourceInfo)) {
                            version = ApiVersions.ComponentsGraphPreviewVersion;
                        }
                        else if (IsDraftPath(resourceInfo)) {
                            version = ApiVersions.DraftApiVersion;
                        }
                        else {
                            version = ApiVersions.GraphApiVersion;
                        }
                        break;
                }
            }
            else {
                version = ApiVersions.GraphApiVersion;
            }
        }
        else if (pathLowerCase.indexOf(Providers.WebSitesProvider) !== -1) {
            version = ApiVersions.WebSitesApiVersion;
        }
        else if (pathLowerCase.indexOf(Providers.SqlProvider) !== -1) {
            version = ApiVersions.SqlApiVersion;
        }
        else if (pathLowerCase.indexOf(Providers.StorageProvider) !== -1) {
            version = ApiVersions.StorageApiVersion;
        }
        else if (pathLowerCase.indexOf(Providers.ClassicStorageProvider) !== -1) {
            version = ApiVersions.ClassicStorageApiVersion;
        }
        else if (pathLowerCase.indexOf(Providers.OperationalInsightsProvider) !== -1) {
            version = ApiVersions.OmsApiVersion;
        }
        else {
            version = ApiVersions.CsmApiVersion;
        }
        fullParams['api-version'] = version;
    }
    var queryString = stringify(fullParams);
    if (queryString) {
        if (path.indexOf('?') === -1) {
            path += '?' + queryString;
        }
        else {
            path += '&' + queryString;
        }
    }
    return path;
}
/**
 * Checks resource query path is under preview route
 */
function IsPreviewPath(resourceInfo) {
    // all lowercase input
    return resourceInfo.ResourceType === ResourceType.Components
        && resourceInfo.RemainingPathSegments
        && resourceInfo.RemainingPathSegments.filter(function (segment) { return segment.toLowerCase() === 'workitems'
            || segment.toLowerCase() === 'hasworkitemsauthorization'
            || segment.toLowerCase() === 'authorizationtoken'; }).length >= 0;
}
/**
 * checks to see if the path contains /api/ which is a draft path
 * @param resourceInfo
 */
function IsDraftPath(resourceInfo) {
    // all lowercase input
    return resourceInfo.ResourceType === ResourceType.Components
        && resourceInfo.RemainingPathSegments
        && resourceInfo.RemainingPathSegments.filter(function (segment) { return segment.toLowerCase() === 'api'; }).length >= 0;
}
//# sourceMappingURL=UrlHelper.js.map