import { ApiVersions } from './Constants';
import { stringify } from 'query-string';
import { BuildCsmPath, BuildGraphPath } from './UrlHelper';
describe('BuildCsmPath', function () {
    it('Path is built correctly', function () {
        var expectedSubscription = '12345';
        var expectedGroup = 'ABC Group';
        var expectedFullPath = '/subscriptions/{0}/resourcegroups/{1}'.format(expectedSubscription, expectedGroup);
        var result = BuildCsmPath(expectedSubscription, expectedGroup);
        expect(result).toBe(expectedFullPath);
    });
});
describe('BuildGraphPath', function () {
    it('Path is built correctly without params', function () {
        var expectedSubscription = '12345';
        var expectedGroup = 'abc Group';
        var graphPath = 'providers/microsoft.insights/foo component';
        var expectedFullPath = '/subscriptions/{0}/resourcegroups/{1}/{2}?api-version={3}'
            .format(expectedSubscription, expectedGroup, graphPath, ApiVersions.GraphApiVersion);
        var result = BuildGraphPath(expectedSubscription, expectedGroup, graphPath);
        expect(result).toBe(expectedFullPath);
    });
    it('Path is built correctly with params', function () {
        var expectedSubscription = '12345';
        var expectedGroup = 'abc Group';
        var graphPath = 'providers/microsoft.insights/foo component';
        var queryParams = {
            param1: 'foo',
            param2: 'bar',
            'api-version': ApiVersions.GraphApiVersion
        };
        var expectedFullPath = '/subscriptions/{0}/resourcegroups/{1}/{2}?'
            .format(expectedSubscription, expectedGroup, graphPath) + stringify(queryParams);
        var result = BuildGraphPath(expectedSubscription, expectedGroup, graphPath, queryParams);
        expect(result).toBe(expectedFullPath);
    });
    it('For non-InsightsPortal paths the CSM API version is used.', function () {
        var expectedSubscription = '12345';
        var expectedGroup = 'abc';
        var graphPath = 'resources';
        var expectedFullPath = '/subscriptions/{0}/resourcegroups/{1}/{2}?api-version={3}'
            .format(expectedSubscription, expectedGroup, graphPath, ApiVersions.CsmApiVersion);
        var result = BuildGraphPath(expectedSubscription, expectedGroup, graphPath);
        expect(result).toBe(expectedFullPath);
    });
    it('If api version is explicitly specified in query parameters, use the specified version.', function () {
        var expectedSubscription = '12345';
        var expectedGroup = 'abc';
        var graphPath = 'resources';
        var queryParams = {
            'api-version': 'customapiversion'
        };
        var expectedFullPath = '/subscriptions/{0}/resourcegroups/{1}/{2}?api-version=customapiversion'
            .format(expectedSubscription, expectedGroup, graphPath);
        var result = BuildGraphPath(expectedSubscription, expectedGroup, graphPath, queryParams);
        expect(result).toBe(expectedFullPath);
    });
    it('For Alert Rules Provider paths the Alert Rules API version is used.', function () {
        var expectedSubscription = '12345';
        var expectedGroup = 'abc';
        var graphPath = 'providers/microsoft.insights/alertrules';
        var expectedFullPath = '/subscriptions/{0}/resourcegroups/{1}/{2}?api-version={3}'
            .format(expectedSubscription, expectedGroup, graphPath, ApiVersions.AlertRulesApiVersion);
        var result = BuildGraphPath(expectedSubscription, expectedGroup, graphPath);
        expect(result).toBe(expectedFullPath);
    });
    it('For Features paths the Features API version is used.', function () {
        var expectedSubscription = '12345';
        var expectedGroup = 'abc';
        var graphPath = 'providers/microsoft.insights/features';
        var expectedFullPath = '/subscriptions/{0}/resourcegroups/{1}/{2}?api-version={3}'
            .format(expectedSubscription, expectedGroup, graphPath, ApiVersions.FeaturesApiVersion);
        var result = BuildGraphPath(expectedSubscription, expectedGroup, graphPath);
        expect(result).toBe(expectedFullPath);
    });
    it('For web sites paths WebSites API version is used', function () {
        var expectedSubscription = '12345';
        var expectedGroup = 'abc';
        var graphPath = 'providers/microsoft.web/sites';
        var expectedFullPath = '/subscriptions/{0}/resourcegroups/{1}/{2}?api-version={3}'
            .format(expectedSubscription, expectedGroup, graphPath, ApiVersions.WebSitesApiVersion);
        var result = BuildGraphPath(expectedSubscription, expectedGroup, graphPath);
        expect(result).toBe(expectedFullPath);
    });
    it('For SQL paths SQL API version is used', function () {
        var expectedSubscription = '12345';
        var expectedGroup = 'abc';
        var graphPath = 'providers/microsoft.sql/servers';
        var expectedFullPath = '/subscriptions/{0}/resourcegroups/{1}/{2}?api-version={3}'
            .format(expectedSubscription, expectedGroup, graphPath, ApiVersions.SqlApiVersion);
        var result = BuildGraphPath(expectedSubscription, expectedGroup, graphPath);
        expect(result).toBe(expectedFullPath);
    });
    it('For Azure storage paths Storage API version is used', function () {
        var expectedSubscription = '12345';
        var expectedGroup = 'abc';
        var graphPath = 'providers/microsoft.storage/blobs';
        var expectedFullPath = '/subscriptions/{0}/resourcegroups/{1}/{2}?api-version={3}'
            .format(expectedSubscription, expectedGroup, graphPath, ApiVersions.StorageApiVersion);
        var result = BuildGraphPath(expectedSubscription, expectedGroup, graphPath);
        expect(result).toBe(expectedFullPath);
    });
    it('For Azure classic storage paths Classic Storage API version is used', function () {
        var expectedSubscription = '12345';
        var expectedGroup = 'abc';
        var graphPath = 'providers/microsoft.classicstorage/blobs';
        var expectedFullPath = '/subscriptions/{0}/resourcegroups/{1}/{2}?api-version={3}'
            .format(expectedSubscription, expectedGroup, graphPath, ApiVersions.ClassicStorageApiVersion);
        var result = BuildGraphPath(expectedSubscription, expectedGroup, graphPath);
        expect(result).toBe(expectedFullPath);
    });
    it('For Operationsl Insights paths OMS API version is used', function () {
        var expectedSubscription = '12345';
        var expectedGroup = 'abc';
        var graphPath = 'providers/microsoft.operationalinsights/components';
        var expectedFullPath = '/subscriptions/{0}/resourcegroups/{1}/{2}?api-version={3}'
            .format(expectedSubscription, expectedGroup, graphPath, ApiVersions.OmsApiVersion);
        var result = BuildGraphPath(expectedSubscription, expectedGroup, graphPath);
        expect(result).toBe(expectedFullPath);
    });
});
//# sourceMappingURL=UrlHelper.spec.js.map