import { Comparison, Operation, FilterHelper } from './Filter';
describe('FilterHelper', function () {
    describe('GetValue', function () {
        it('should return empty string is case of no clauses', function () {
            var filter = new FilterHelper();
            expect(filter.GetValue()).toBe('');
        });
        it('should return one formatted clause correctly', function () {
            var filter = new FilterHelper();
            filter.AppendClause({
                clause: { name: 'name', value: 'value', operator: Comparison.Equal },
                operator: Operation.And
            });
            expect(filter.GetValue()).toBe('$filter=name eq \'value\'');
        });
        it('should return several formatted clause correctly', function () {
            var filter = new FilterHelper();
            filter.AppendClause({
                clause: { name: 'name', value: 'value', operator: Comparison.Equal },
                operator: Operation.And
            });
            filter.AppendClause({
                clause: { name: 'name1', value: 'value2', operator: Comparison.LessThan },
                operator: Operation.Or
            });
            expect(filter.GetValue()).toBe('$filter=name eq \'value\' or name1 lt \'value2\'');
        });
        it('should return one complex formatted clause correctly', function () {
            var filter = new FilterHelper();
            var clauses = [];
            clauses.push({
                clause: { name: 'name', value: 'value', operator: Comparison.Equal },
                operator: Operation.And
            });
            clauses.push({
                clause: { name: 'name1', value: 'value2', operator: Comparison.LessThan },
                operator: Operation.Or
            });
            filter.AppendComplexClause(clauses, Operation.And);
            expect(filter.GetValue()).toBe('$filter=(name eq \'value\' or name1 lt \'value2\')');
        });
        it('should return one simple and one complex formatted clauses correctly', function () {
            var filter = new FilterHelper();
            var clauses = [];
            clauses.push({
                clause: { name: 'name', value: 'value', operator: Comparison.Equal },
                operator: Operation.And
            });
            clauses.push({
                clause: { name: 'name1', value: 'value2', operator: Comparison.LessThan },
                operator: Operation.Or
            });
            filter.AppendComplexClause(clauses, Operation.And);
            filter.AppendClause({
                clause: { name: 'name3', value: 'value3', operator: Comparison.LessThan },
                operator: Operation.Or
            });
            expect(filter.GetValue()).toBe('$filter=(name eq \'value\' or name1 lt \'value2\') or name3 lt \'value3\'');
        });
        it('should return one complex and one simple formatted clauses correctly', function () {
            var filter = new FilterHelper();
            var clauses = [];
            filter.AppendClause({
                clause: { name: 'name3', value: 'value3', operator: Comparison.LessThan },
                operator: Operation.Or
            });
            clauses.push({
                clause: { name: 'name', value: 'value', operator: Comparison.Equal },
                operator: Operation.And
            });
            clauses.push({
                clause: { name: 'name1', value: 'value2', operator: Comparison.LessThan },
                operator: Operation.Or
            });
            filter.AppendComplexClause(clauses, Operation.And);
            expect(filter.GetValue()).toBe('$filter=name3 lt \'value3\' and (  name eq \'value\' or name1 lt \'value2\')');
        });
        it('should return several complex formatted clauses correctly', function () {
            var filter = new FilterHelper();
            var clauses = [];
            clauses.push({
                clause: { name: 'name', value: 'value', operator: Comparison.Equal },
                operator: Operation.And
            });
            clauses.push({
                clause: { name: 'name1', value: 'value2', operator: Comparison.LessThan },
                operator: Operation.Or
            });
            filter.AppendComplexClause(clauses, Operation.And);
            filter.AppendComplexClause(clauses, Operation.Or);
            expect(filter.GetValue())
                .toBe('$filter=(name eq \'value\' or name1 lt \'value2\') or (  name eq \'value\' or name1 lt \'value2\')');
        });
        it('should return several complex and several simple formatted clauses correctly', function () {
            var filter = new FilterHelper();
            var clauses = [];
            clauses.push({
                clause: { name: 'name', value: 'value', operator: Comparison.Equal },
                operator: Operation.And
            });
            clauses.push({
                clause: { name: 'name1', value: 'value2', operator: Comparison.LessThan },
                operator: Operation.Or
            });
            filter.AppendComplexClause(clauses, Operation.And);
            filter.AppendClause({
                clause: { name: 'name3', value: 'value3', operator: Comparison.LessThan },
                operator: Operation.Or
            });
            filter.AppendComplexClause(clauses, Operation.Or);
            expect(filter.GetValue())
                .toBe('$filter=(name eq \'value\' or name1 lt \'value2\') or name3 lt \'value3\' or '
                + '(  name eq \'value\' or name1 lt \'value2\')');
        });
    });
});
//# sourceMappingURL=Filter.spec.js.map