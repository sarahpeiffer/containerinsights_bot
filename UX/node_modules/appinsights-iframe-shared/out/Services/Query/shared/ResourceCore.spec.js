import * as ResourceCore from './ResourceCore';
describe('ResourceIdToResourceInfo', function () {
    it('resource Path missing name returns null', function () {
        var id = '/subscriptions/{id}/resourcegroups/{rg}/providers/microsoft.insights/components';
        expect(ResourceCore.ResourceIdToResourceInfo(id)).toBeNull();
    });
    it('resource Path can return ResourceType when resourceTypeName is not specified', function () {
        var resourceType = 'webtests';
        var id = '/subscriptions/sub_1/resourcegroups/rc_2/providers/microsoft.insights/' + resourceType;
        var result = ResourceCore.ResourceIdToResourceInfo(id, true /*parseResourceGroup*/, false /*parseResourceTypeName*/);
        expect(result).not.toBeNull();
        expect(result.ResourceType).toBe(resourceType);
        expect(result.ResourceGroup).toBe('rc_2');
        expect(result.SubscriptionId).toBe('sub_1');
    });
    it('resource Path can return ResourceType when resourceGroups is not specified and resourceTypeName is not specified', function () {
        var resourceType = 'webtests';
        var id = '/subscriptions/sub_1/providers/microsoft.insights/' + resourceType;
        var result = ResourceCore.ResourceIdToResourceInfo(id, false /*parseResourceGroup*/, false /*parseResourceTypeName*/);
        expect(result).not.toBeNull();
        expect(result.ResourceType).toBe(resourceType);
        expect(result.ResourceGroup).toBe(undefined);
        expect(result.SubscriptionId).toBe('sub_1');
    });
    it('resource Path can return ResourceType when resourceGroups is not specified and resourceTypeName is specified', function () {
        var resourceType = 'webtests';
        var resourceTypeName = 'blah';
        var id = '/subscriptions/sub_1/providers/microsoft.insights/' + resourceType + '/' + resourceTypeName;
        var result = ResourceCore.ResourceIdToResourceInfo(id, false /*parseResourceGroup*/, true /*parseResourceTypeName*/);
        expect(result).not.toBeNull();
        expect(result.ResourceType).toBe(resourceType);
        expect(result.ResourceGroup).toBe(undefined);
        expect(result.SubscriptionId).toBe('sub_1');
        expect(result.Name).toBe(resourceTypeName);
    });
    it('partial resource Path returns null.', function () {
        var id = '/subscriptions/{id}/resourcegroups/{rg}';
        expect(ResourceCore.ResourceIdToResourceInfo(id)).toBeNull();
    });
    it('non-resource path returns null.', function () {
        var id = '/This/Is/Not/At/All/A/Resource/Path/More/Path';
        expect(ResourceCore.ResourceIdToResourceInfo(id)).toBeNull();
    });
    it('correct resource path segments in the wrong order returns null.', function () {
        var id = '/subscriptions/{id}/providers/microsoft.insights/resourcegroups/{rg}/components/{Name}/morepath/';
        expect(ResourceCore.ResourceIdToResourceInfo(id)).toBeNull();
    });
    it('non insights resource path returns null if validate the resource provider.', function () {
        var id = '/subscriptions/{id}/resourceGroups/{rg}/providers/Microsoft.Storage/storageAccounts/{Name}';
        expect(ResourceCore.ResourceIdToResourceInfo(id)).toBeNull();
    });
    it('non insights resource path returns resource info if path is correct and do not validate insights provider.', function () {
        var id = '/subscriptions/{id}/resourceGroups/{rg}/providers/Microsoft.Storage/storageAccounts/{Name}';
        expect(ResourceCore.ResourceIdToResourceInfo(id, true, true, false /*validateIsInsightsResource*/)).not.toBeNull();
    });
    it('resource path is parsed successfully', function () {
        var id = '/Subscriptions/sub_1/resourcegroups/rg_1/providers/microsoft.insights/components/name_1';
        var result = ResourceCore.ResourceIdToResourceInfo(id);
        expect(result).not.toBeNull();
        expect(result.ResourceType).toBe('components');
        expect(result.ResourceGroup).toBe('rg_1');
        expect(result.SubscriptionId).toBe('sub_1');
        expect(result.Name).toBe('name_1');
    });
    it('resource path without beginning slash is parsed successfully', function () {
        var id = 'Subscriptions/sub_1/resourcegroups/rg_1/providers/microsoft.insights/components/name_1';
        var result = ResourceCore.ResourceIdToResourceInfo(id);
        expect(result).not.toBeNull();
        expect(result.ResourceType).toBe('components');
        expect(result.ResourceGroup).toBe('rg_1');
        expect(result.SubscriptionId).toBe('sub_1');
        expect(result.Name).toBe('name_1');
    });
    it('resource path with trailing slash is parsed successfully', function () {
        var id = 'Subscriptions/sub_1/resourcegroups/rg_1/providers/microsoft.insights/components/name_1/';
        var result = ResourceCore.ResourceIdToResourceInfo(id);
        expect(result).not.toBeNull();
        expect(result.ResourceType).toBe('components');
        expect(result.ResourceGroup).toBe('rg_1');
        expect(result.SubscriptionId).toBe('sub_1');
        expect(result.Name).toBe('name_1');
    });
    it('resource path with trailing slash is parsed successfully', function () {
        var id = 'Subscriptions/sub_1/resourcegroups/rg_1/providers/microsoft.insights/components/name_1/morepath';
        var result = ResourceCore.ResourceIdToResourceInfo(id);
        expect(result).not.toBeNull();
        expect(result.ResourceType).toBe('components');
        expect(result.ResourceGroup).toBe('rg_1');
        expect(result.SubscriptionId).toBe('sub_1');
        expect(result.Name).toBe('name_1');
        expect(result.RemainingPathSegments[0]).toBe('morepath');
    });
    it('resource path with extra segments and trailing slash is parsed successfully', function () {
        var id = 'Subscriptions/sub_1/resourcegroups/rg_1/providers/microsoft.insights/components/name_1/morepath/';
        var result = ResourceCore.ResourceIdToResourceInfo(id);
        expect(result).not.toBeNull();
        expect(result.ResourceType).toBe('components');
        expect(result.ResourceGroup).toBe('rg_1');
        expect(result.SubscriptionId).toBe('sub_1');
        expect(result.Name).toBe('name_1');
        expect(result.RemainingPathSegments[0]).toBe('morepath');
    });
});
//# sourceMappingURL=ResourceCore.spec.js.map