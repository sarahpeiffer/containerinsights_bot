import { StringMap } from '../SharedInterfaces';
import { TimeContext } from '..';
export declare enum SnapshotHealthResult {
    Error = -2,
    NotApplicable = -1,
    OK = 0,
    NotInstalled = 1,
    OldVersion = 2,
}
export interface QueryRunner {
    (queryName: string, query: string, timeContext: TimeContext): Promise<any[]>;
}
export declare class SnapshotHealthHelper {
    static readonly nugetLink: string;
    static readonly documentationLink: string;
    static getLatestVersionPromise: Promise<string>;
    /**
     * Run basic analysis to check snapshot service health
     * This method throws exception if an invalid version string is detected.
     * @param appId the app id to issue the query
     * @param queryRunner function to be used to issue KQL query
    */
    static getHealthResult(queryRunner: QueryRunner): Promise<SnapshotHealthResult>;
    /**
     * Get latest version of snapshot collector from nuget.org
     *
     * example result of nuget api:
     * {
     *   "context": {
     *     "data": {
     *       "data": [
     *         {
     *           "version": "1.1.0"
     *         },
     *         ...
     *       ]
     *     }
     *   }
     * }
     */
    static getLatestVersion(): Promise<string>;
    static fetchLatestVersion(): Promise<string>;
    /**
     * Convert the health check result from enum to status message. Return falsy if health result is OK.
     * @param result snapshot health result
     * @param strings localization strings
     * @returns the message to be displayed
     */
    static convertToStatusMessage(result: SnapshotHealthResult, strings: StringMap<string>): string;
    /**
     * Query for whether snapshot is available in this app.
     *
     * Use relative time range so that it hits the cache.
     *
     * @param timeContext time filter
     */
    static getSnapshotAvailabilityQuery(timeContext: TimeContext): string;
    /**
     * Query for the basic information to analyze the health. For now, we query for last 6 hours.
     *
     * Use relative time range so that it hits the cache.
     *
     * @param timeContext time filter
    */
    static getBasicHealthQuery(timeContext?: TimeContext): string;
    /**
     * Check if the version number is PROD or DEV.
     * @param version version string to check
     */
    static isProdVersion(version: string): boolean;
    /**
     * Compare version A and B, where version is in the format of \d+\.\d+\.\d+\.\d+(-[^\.]+)?
     *  return < 0 if A < B
     *  return = 0 if A = B
     *  return > 0 if A > B
     * @param versionA version A
     * @param versionB version B
     */
    static compareVersionDesc(versionA: string, versionB: string): number;
}
