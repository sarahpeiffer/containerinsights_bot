import * as tslib_1 from "tslib";
import { TimeContext, TimeConstants, TimeContextToRelativeKQLTimeRange } from '..';
import axios from 'axios';
export var SnapshotHealthResult;
(function (SnapshotHealthResult) {
    SnapshotHealthResult[SnapshotHealthResult["Error"] = -2] = "Error";
    SnapshotHealthResult[SnapshotHealthResult["NotApplicable"] = -1] = "NotApplicable";
    SnapshotHealthResult[SnapshotHealthResult["OK"] = 0] = "OK";
    SnapshotHealthResult[SnapshotHealthResult["NotInstalled"] = 1] = "NotInstalled";
    SnapshotHealthResult[SnapshotHealthResult["OldVersion"] = 2] = "OldVersion";
})(SnapshotHealthResult || (SnapshotHealthResult = {}));
var SnapshotHealthHelper = /** @class */ (function () {
    function SnapshotHealthHelper() {
    }
    /**
     * Run basic analysis to check snapshot service health
     * This method throws exception if an invalid version string is detected.
     * @param appId the app id to issue the query
     * @param queryRunner function to be used to issue KQL query
    */
    SnapshotHealthHelper.getHealthResult = function (queryRunner) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var latestVersion, timeContext, results, availabilityResult, versionsResult, versions, e_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getLatestVersion()];
                    case 1:
                        latestVersion = _a.sent();
                        if (!latestVersion) {
                            return [2 /*return*/, SnapshotHealthResult.Error];
                        }
                        timeContext = new TimeContext(TimeConstants.hour * 6);
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, Promise.all([
                                queryRunner('SnapshotAvailabilityCheck', this.getSnapshotAvailabilityQuery(timeContext), timeContext),
                                queryRunner('SnapshotHealthCheck', this.getBasicHealthQuery(timeContext), timeContext)
                            ])];
                    case 3:
                        results = _a.sent();
                        availabilityResult = results[0];
                        versionsResult = results[1];
                        if (!versionsResult || !versionsResult.length) {
                            if (!availabilityResult || !availabilityResult.length) {
                                return [2 /*return*/, SnapshotHealthResult.NotApplicable];
                            }
                            return [2 /*return*/, SnapshotHealthResult.NotInstalled];
                        }
                        versions = versionsResult.map(function (v) { return v.Version; })
                            .filter(SnapshotHealthHelper.isProdVersion)
                            .sort(SnapshotHealthHelper.compareVersionDesc);
                        // check if the highest version is the latest one.
                        if (versions.length > 0) {
                            if (SnapshotHealthHelper.compareVersionDesc(versions[0], latestVersion) > 0) {
                                return [2 /*return*/, SnapshotHealthResult.OldVersion];
                            }
                        }
                        return [2 /*return*/, SnapshotHealthResult.OK];
                    case 4:
                        e_1 = _a.sent();
                        return [2 /*return*/, SnapshotHealthResult.Error];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get latest version of snapshot collector from nuget.org
     *
     * example result of nuget api:
     * {
     *   "context": {
     *     "data": {
     *       "data": [
     *         {
     *           "version": "1.1.0"
     *         },
     *         ...
     *       ]
     *     }
     *   }
     * }
     */
    SnapshotHealthHelper.getLatestVersion = function () {
        if (!this.getLatestVersionPromise) {
            this.getLatestVersionPromise = this.fetchLatestVersion();
        }
        return this.getLatestVersionPromise;
    };
    SnapshotHealthHelper.fetchLatestVersion = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var latestVersion, result, e_2;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        latestVersion = null;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, axios.get(this.nugetLink)];
                    case 2:
                        result = _a.sent();
                        if (result.data && result.data.data && result.data.data.length > 0) {
                            latestVersion = result.data.data[0].version;
                        }
                        return [3 /*break*/, 5];
                    case 3:
                        e_2 = _a.sent();
                        console.error(e_2);
                        return [3 /*break*/, 5];
                    case 4: return [2 /*return*/, latestVersion];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Convert the health check result from enum to status message. Return falsy if health result is OK.
     * @param result snapshot health result
     * @param strings localization strings
     * @returns the message to be displayed
     */
    SnapshotHealthHelper.convertToStatusMessage = function (result, strings) {
        switch (result) {
            case SnapshotHealthResult.OldVersion:
                return strings['snapshotHealthVersionTooOld'];
            case SnapshotHealthResult.NotInstalled:
                return strings['snapshotHealthNotInstalled'];
            default:
                return null;
        }
    };
    /**
     * Query for whether snapshot is available in this app.
     *
     * Use relative time range so that it hits the cache.
     *
     * @param timeContext time filter
     */
    SnapshotHealthHelper.getSnapshotAvailabilityQuery = function (timeContext) {
        return "union (exceptions" + TimeContextToRelativeKQLTimeRange(timeContext, true) + "\n        | where sdkVersion startswith 'unhnd:' or sdkVersion startswith 'unobs:'\n            or sdkVersion startswith 'web:' or sdkVersion startswith 'aspnet5f:'\n            or ((sdkVersion startswith 'dotnet:' or sdkVersion startswith 'aspnet5c:') and client_OS startswith 'Windows')\n        | limit 1), (customMetrics" + TimeContextToRelativeKQLTimeRange(timeContext, true) + "\n        | where name == 'HeartbeatState'\n        | where customDimensions.osType startswith 'Win32' or customDimensions.osType startswith 'Windows'\n        | where customDimensions.runtimeFramework startswith '.NET' \n            or customDimensions.runtimeFramework startswith '4.5' \n            or customDimensions.runtimeFramework startswith '4.6'\n            or customDimensions.runtimeFramework startswith '4.7'\n        | limit 1)";
    };
    /**
     * Query for the basic information to analyze the health. For now, we query for last 6 hours.
     *
     * Use relative time range so that it hits the cache.
     *
     * @param timeContext time filter
    */
    SnapshotHealthHelper.getBasicHealthQuery = function (timeContext) {
        if (timeContext === void 0) { timeContext = new TimeContext(TimeConstants.hour * 6, new Date()); }
        return "customEvents" + TimeContextToRelativeKQLTimeRange(timeContext, true) + "\n        | where name == 'AppInsightsSnapshotCollectorLogs' or name == 'AppInsightsSnapshotUploaderLogs' or name == 'UploadSnapshotFinish'\n        | project Version = iif(sdkVersion startswith 'sc:', substring(sdkVersion, 3),\n            iff(sdkVersion startswith 'a_sc:', substring(sdkVersion, 5), application_Version))\n        | summarize by Version";
    };
    /**
     * Check if the version number is PROD or DEV.
     * @param version version string to check
     */
    SnapshotHealthHelper.isProdVersion = function (version) {
        var entities = version.split('.');
        return entities.length > 0 && entities[0] !== '99';
    };
    /**
     * Compare version A and B, where version is in the format of \d+\.\d+\.\d+\.\d+(-[^\.]+)?
     *  return < 0 if A < B
     *  return = 0 if A = B
     *  return > 0 if A > B
     * @param versionA version A
     * @param versionB version B
     */
    SnapshotHealthHelper.compareVersionDesc = function (versionA, versionB) {
        var pureVersionA = versionA.split('-')[0];
        var suffixA = versionA.substr(pureVersionA.length + 1);
        var entitiesA = pureVersionA.split('.');
        var pureVersionB = versionB.split('-')[0];
        var suffixB = versionB.substr(pureVersionB.length + 1);
        var entitiesB = pureVersionB.split('.');
        for (var i = 0; i < 4; i++) {
            var numA = parseInt(entitiesA[i], 10) || 0;
            var numB = parseInt(entitiesB[i], 10) || 0;
            if (numA !== numB) {
                return numB - numA;
            }
        }
        // release version is higher than beta/pre version
        if (!suffixA && suffixB) {
            return -1;
        }
        if (!suffixB && suffixA) {
            return 1;
        }
        return 0;
    };
    SnapshotHealthHelper.nugetLink = 'https://api-v2v3search-1.nuget.org/query?q=packageid:Microsoft.ApplicationInsights.SnapshotCollector';
    SnapshotHealthHelper.documentationLink = 'https://aka.ms/appinsights-snapshot-debugger';
    SnapshotHealthHelper.getLatestVersionPromise = null;
    return SnapshotHealthHelper;
}());
export { SnapshotHealthHelper };
//# sourceMappingURL=SnapshotHealthHelper.js.map