import { SnapshotHealthHelper, SnapshotHealthResult } from './SnapshotHealthHelper';
import { TimeConstants, TimeContext } from '..';
var MockQueryRunner = /** @class */ (function () {
    function MockQueryRunner(availabilityResult, healthResult) {
        this.availabilityResult = availabilityResult;
        this.healthResult = healthResult;
    }
    MockQueryRunner.prototype.foo = function (queryName, query, appId) {
        var _this = this;
        return {
            then: function (cb) { return Promise.resolve(cb(queryName === 'SnapshotAvailabilityCheck' ?
                _this.availabilityResult :
                _this.healthResult)); }
        };
    };
    return MockQueryRunner;
}());
describe('SnapshotHealthHelper', function () {
    describe('getHealthResult', function () {
        var originalGetBasicHealthQuery = SnapshotHealthHelper.getBasicHealthQuery;
        var originalGetSnapshotAvailabilityQuery = SnapshotHealthHelper.getSnapshotAvailabilityQuery;
        var originalGetLatestVersion = SnapshotHealthHelper.getLatestVersion;
        beforeEach(function () {
            SnapshotHealthHelper.getBasicHealthQuery = jasmine.createSpy('getBasicHealthQuery', function () { return ''; }).and.callThrough();
            SnapshotHealthHelper.getSnapshotAvailabilityQuery = jasmine.createSpy('getSnapshotAvailabilityQuery', function () { return ''; })
                .and.callThrough();
            SnapshotHealthHelper.getLatestVersion = function () { return { then: function (cb) { return cb('1.2.0'); } }; };
        });
        afterEach(function () {
            SnapshotHealthHelper.getBasicHealthQuery = originalGetBasicHealthQuery;
            SnapshotHealthHelper.getSnapshotAvailabilityQuery = originalGetSnapshotAvailabilityQuery;
            SnapshotHealthHelper.getLatestVersion = originalGetLatestVersion;
        });
        var timeContext = new TimeContext(TimeConstants.hour * 6);
        it('should return not available if snapshot is not available', function () {
            var runner = new MockQueryRunner([], []);
            var spy = spyOn(runner, 'foo').and.callThrough();
            return SnapshotHealthHelper.getHealthResult(runner.foo.bind(runner)).then(function (result) {
                expect(SnapshotHealthHelper.getSnapshotAvailabilityQuery).toHaveBeenCalledTimes(1);
                expect(SnapshotHealthHelper.getBasicHealthQuery).toHaveBeenCalledTimes(1);
                expect(spy).toHaveBeenCalledTimes(2);
                expect(spy).toHaveBeenCalledWith('SnapshotAvailabilityCheck', '', timeContext);
                expect(spy).toHaveBeenCalledWith('SnapshotHealthCheck', '', timeContext);
                expect(result).toBe(SnapshotHealthResult.NotApplicable);
            });
        });
        it('should return not installed if result is empty', function () {
            var runner = new MockQueryRunner([1], []);
            var spy = spyOn(runner, 'foo').and.callThrough();
            return SnapshotHealthHelper.getHealthResult(runner.foo.bind(runner)).then(function (result) {
                expect(SnapshotHealthHelper.getSnapshotAvailabilityQuery).toHaveBeenCalledTimes(1);
                expect(SnapshotHealthHelper.getBasicHealthQuery).toHaveBeenCalledTimes(1);
                expect(spy).toHaveBeenCalledTimes(2);
                expect(spy).toHaveBeenCalledWith('SnapshotAvailabilityCheck', '', timeContext);
                expect(spy).toHaveBeenCalledWith('SnapshotHealthCheck', '', timeContext);
                expect(result).toBe(SnapshotHealthResult.NotInstalled);
            });
        });
        it('should return version too old if it is running old version', function () {
            var runner = new MockQueryRunner([1], [
                { Version: '0.0.0.0' },
                { Version: '1.0.0.0' }
            ]);
            var spy = spyOn(runner, 'foo').and.callThrough();
            return SnapshotHealthHelper.getHealthResult(runner.foo.bind(runner)).then(function (result) {
                expect(SnapshotHealthHelper.getSnapshotAvailabilityQuery).toHaveBeenCalledTimes(1);
                expect(SnapshotHealthHelper.getBasicHealthQuery).toHaveBeenCalledTimes(1);
                expect(spy).toHaveBeenCalledTimes(2);
                expect(spy).toHaveBeenCalledWith('SnapshotAvailabilityCheck', '', timeContext);
                expect(spy).toHaveBeenCalledWith('SnapshotHealthCheck', '', timeContext);
                expect(result).toBe(SnapshotHealthResult.OldVersion);
            });
        });
        it('should return ok if it is running dev version or newer version', function () {
            var runner = new MockQueryRunner([1], [
                { Version: '99.0.0.0', InstanceName: 'dev-machine' },
                { Version: '98.0.0.0', InstanceName: 'new-machine' }
            ]);
            var spy = spyOn(runner, 'foo').and.callThrough();
            return SnapshotHealthHelper.getHealthResult(runner.foo.bind(runner)).then(function (result) {
                expect(SnapshotHealthHelper.getSnapshotAvailabilityQuery).toHaveBeenCalledTimes(1);
                expect(SnapshotHealthHelper.getBasicHealthQuery).toHaveBeenCalledTimes(1);
                expect(spy).toHaveBeenCalledTimes(2);
                expect(spy).toHaveBeenCalledWith('SnapshotAvailabilityCheck', '', timeContext);
                expect(spy).toHaveBeenCalledWith('SnapshotHealthCheck', '', timeContext);
                expect(result).toBe(SnapshotHealthResult.OK);
            });
        });
    });
    describe('isProdVersion', function () {
        it('should return correct result', function () {
            expect(SnapshotHealthHelper.isProdVersion('1.1')).toBe(true);
            expect(SnapshotHealthHelper.isProdVersion('99.1.1.1')).toBe(false);
            expect(SnapshotHealthHelper.isProdVersion('1.1.1')).toBe(true);
            expect(SnapshotHealthHelper.isProdVersion('98.1.1.2')).toBe(true);
            expect(SnapshotHealthHelper.isProdVersion('1.1.1.2-beta')).toBe(true);
        });
    });
    describe('compareVersion', function () {
        it('should return correct comparison result', function () {
            expect(SnapshotHealthHelper.compareVersionDesc('1', '1.0.0.0')).toBe(0);
            expect(SnapshotHealthHelper.compareVersionDesc('1.1', '1.1.0.0')).toBe(0);
            expect(SnapshotHealthHelper.compareVersionDesc('1.1.1', '1.1.1.0')).toBe(0);
            expect(SnapshotHealthHelper.compareVersionDesc('1.1.1.1', '1.1.1.1')).toBe(0);
            expect(SnapshotHealthHelper.compareVersionDesc('1.1.1.1', '1.1.1.2')).toBeGreaterThan(0);
            expect(SnapshotHealthHelper.compareVersionDesc('1.1.1.1', '1.1.2.1')).toBeGreaterThan(0);
            expect(SnapshotHealthHelper.compareVersionDesc('1.1.1.1', '1.2.1.1')).toBeGreaterThan(0);
            expect(SnapshotHealthHelper.compareVersionDesc('1.1.1.1', '2.0.1.1')).toBeGreaterThan(0);
            expect(SnapshotHealthHelper.compareVersionDesc('1.1.1.2', '1.1.1.1')).toBeLessThan(0);
            expect(SnapshotHealthHelper.compareVersionDesc('1.1.2.1', '1.1.1.1')).toBeLessThan(0);
            expect(SnapshotHealthHelper.compareVersionDesc('1.2.1.1', '1.1.1.1')).toBeLessThan(0);
            expect(SnapshotHealthHelper.compareVersionDesc('2.1.1.1', '1.1.1.1')).toBeLessThan(0);
            expect(SnapshotHealthHelper.compareVersionDesc('2.1.1.1-pre', '1.1.1.1')).toBeLessThan(0);
            expect(SnapshotHealthHelper.compareVersionDesc('2.1.1.1', '1.1.1.1-pre')).toBeLessThan(0);
            expect(SnapshotHealthHelper.compareVersionDesc('2.1.1.1-pre', '1.1.1.1-pre')).toBeLessThan(0);
            expect(SnapshotHealthHelper.compareVersionDesc('1.1.1.1', '1.1.1.1-pre')).toBeLessThan(0);
            expect(SnapshotHealthHelper.compareVersionDesc('1.1.1.1-beta', '1.1.1.1-pre')).toBe(0);
        });
    });
});
//# sourceMappingURL=SnapshotHealthHelper.spec.js.map