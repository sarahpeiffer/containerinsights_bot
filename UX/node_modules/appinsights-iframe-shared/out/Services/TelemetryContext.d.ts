import { StringMap, ITelemetryService } from '../SharedInterfaces';
import { ViewModelMeasurements, PerformanceMeasurement } from '../SharedIFrameMessages';
export declare class TelemetryQueryContext {
    queryName: string;
    batchedQueries: string[];
    issued: PerformanceMeasurement;
    completed: PerformanceMeasurement;
    succeeded: boolean;
    cached: boolean;
    statusText: string;
    statusCode: number;
    constructor(name: string, issued: PerformanceMeasurement);
    hasBatch(name: string): boolean;
}
export declare class TelemetryControlDataSet {
    name: string;
    complete: PerformanceMeasurement;
    isVisible: boolean;
    isBatch: boolean;
    queryName: string;
    constructor(name: string, complete: PerformanceMeasurement, visible: boolean, queryName: string, isBatch: boolean);
}
export declare class TelemetryControlContext {
    controlName: string;
    updateCount: number;
    updateStart: PerformanceMeasurement;
    dataSets: StringMap<TelemetryControlDataSet>;
    constructor(name: string, start: PerformanceMeasurement);
}
export declare class TelemetryOperation {
    static globalMeasurements: ViewModelMeasurements;
    id: string;
    name: string;
    started: PerformanceMeasurement;
    controls: StringMap<TelemetryControlContext>;
    queries: StringMap<TelemetryQueryContext>;
    customProps: any;
    /**
     * Set the measurements for initial load time that include performance measurements from the viewmodel.
     */
    static SetViewModelMeasurements(measurements: ViewModelMeasurements): void;
    constructor(id: string, name: string, started: PerformanceMeasurement);
    getTelemetryProperties(): any;
    getTelemetryMeasurements(): any;
    recordMeasurement(start: number, end: number): number;
}
export declare class TelemetryContext {
    private _operations;
    private _telemetryService;
    constructor(telemetryService: ITelemetryService);
    /**
     * Start a telemetry operation. Once an operation is started, queries and controls can register measurements to be logged until
     * the operation completes (when the last query issued during the operation completes).
     * @param id - Operation ID for the current operation
     * @param name - Name of the operation
     */
    StartOperation(name: string, id: string): void;
    GetOperationName(id: string): string;
    UpdateCustomProps(id: string, props: any): void;
    /**
     * Record a control componentWillUpdate() called. The operation keeps track of when update was called for the first time
     * on each control and how many times update was called during an operation.
     * @param id - Operation ID for the current operation
     * @param partName - Name of the control recording data
     */
    RecordControlUpdated(id: string, partName: string): void;
    /**
     * Record a control updated with data from a particular data set. Data set is defined as results from
     * a query that the control receives as a separate event.
     * @param id - Operation ID for the current operation
     * @param partName - Name of the control recording data
     * @param dataSet - Name of the data set that was updated
     * @param queryName - Name of the query that generated the data set update
     * @param isVisible - Set to true if the data set is currently visible to the user
     */
    RecordDataSetUpdated(id: string, partName: string, dataSet: string, queryName: string, isVisible: boolean, isBatch: boolean): void;
    /**
     * Record a query issued.
     * @param id - Operation ID for the current operation
     * @param queryName - Name of the query
     */
    RecordQueryIssued(id: string, queryName: string): void;
    /**
     * Record a query completed.
     * @param id - Operation ID for the current operation
     * @param queryName - Name of the query
     * @param success - Set to true if the query was successful
     * @param cached - Set to true if the query was retreived from in-memory cache
     * @param status - Status code of the query result
     * @param statusText - Status text of the query result
     */
    RecordQueryComplete(id: string, queryName: string, success: boolean, cached: boolean, status: number, statusText: string, batchedQueries: string[]): void;
    RecordClick(button: string, properties: any): void;
    /**
     * Ends the operation by removing its registration and logging data to App Insights
     * @param id - Operation ID of the current operation
     */
    private EndOperation(id);
}
