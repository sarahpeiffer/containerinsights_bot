import { TelemetryContext, TelemetryOperation, TelemetryControlContext, TelemetryControlDataSet, TelemetryQueryContext } from './TelemetryContext';
import { PerformanceMeasurement } from '../SharedIFrameMessages';
var TelemetryOperationBuilder = /** @class */ (function () {
    function TelemetryOperationBuilder() {
        this.queries = {};
        this.controls = {};
        this.id = 'id';
        this.name = 'name';
        this.start = new PerformanceMeasurement(0, 5);
    }
    TelemetryOperationBuilder.prototype.with3SuccessfulQueriesWhereQ2IsSlowest = function () {
        this.queries['q1'] = new TelemetryQueryContext('q1', new PerformanceMeasurement(5, 10));
        this.queries['q1'].succeeded = true;
        this.queries['q1'].cached = false;
        this.queries['q1'].statusCode = 200;
        this.queries['q1'].statusText = 'OK';
        this.queries['q1'].completed = new PerformanceMeasurement(10, 15);
        this.queries['q2'] = new TelemetryQueryContext('q2', new PerformanceMeasurement(1, 6));
        this.queries['q2'].succeeded = true;
        this.queries['q2'].cached = false;
        this.queries['q2'].statusCode = 200;
        this.queries['q2'].statusText = 'OK';
        this.queries['q2'].completed = new PerformanceMeasurement(15, 20);
        this.queries['q3'] = new TelemetryQueryContext('q3', new PerformanceMeasurement(1, 6));
        this.queries['q3'].succeeded = true;
        this.queries['q3'].cached = false;
        this.queries['q3'].statusCode = 200;
        this.queries['q3'].statusText = 'OK';
        this.queries['q3'].completed = new PerformanceMeasurement(5, 10);
        return this;
    };
    TelemetryOperationBuilder.prototype.with2QueriesWhereQ2IsFailed = function (code, text) {
        this.with3SuccessfulQueriesWhereQ2IsSlowest();
        this.queries['q2'].succeeded = false;
        this.queries['q2'].statusCode = code;
        this.queries['q2'].statusText = text;
        return this;
    };
    TelemetryOperationBuilder.prototype.withAllQueriesFailed = function (code, text) {
        this.with3SuccessfulQueriesWhereQ2IsSlowest();
        this.queries['q1'].succeeded = false;
        this.queries['q1'].statusCode = code;
        this.queries['q2'].statusText = text;
        this.queries['q2'].succeeded = false;
        this.queries['q2'].statusCode = code;
        this.queries['q2'].statusText = text;
        return this;
    };
    TelemetryOperationBuilder.prototype.with2ControlsWhereC2IsSlowest = function () {
        this.controls['c1'] = new TelemetryControlContext('c1', new PerformanceMeasurement(5, 10));
        this.controls['c1'].updateCount = 4;
        this.controls['c1'].dataSets['d1'] = new TelemetryControlDataSet('d1', new PerformanceMeasurement(20, 25), true, 'q1', false);
        this.controls['c1'].dataSets['d2'] = new TelemetryControlDataSet('d2', new PerformanceMeasurement(25, 30), false, 'q2', false);
        this.controls['c2'] = new TelemetryControlContext('c2', new PerformanceMeasurement(5, 10));
        this.controls['c2'].dataSets['d1'] = new TelemetryControlDataSet('d1', new PerformanceMeasurement(30, 35), true, 'q1', false);
        this.controls['c2'].dataSets['d2'] = new TelemetryControlDataSet('d2', new PerformanceMeasurement(1, 3), true, 'q3', false);
        this.controls['c2'].updateCount = 2;
        return this;
    };
    TelemetryOperationBuilder.prototype.with1BatchedControl = function () {
        this.queries['b1'] = new TelemetryQueryContext('b1', new PerformanceMeasurement(1, 6));
        this.queries['b1'].succeeded = true;
        this.queries['b1'].cached = false;
        this.queries['b1'].statusCode = 200;
        this.queries['b1'].statusText = 'OK';
        this.queries['b1'].completed = new PerformanceMeasurement(10, 15);
        this.queries['b1'].batchedQueries = ['batch1', 'batch2'];
        this.queries['q1'] = new TelemetryQueryContext('q1', new PerformanceMeasurement(1, 3));
        this.queries['q1'].succeeded = true;
        this.queries['q1'].cached = false;
        this.queries['q1'].statusCode = 200;
        this.queries['q1'].statusText = 'OK';
        this.queries['q1'].completed = new PerformanceMeasurement(5, 10);
        this.controls['c1'] = new TelemetryControlContext('c1', new PerformanceMeasurement(5, 10));
        this.controls['c1'].updateCount = 4;
        this.controls['c1'].dataSets['d1'] = new TelemetryControlDataSet('d1', new PerformanceMeasurement(20, 25), true, 'batch1', true);
        this.controls['c2'] = new TelemetryControlContext('c2', new PerformanceMeasurement(1, 4));
        this.controls['c2'].updateCount = 2;
        this.controls['c2'].dataSets['d1'] = new TelemetryControlDataSet('d1', new PerformanceMeasurement(28, 30), true, 'q1', false);
        return this;
    };
    TelemetryOperationBuilder.prototype.withAllCachedQueries = function () {
        this.with3SuccessfulQueriesWhereQ2IsSlowest();
        this.queries['q1'].cached = true;
        this.queries['q2'].cached = true;
        this.queries['q3'].cached = true;
        return this;
    };
    TelemetryOperationBuilder.prototype.build = function () {
        var operation = new TelemetryOperation(this.id, this.name, this.start);
        operation.queries = this.queries;
        operation.controls = this.controls;
        return operation;
    };
    return TelemetryOperationBuilder;
}());
describe('TelemetryOperation', function () {
    var builder;
    beforeEach(function () {
        TelemetryOperation.globalMeasurements = null;
        builder = new TelemetryOperationBuilder();
    });
    describe('getTelemetryProperties', function () {
        it('should report slowest query and control', function () {
            var operation = builder.with2ControlsWhereC2IsSlowest().with3SuccessfulQueriesWhereQ2IsSlowest().build();
            var properties = operation.getTelemetryProperties();
            expect(properties.ActionName).toBe('name');
            expect(properties.AllCached).toBe(false);
            expect(properties.OperationId).toBe('id');
            expect(properties.FailedQueries).toBe('');
            expect(properties.LastQuery).toBe('q1', 'It should report slowest visible query');
            expect(properties.LastControl).toBe('c2');
            expect(properties.Status).toBe(200);
            expect(properties.StatusText).toBe('OK');
        });
        it('should report slowest query if batched', function () {
            var operation = builder.with1BatchedControl().build();
            var properties = operation.getTelemetryProperties();
            expect(properties.LastQuery).toBe('b1', 'it should report batched query as slowest');
        });
        it('should report failure if 1 query failed', function () {
            var operation = builder.with2ControlsWhereC2IsSlowest().with2QueriesWhereQ2IsFailed(404, 'Not Found').build();
            var properties = operation.getTelemetryProperties();
            expect(properties.FailedQueries).toBe('q2');
            expect(properties.Status).toBe(404);
            expect(properties.StatusText).toBe('Not Found');
        });
        it('should report failure if all queries failed', function () {
            var operation = builder.with2ControlsWhereC2IsSlowest().withAllQueriesFailed(404, 'Not Found').build();
            var properties = operation.getTelemetryProperties();
            expect(properties.FailedQueries).toBe('q1,q2');
            expect(properties.Status).toBe(404);
            expect(properties.StatusText).toBe('Not Found');
        });
        it('should report all cached if all queries cached', function () {
            var operation = builder.with2ControlsWhereC2IsSlowest().withAllCachedQueries().build();
            var properties = operation.getTelemetryProperties();
            expect(properties.AllCached).toBe(true);
        });
    });
    describe('getTelemetryMeasurements', function () {
        it('should record all control durations', function () {
            var operation = builder.with2ControlsWhereC2IsSlowest().with3SuccessfulQueriesWhereQ2IsSlowest().build();
            var result = operation.getTelemetryMeasurements();
            expect(result.duration_c1_visible).toBe(builder.controls['c1'].dataSets['d1'].complete.perf
                - builder.controls['c1'].updateStart.perf);
            expect(result.duration_c1_total).toBe(builder.controls['c1'].dataSets['d2'].complete.perf
                - builder.controls['c1'].updateStart.perf);
            expect(result.c1_update_count).toBe(builder.controls['c1'].updateCount);
            expect(result.duration_c1_post_query).toBe(builder.controls['c1'].dataSets['d2'].complete.perf -
                builder.queries['q2'].completed.perf);
            expect(result.duration_c2_visible).toBe(builder.controls['c2'].dataSets['d1'].complete.perf
                - builder.controls['c2'].updateStart.perf);
            expect(result.duration_c2_total).toBe(builder.controls['c2'].dataSets['d1'].complete.perf
                - builder.controls['c2'].updateStart.perf);
            expect(result.c2_update_count).toBe(builder.controls['c2'].updateCount);
            expect(result.duration_c2_post_query).toBe(builder.controls['c2'].dataSets['d1'].complete.perf -
                builder.queries['q1'].completed.perf);
        });
        it('should record control duration with batched query', function () {
            var operation = builder.with1BatchedControl().build();
            var result = operation.getTelemetryMeasurements();
            expect(result.duration_c1_post_query).toBe(builder.controls['c1'].dataSets['d1'].complete.perf -
                builder.queries['b1'].completed.perf);
            expect(result.duration_c1_visible).toBe(builder.controls['c1'].dataSets['d1'].complete.perf -
                builder.controls['c1'].updateStart.perf);
            expect(result.duration_c1_total).toBe(builder.controls['c1'].dataSets['d1'].complete.perf -
                builder.controls['c1'].updateStart.perf);
        });
        it('should record all total durations', function () {
            var operation = builder.with2ControlsWhereC2IsSlowest().with3SuccessfulQueriesWhereQ2IsSlowest().build();
            var result = operation.getTelemetryMeasurements();
            expect(result.duration_visible_queries).toBe(builder.queries['q1'].completed.perf
                - builder.queries['q2'].issued.perf, 'it should be time from first query started to last visible query complete');
            expect(result.duration_total_queries).toBe(builder.queries['q2'].completed.perf
                - builder.queries['q2'].issued.perf, 'it should be time from first query started to last query completed');
            expect(result.duration_visible).toBe(builder.controls['c2'].dataSets['d1'].complete.perf
                - builder.start.perf);
            expect(result.duration_total).toBe(builder.controls['c2'].dataSets['d1'].complete.perf
                - builder.start.perf);
            expect(result.duration_start_to_queries).toBe(builder.queries['q2'].issued.perf
                - builder.start.perf, 'it should be time from start to first query started');
            expect(result.duration_visible_post_query).toBe(builder.controls['c2'].dataSets['d1'].complete.perf
                - builder.queries['q1'].completed.perf, 'it should be time from last visible query complete to last control complete');
            expect(result.duration_total_post_query).toBe(builder.controls['c2'].dataSets['d1'].complete.perf
                - builder.queries['q2'].completed.perf, 'it should be time from last query complete to last control complete');
        });
        it('should record global measurements if present', function () {
            var measurements = {
                communicationInitialized: new PerformanceMeasurement(1, 1),
                iframeHead: new PerformanceMeasurement(4, 4),
                partConstructor: new PerformanceMeasurement(0, 0)
            };
            TelemetryOperation.globalMeasurements = measurements;
            var operation = builder.with2ControlsWhereC2IsSlowest().with3SuccessfulQueriesWhereQ2IsSlowest().build();
            var result = operation.getTelemetryMeasurements();
            expect(result.duration_ctor_to_head).toBe(measurements.iframeHead.date
                - measurements.partConstructor.date);
            expect(result.duration_head_to_start).toBe(operation.started.perf
                - measurements.iframeHead.perf);
            expect(result.duration_total).toBe(builder.controls['c2'].dataSets['d1'].complete.date
                - measurements.partConstructor.date);
            expect(result.duration_visible).toBe(builder.controls['c2'].dataSets['d1'].complete.date
                - measurements.partConstructor.date);
            expect(result.duration_ctor_to_comms).toBe(measurements.communicationInitialized.perf
                - measurements.partConstructor.perf);
        });
    });
});
describe('TelemetryContext', function () {
    var logTrace;
    var logEvent;
    var telemetryContext;
    beforeEach(function () {
        var telemetrySvc = {
            LogTrace: function (message, props) { },
            LogEvent: function (message, props, measurements) { }
        };
        logTrace = spyOn(telemetrySvc, 'LogTrace');
        logEvent = spyOn(telemetrySvc, 'LogEvent');
        telemetryContext = new TelemetryContext(telemetrySvc);
    });
    describe('StartOperation', function () {
        it('should log trace when operation started', function () {
            var operationId = 'op1';
            telemetryContext.StartOperation('my op', operationId);
            expect(logTrace).toHaveBeenCalledTimes(1);
            var args = logTrace.calls.mostRecent().args;
            expect(args[0]).toBe('OperationStarted');
            expect(args[1].OperationId).toBe(operationId);
            expect(args[1].ActionName).toBe('my op');
        });
        it('should create operation', function () {
            var operationId = 'op1';
            telemetryContext.StartOperation('my op', operationId);
            var operation = telemetryContext['_operations'][operationId];
            expect(operation instanceof TelemetryOperation).toBe(true);
            expect(operation.id).toBe(operationId);
            expect(operation.name).toBe('my op');
            expect(operation.started.perf).toBeGreaterThan(0);
            expect(operation.started.date).toBeGreaterThan(0);
        });
    });
    describe('RecordControlUpdated', function () {
        it('should set update count if control exists', function () {
            var operationId = 'op1';
            var control = 'my ctrl';
            telemetryContext.StartOperation('my op', operationId);
            telemetryContext['_operations'][operationId].controls[control] = new TelemetryControlContext(control, null);
            telemetryContext.RecordControlUpdated(operationId, control);
            var context = telemetryContext['_operations'][operationId].controls[control];
            expect(context.updateStart).toBeNull();
            expect(context.updateCount).toBe(2);
        });
        it('should initialize control if control doesnt exist', function () {
            var operationId = 'op1';
            var control = 'my ctrl';
            telemetryContext.StartOperation('my op', operationId);
            telemetryContext.RecordControlUpdated(operationId, control);
            var context = telemetryContext['_operations'][operationId].controls[control];
            expect(context.updateStart).not.toBeNull();
            expect(context.updateStart.perf).toBeGreaterThan(0);
            expect(context.updateStart.date).toBeGreaterThan(0);
            expect(context.updateCount).toBe(1);
        });
    });
    describe('RecordClick', function () {
        it('should record click with hotspot name', function () {
            var properties = {
                myprop: 'yay'
            };
            telemetryContext.RecordClick('my button', properties);
            expect(logEvent).toHaveBeenCalledTimes(1);
            var args = logEvent.calls.mostRecent().args;
            expect(args[0]).toBe('Hotspot my button');
            expect(args[1].myprop).toBe('yay');
        });
    });
    describe('RecordDataSetUpdated', function () {
        it('should not throw if control doesnt exist', function () {
            var operationId = 'op1';
            var control = 'my ctrl';
            telemetryContext.StartOperation('my op', operationId);
            telemetryContext.RecordDataSetUpdated(operationId, control, 'ds', 'qname', true, false);
        });
        it('should set data set context if control exists', function () {
            var operationId = 'op1';
            var control = 'my ctrl';
            telemetryContext.StartOperation('my op', operationId);
            telemetryContext.RecordControlUpdated(operationId, control);
            telemetryContext.RecordDataSetUpdated(operationId, control, 'ds', 'qname', true, false);
            var dataSet = telemetryContext['_operations'][operationId].controls[control].dataSets['ds'];
            expect(dataSet instanceof TelemetryControlDataSet).toBe(true);
            expect(dataSet.complete.date).toBeGreaterThan(0);
            expect(dataSet.complete.date).toBeGreaterThan(0);
            expect(dataSet.isVisible).toBe(true);
            expect(dataSet.queryName).toBe('qname');
            expect(dataSet.name).toBe('ds');
        });
    });
    describe('RecordQueryIssued', function () {
        it('should set query context', function () {
            var operationId = 'op1';
            telemetryContext.StartOperation('my op', operationId);
            telemetryContext.RecordQueryIssued(operationId, 'query1');
            var query = telemetryContext['_operations'][operationId].queries['query1'];
            expect(query instanceof TelemetryQueryContext).toBe(true);
            expect(query.queryName).toBe('query1');
            expect(query.issued.date).toBeGreaterThan(0);
            expect(query.issued.perf).toBeGreaterThan(0);
        });
    });
    describe('RecordQueryComplete', function () {
        it('should record query and not end operation if not last query', function () {
            var operationId = 'op1';
            spyOn(telemetryContext, 'EndOperation');
            telemetryContext.StartOperation('my op', operationId);
            telemetryContext.RecordQueryIssued(operationId, 'q1');
            telemetryContext.RecordQueryIssued(operationId, 'q2');
            telemetryContext.RecordQueryComplete(operationId, 'q1', true, false, 200, 'OK', []);
            expect(telemetryContext['EndOperation']).not.toHaveBeenCalled();
            var query = telemetryContext['_operations'][operationId].queries['q1'];
            expect(query.completed.date).toBeGreaterThan(0);
            expect(query.completed.perf).toBeGreaterThan(0);
            expect(query.succeeded).toBe(true);
            expect(query.cached).toBe(false);
            expect(query.statusCode).toBe(200);
            expect(query.statusText).toBe('OK');
        });
        it('should complete operation if last query completed', function () {
            var operationId = 'op1';
            spyOn(telemetryContext, 'EndOperation');
            telemetryContext.StartOperation('my op', operationId);
            telemetryContext.RecordQueryIssued(operationId, 'q1');
            telemetryContext.RecordQueryIssued(operationId, 'q2');
            telemetryContext.RecordQueryComplete(operationId, 'q1', true, false, 200, 'OK', []);
            telemetryContext.RecordQueryComplete(operationId, 'q2', true, false, 200, 'OK', []);
            expect(telemetryContext['EndOperation']).toHaveBeenCalledTimes(1);
        });
    });
    describe('EndOperation', function () {
        it('should not log events if operation doesnt exist', function () {
            spyOn(TelemetryOperation, 'SetViewModelMeasurements');
            var spy = spyOn(window, 'setTimeout');
            telemetryContext['EndOperation']('my op');
            expect(window.setTimeout).toHaveBeenCalledTimes(1);
            var handler = spy.calls.mostRecent().args[0];
            expect(spy.calls.mostRecent().args[1]).toBe(1500);
            handler();
            expect(logEvent).not.toHaveBeenCalled();
            expect(logTrace).not.toHaveBeenCalled();
            expect(TelemetryOperation.SetViewModelMeasurements).not.toHaveBeenCalled();
        });
        it('should log events if operation exists', function () {
            var spy = spyOn(window, 'setTimeout');
            spyOn(TelemetryOperation, 'SetViewModelMeasurements');
            telemetryContext.StartOperation('my op', 'opid');
            var measurements = {};
            var props = {};
            spyOn(telemetryContext['_operations']['opid'], 'getTelemetryMeasurements').and.returnValue(measurements);
            spyOn(telemetryContext['_operations']['opid'], 'getTelemetryProperties').and.returnValue(props);
            telemetryContext['EndOperation']('opid');
            expect(window.setTimeout).toHaveBeenCalledTimes(1);
            var handler = spy.calls.mostRecent().args[0];
            expect(spy.calls.mostRecent().args[1]).toBe(1500);
            handler();
            expect(logEvent).toHaveBeenCalledTimes(1);
            expect(logEvent).toHaveBeenCalledWith('Part load', props, measurements);
            expect(logTrace).toHaveBeenCalledTimes(2);
            var args = logTrace.calls.mostRecent().args;
            expect(args[0]).toBe('OperationEnded');
            expect(args[1].OperationId).toBe('opid');
            expect(args[1].ActionName).toBe('my op');
            expect(TelemetryOperation.SetViewModelMeasurements).toHaveBeenCalledTimes(1);
            expect(TelemetryOperation.SetViewModelMeasurements).toHaveBeenCalledWith(null);
        });
    });
});
//# sourceMappingURL=TelemetryContext.spec.js.map