import { EventCategory } from '../TelemetryConstants';
var TelemetryService = /** @class */ (function () {
    function TelemetryService(instanceId) {
        var _this = this;
        this._additionalProps = {};
        if (appInsights && appInsights.context) {
            appInsights.context.addTelemetryInitializer(function (envelope) {
                var telemetryItem = envelope.data.baseData;
                telemetryItem.properties = telemetryItem.properties || {};
                if (_this._defaultProperties) {
                    extendObject(telemetryItem.properties, _this._defaultProperties);
                }
                if (_this._additionalProps) {
                    extendObject(telemetryItem.properties, _this._additionalProps);
                }
                telemetryItem.properties['IbizaSessionId'] = window.location.hash ?
                    window.location.hash.substr(1, window.location.hash.length - 1) : '';
                telemetryItem.properties['PartInstance'] = instanceId ? instanceId() : null;
                envelope.tags['ai.session.id'] = telemetryItem.properties['IbizaSessionId'];
                envelope.tags['ai.user.accountId'] = telemetryItem.properties['IbizaUserAccountId'];
                envelope.tags['ai.user.authUserId'] = telemetryItem.properties['IbizaAuthenticatedUserId'];
                envelope.tags['ai.user.id'] = telemetryItem.properties['IbizaUserId'];
                return true;
            });
        }
    }
    TelemetryService.Initialize = function (instanceId) {
        TelemetryService._instance = new TelemetryService(instanceId);
    };
    TelemetryService.Instance = function () {
        return TelemetryService._instance;
    };
    TelemetryService.prototype.LogEvent = function (name, customProperties, customMetrics) {
        appInsights.trackEvent(name, customProperties, customMetrics);
    };
    TelemetryService.prototype.LogTrace = function (message, customProperties) {
        appInsights.trackTrace(message, customProperties);
    };
    /**
     * Log a user interaction: a user clicked, tapped, selected, did something.
     * */
    TelemetryService.prototype.LogUserInteraction = function (name, customProperties, customMetrics) {
        customProperties.EventCategory = EventCategory[EventCategory.UserInteraction];
        appInsights.trackEvent(name, customProperties, customMetrics);
    };
    /**
     * Log an infrastructure event
     * */
    TelemetryService.prototype.LogInfrastructureEvent = function (name, customProperties, customMetrics) {
        customProperties.EventCategory = EventCategory[EventCategory.Infrastructure];
        appInsights.trackEvent(name, customProperties, customMetrics);
    };
    TelemetryService.prototype.LogException = function (exception, handledAt, customProperties, customMetrics) {
        var exceptionProperties = {
            Status: '-101',
            StatusText: 'Client Exception',
            ErrorMessage: exception && exception.message ? exception.message : '',
            ErrorObject: exception,
            Error: exception && exception.stack ? exception.stack : '',
            HandledAt: handledAt,
            ContainerType: 'Other'
        };
        customProperties = customProperties || {};
        extendObject(customProperties, exceptionProperties);
        appInsights.trackException(exception, handledAt, customProperties, customMetrics);
    };
    TelemetryService.prototype.AddDefaultProperty = function (key, value) {
        this._additionalProps[key] = value;
    };
    TelemetryService.prototype.Register = function (messageSvc, messageName) {
        return messageSvc.SubscribeMessage(messageName, this.UpdateDefaultProperties.bind(this));
    };
    TelemetryService.prototype.UpdateDefaultProperties = function (message) {
        this._defaultProperties = message;
    };
    return TelemetryService;
}());
export { TelemetryService };
function extendObject(target, source) {
    if (source) {
        for (var key in source) {
            if (!target.hasOwnProperty(key)) {
                target[key] = source[key];
            }
        }
    }
}
//# sourceMappingURL=TelemetryService.js.map