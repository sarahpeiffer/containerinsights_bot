import { TelemetryService } from './TelemetryService';
import { AppInsights } from 'applicationinsights-js';
import 'jasmine';
import { EventCategory } from '../TelemetryConstants';
var TelemetryServiceBuilder = /** @class */ (function () {
    function TelemetryServiceBuilder() {
        this.messageService = {
            SubscribeMessage: function (message, handler) {
                return { Unsubscribe: function () { } };
            },
            PostMessage: function (kind, data, lclWindow) {
            },
            PostMessageWithNoInstanceId: function (kind, data) {
            }
        };
        spyOn(AppInsights, 'trackEvent');
        spyOn(AppInsights, 'trackException');
        spyOn(AppInsights, 'trackTrace');
        spyOn(this.messageService, 'SubscribeMessage');
        AppInsights.context = {
            addTelemetryInitializer: function (arg) {
            }
        };
        spyOn(AppInsights.context, 'addTelemetryInitializer');
    }
    TelemetryServiceBuilder.prototype.withInstanceId = function (id) {
        this.instanceId = id;
        return this;
    };
    TelemetryServiceBuilder.prototype.whereDefaultPropertiesAre = function (strings, returnValue) {
        this.messageService.SubscribeMessage = function (name, fn) {
            fn(strings);
            return returnValue;
        };
        return this;
    };
    TelemetryServiceBuilder.prototype.build = function () {
        var _this = this;
        return new TelemetryService(function () { return _this.instanceId; });
    };
    return TelemetryServiceBuilder;
}());
describe('TelemetryService', function () {
    var builder;
    beforeEach(function () {
        builder = new TelemetryServiceBuilder();
    });
    describe('ctor', function () {
        it('should add telemetry initializer that adds session id and part instance', function () {
            builder.withInstanceId('myinstance').build();
            expect(AppInsights.context.addTelemetryInitializer).toHaveBeenCalledTimes(1);
            var args = AppInsights.context.addTelemetryInitializer.calls.mostRecent().args;
            var item = {
                data: {
                    baseData: {}
                },
                tags: {}
            };
            window.location.hash = '#myhash';
            var result = args[0](item);
            expect(result).toBe(true);
            expect(item.data.baseData.properties['IbizaSessionId']).toBe('myhash');
            expect(item.data.baseData.properties['PartInstance']).toBe('myinstance');
            expect(item.tags['ai.session.id']).toBe('myhash');
        });
        it('should add telemetry initializer that adds default properties', function () {
            var defaultProps = {
                'hello': 'world'
            };
            var additionalProps = {
                'what': 'up'
            };
            var service = builder.withInstanceId('myinstance1').build();
            expect(AppInsights.context.addTelemetryInitializer).toHaveBeenCalledTimes(1);
            var args = AppInsights.context.addTelemetryInitializer.calls.mostRecent().args;
            var item = {
                data: {
                    baseData: {}
                },
                tags: {}
            };
            window.location.hash = '#myhash1';
            service['_defaultProperties'] = defaultProps;
            service['_additionalProps'] = additionalProps;
            var result = args[0](item);
            expect(result).toBe(true);
            expect(item.data.baseData.properties['IbizaSessionId']).toBe('myhash1');
            expect(item.data.baseData.properties['PartInstance']).toBe('myinstance1');
            expect(item.data.baseData.properties['hello']).toBe('world');
            expect(item.data.baseData.properties['what']).toBe('up');
            expect(item.tags['ai.session.id']).toBe('myhash1');
        });
    });
    describe('Register', function () {
        it('should subscribe to correct message name', function () {
            var service = builder.build();
            service.Register(builder.messageService, 'my message');
            var args = builder.messageService.SubscribeMessage.calls.mostRecent().args;
            expect(args[0]).toBe('my message');
        });
    });
    describe('LogEvent', function () {
        it('should log event', function () {
            var customProps = { 'what': 'up' };
            var customMetrics = { 'meaning': 42 };
            var service = builder.build();
            service.Register(builder.messageService, 'message');
            service.LogEvent('my-event', customProps, customMetrics);
            var spy = AppInsights.trackEvent;
            var args = spy.calls.mostRecent().args;
            expect(spy.calls.count()).toBe(1);
            expect(args[0]).toBe('my-event');
            expect(Object.keys(args[1]).length).toBe(1);
            expect(args[1].what).toBe('up');
            expect(Object.keys(args[2]).length).toBe(1);
            expect(args[2].meaning).toBe(42);
        });
    });
    describe('LogUserInteraction', function () {
        it('should log a user interaction', function () {
            var customProps = { 'color': 'blue' };
            var customMetrics = { 'strength': 89 };
            var service = builder.build();
            service.Register(builder.messageService, 'message');
            service.LogUserInteraction('kill-zombie', customProps, customMetrics);
            var spy = AppInsights.trackEvent;
            var args = spy.calls.mostRecent().args;
            expect(spy.calls.count()).toBe(1);
            expect(args[0]).toBe('kill-zombie');
            expect(Object.keys(args[1]).length).toBe(2);
            expect(args[1].color).toBe('blue');
            expect(args[1].EventCategory).toBe(EventCategory[EventCategory.UserInteraction]);
            expect(Object.keys(args[2]).length).toBe(1);
            expect(args[2].strength).toBe(89);
        });
    });
    describe('LogTrace', function () {
        it('should log trace', function () {
            var customProps = { 'what': 'up' };
            var service = builder.build();
            service.Register(builder.messageService, 'message');
            service.LogTrace('my-event', customProps);
            var spy = AppInsights.trackTrace;
            var args = spy.calls.mostRecent().args;
            expect(spy.calls.count()).toBe(1);
            expect(args[0]).toBe('my-event');
            expect(Object.keys(args[1]).length).toBe(1);
            expect(args[1].what).toBe('up');
        });
    });
    describe('LogException', function () {
        it('should not throw if exception is null', function () {
            var defaultProps = { 'hello': 'world' };
            var subscription = {};
            var service = builder.whereDefaultPropertiesAre(defaultProps, subscription).build();
            var result = service.Register(builder.messageService, 'message');
            expect(result).toBe(subscription);
            service.LogException(null);
            var spy = AppInsights.trackException;
            expect(spy.calls.count()).toBe(1);
        });
        it('should log event with custom properties', function () {
            var customProps = { 'what': 'up' };
            var customMetrics = { 'meaning': 42 };
            var service = builder.build();
            var error = new Error('hi world');
            service.Register(builder.messageService, 'message');
            service.LogException(error, 'me', customProps, customMetrics);
            var spy = AppInsights.trackException;
            var args = spy.calls.mostRecent().args;
            expect(spy.calls.count()).toBe(1);
            expect(args[0]).toBe(error);
            expect(args[1]).toBe('me');
            expect(args[2].Status).toBe('-101');
            expect(args[2].StatusText).toBe('Client Exception');
            expect(args[2].ErrorMessage).toBe('hi world');
            expect(args[2].ErrorObject).toBe(error);
            expect(args[2].HandledAt).toBe('me');
            expect(args[2].ContainerType).toBe('Other');
        });
    });
    describe('AddDefaultProperty', function () {
        it('should add additional property', function () {
            var service = builder.build();
            service.AddDefaultProperty('what', 'up');
            expect(service['_additionalProps'].what).toBe('up');
        });
    });
});
//# sourceMappingURL=TelemetryService.spec.js.map