var TestUtilities = /** @class */ (function () {
    function TestUtilities() {
    }
    TestUtilities.Mock = function (constructor, name) {
        var keys = [];
        for (var key in constructor.prototype) {
            if (constructor.prototype[key]) {
                keys.push(key);
            }
        }
        return keys.length > 0 ? jasmine.createSpyObj(name || 'mock', keys) : constructor();
    };
    TestUtilities.FindElements = function (root, filter) {
        // It is allowed to have an array of component as a child.
        // E.g. ParentA = { props: { children: [ childA, [childB, childC]]]}}
        if (Array.isArray(root)) {
            var matchingElements_1 = [];
            root.forEach(function (v) {
                matchingElements_1 = matchingElements_1.concat(TestUtilities.FindElements(v, filter));
            });
            return matchingElements_1;
        }
        if (!root || !root.props) {
            return [];
        }
        try {
            if (filter(root)) {
                return [root];
            }
        }
        catch (e) {
            // swallow all exceptions, we want to keep filters simple and without too many 'if' checks 
        }
        if (Array.isArray(root.props.children)) {
            var matchingElements = [];
            for (var i = 0; i < root.props.children.length; i++) {
                matchingElements = matchingElements.concat(TestUtilities.FindElements(root.props.children[i], filter));
            }
            return matchingElements;
        }
        else {
            return TestUtilities.FindElements(root.props.children, filter);
        }
    };
    TestUtilities.FindSingle = function (root, filter) {
        var elements = TestUtilities.FindElements(root, filter);
        if (!elements || elements.length === 0) {
            return null;
        }
        if (elements.length > 1) {
            throw new Error('found multiple matching elements');
        }
        return elements[0];
    };
    TestUtilities.SetState = function (ps, pp, s) {
        if (typeof s === 'function') {
            var r = s(ps, pp);
            return Object.assign(ps, r);
        }
        else {
            return Object.assign(ps, s);
        }
    };
    return TestUtilities;
}());
export { TestUtilities };
var MockChildNodes = /** @class */ (function () {
    function MockChildNodes(items) {
        this._items = [];
        this._items = items;
    }
    Object.defineProperty(MockChildNodes.prototype, "length", {
        get: function () {
            return this._items.length;
        },
        enumerable: true,
        configurable: true
    });
    MockChildNodes.prototype.item = function (i) {
        return this._items[i];
    };
    return MockChildNodes;
}());
export { MockChildNodes };
//# sourceMappingURL=TestUtilities.js.map