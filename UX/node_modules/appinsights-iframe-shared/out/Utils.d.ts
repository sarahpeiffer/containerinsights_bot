import { StringMap } from './SharedInterfaces';
export declare enum StorageType {
    LocalStorage = 0,
    SessionStorage = 1,
}
export declare class Utils {
    private static _canUseLocalStorage;
    private static _canUseSessionStorage;
    /** Provides a safe way to require localizable strings from within shared components.
     *  Consider specifying a default value if your component is already in use in multiple places,
     *  as users may update IFrameShared for another reason and not notice the new strings for
     *  your component.
     */
    static getString(strings: StringMap<string>, key: string, defaultValue?: string): string;
    static deepEqual(objectA: any, objectB: any, caseInsensitive?: boolean, excludedProps?: string[]): boolean;
    static GetValueOrDefault<T>(stringMap: StringMap<T>, key: string, def: T): T;
    static ArrayPushAll(array: any[], items: any[]): any[];
    /**
     * Node.contains that's safe to use for SVGs in all supported browsers.
     */
    static SvgContains(element: SVGElement, target: SVGElement): boolean;
    static ClearAllChildren(el: Node): void;
    /**
     * Random "Guid" generator. Generates random numbers that resemble GUIDs.
     */
    static RandomGuid(): string;
    static EnumToString(e: Object, selected: any): string;
    /**
     * Gets a value from a local or session storage
     */
    static GetStorage(key: string, storageType?: StorageType): string;
    /**
     * Sets a value in a local or session storage
     */
    static SetStorage(key: string, data: string, storageType?: StorageType): void;
    private static CanUseStorage(storageType?);
    /**
     * Tests storage object (localStorage or sessionStorage) to verify that it is usable
     * More details here: https://mathiasbynens.be/notes/localstorage-pattern
     * @param storageType Type of storage
     * @return {Storage} Returns storage object verified that it is usable
     */
    private static GetVerifiedStorageObject(storageType);
    /**
     * Split a URI and get the scheme and authority. For example, given URL https://bing.com/query?q=dkjf,
     * scheme would be "https://" and authority would be "bing.com"
     * @param uri
     */
    static GetUriSchemeAndAuthority(uri: string): {
        scheme: string;
        authority: string;
    };
    /**
     * Saves content to file with the given name.
     * @param fileName File name
     * @param content File content
     */
    static SaveToFile(fileName: string, content: string): void;
}
