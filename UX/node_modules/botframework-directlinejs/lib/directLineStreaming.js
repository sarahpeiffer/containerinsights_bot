"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DirectLineStreaming = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _BehaviorSubject = require("rxjs/BehaviorSubject");

var _Observable = require("rxjs/Observable");

var BFSE = _interopRequireWildcard(require("botframework-streaming"));

var _crossFetch = _interopRequireDefault(require("cross-fetch"));

var _directLine = require("./directLine");

// In order to keep file size down, only import the parts of rxjs that we use
var DIRECT_LINE_VERSION = 'DirectLine/3.0';
var MAX_RETRY_COUNT = 3;
var refreshTokenLifetime = 30 * 60 * 1000; //const refreshTokenLifetime = 5000;

var timeout = 20 * 1000;
var refreshTokenInterval = refreshTokenLifetime / 2;

var StreamHandler =
/*#__PURE__*/
function () {
  function StreamHandler(s, c$, sq) {
    (0, _classCallCheck2["default"])(this, StreamHandler);
    (0, _defineProperty2["default"])(this, "connectionStatus$", void 0);
    (0, _defineProperty2["default"])(this, "subscriber", void 0);
    (0, _defineProperty2["default"])(this, "shouldQueue", void 0);
    (0, _defineProperty2["default"])(this, "activityQueue", []);
    this.subscriber = s;
    this.connectionStatus$ = c$;
    this.shouldQueue = sq;
  }

  (0, _createClass2["default"])(StreamHandler, [{
    key: "setSubscriber",
    value: function setSubscriber(s) {
      this.subscriber = s;
    }
  }, {
    key: "processRequest",
    value: function () {
      var _processRequest = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(request, logger) {
        var streams, stream0, activitySetJson, activitySet, activity, attachments, stream, attachment, dataUri;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                streams = (0, _toConsumableArray2["default"])(request.streams);
                stream0 = streams.shift();
                _context.next = 4;
                return stream0.readAsString();

              case 4:
                activitySetJson = _context.sent;
                activitySet = JSON.parse(activitySetJson);

                if (!(activitySet.activities.length !== 1)) {
                  _context.next = 9;
                  break;
                }

                // Only one activity is expected in a set in streaming
                this.subscriber.error(new Error('there should be exactly one activity'));
                return _context.abrupt("return", BFSE.StreamingResponse.create(500));

              case 9:
                activity = activitySet.activities[0];

                if (!(streams.length > 0)) {
                  _context.next = 21;
                  break;
                }

                attachments = (0, _toConsumableArray2["default"])(activity.attachments);

              case 12:
                if (!(stream = streams.shift())) {
                  _context.next = 20;
                  break;
                }

                _context.next = 15;
                return stream.readAsString();

              case 15:
                attachment = _context.sent;
                dataUri = "data:text/plain;base64," + attachment;
                attachments.push({
                  contentType: stream.contentType,
                  contentUrl: dataUri
                });
                _context.next = 12;
                break;

              case 20:
                activity.attachments = attachments;

              case 21:
                if (this.shouldQueue()) {
                  this.activityQueue.push(activity);
                } else {
                  this.subscriber.next(activity);
                }

                return _context.abrupt("return", BFSE.StreamingResponse.create(200));

              case 23:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function processRequest(_x, _x2) {
        return _processRequest.apply(this, arguments);
      }

      return processRequest;
    }()
  }, {
    key: "flush",
    value: function flush() {
      var _this = this;

      this.connectionStatus$.subscribe(function (cs) {});
      this.activityQueue.forEach(function (a) {
        return _this.subscriber.next(a);
      });
      this.activityQueue = [];
    }
  }]);
  return StreamHandler;
}();

var DirectLineStreaming =
/*#__PURE__*/
function () {
  function DirectLineStreaming(options) {
    var _this2 = this;

    (0, _classCallCheck2["default"])(this, DirectLineStreaming);
    (0, _defineProperty2["default"])(this, "connectionStatus$", new _BehaviorSubject.BehaviorSubject(_directLine.ConnectionStatus.Uninitialized));
    (0, _defineProperty2["default"])(this, "activity$", void 0);
    (0, _defineProperty2["default"])(this, "activitySubscriber", void 0);
    (0, _defineProperty2["default"])(this, "theStreamHandler", void 0);
    (0, _defineProperty2["default"])(this, "domain", void 0);
    (0, _defineProperty2["default"])(this, "conversationId", void 0);
    (0, _defineProperty2["default"])(this, "token", void 0);
    (0, _defineProperty2["default"])(this, "streamConnection", void 0);
    (0, _defineProperty2["default"])(this, "queueActivities", void 0);
    (0, _defineProperty2["default"])(this, "_botAgent", '');
    this.token = options.token;
    this.refreshToken();
    this.domain = options.domain;

    if (options.conversationId) {
      this.conversationId = options.conversationId;
    }

    this._botAgent = this.getBotAgent(options.botAgent);
    this.queueActivities = true;
    this.activity$ = _Observable.Observable.create(
    /*#__PURE__*/
    function () {
      var _ref = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2(subscriber) {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _this2.activitySubscriber = subscriber;
                _this2.theStreamHandler = new StreamHandler(subscriber, _this2.connectionStatus$, function () {
                  return _this2.queueActivities;
                });

                _this2.connectWithRetryAsync();

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x3) {
        return _ref.apply(this, arguments);
      };
    }()).share();
  }

  (0, _createClass2["default"])(DirectLineStreaming, [{
    key: "reconnect",
    value: function reconnect(_ref2) {
      var conversationId = _ref2.conversationId,
          token = _ref2.token;
      this.conversationId = conversationId;
      this.token = token;
      this.connectAsync();
    }
  }, {
    key: "end",
    value: function end() {
      this.connectionStatus$.next(_directLine.ConnectionStatus.Ended);
      this.streamConnection.disconnect();
    }
  }, {
    key: "commonHeaders",
    value: function commonHeaders() {
      return {
        "Authorization": "Bearer ".concat(this.token),
        "x-ms-bot-agent": this._botAgent
      };
    }
  }, {
    key: "getBotAgent",
    value: function getBotAgent() {
      var customAgent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var clientAgent = 'directlineStreaming';

      if (customAgent) {
        clientAgent += "; ".concat(customAgent);
      }

      return "".concat(DIRECT_LINE_VERSION, " (").concat(clientAgent, ")");
    }
  }, {
    key: "refreshToken",
    value: function () {
      var _refreshToken = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee3() {
        var firstCall,
            retryCount,
            numberOfAttempts,
            res,
            _ref3,
            token,
            _args3 = arguments;

        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                firstCall = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : true;
                retryCount = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : 0;
                _context3.next = 4;
                return this.waitUntilOnline();

              case 4:
                numberOfAttempts = 0;

              case 5:
                if (!(numberOfAttempts < MAX_RETRY_COUNT)) {
                  _context3.next = 30;
                  break;
                }

                numberOfAttempts++;
                _context3.next = 9;
                return new Promise(function (r) {
                  return setTimeout(r, refreshTokenInterval);
                });

              case 9:
                _context3.prev = 9;
                _context3.next = 12;
                return (0, _crossFetch["default"])("".concat(this.domain, "/tokens/refresh"), {
                  method: "POST",
                  headers: this.commonHeaders()
                });

              case 12:
                res = _context3.sent;

                if (!res.ok) {
                  _context3.next = 22;
                  break;
                }

                numberOfAttempts = 0;
                _context3.next = 17;
                return res.json();

              case 17:
                _ref3 = _context3.sent;
                token = _ref3.token;
                this.token = token;
                _context3.next = 23;
                break;

              case 22:
                if (res.status === 403 || res.status === 403) {
                  console.error("Fatal error while refreshing the token: ".concat(res.status, " ").concat(res.statusText));
                  this.streamConnection.disconnect();
                } else {
                  console.warn("Refresh attempt #".concat(numberOfAttempts, " failed: ").concat(res.status, " ").concat(res.statusText));
                }

              case 23:
                _context3.next = 28;
                break;

              case 25:
                _context3.prev = 25;
                _context3.t0 = _context3["catch"](9);
                console.warn("Refresh attempt #".concat(numberOfAttempts, " threw an exception: ").concat(_context3.t0));

              case 28:
                _context3.next = 5;
                break;

              case 30:
                console.error("Retries exhausted");
                this.streamConnection.disconnect();

              case 32:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[9, 25]]);
      }));

      function refreshToken() {
        return _refreshToken.apply(this, arguments);
      }

      return refreshToken;
    }()
  }, {
    key: "postActivity",
    value: function postActivity(activity) {
      var _this3 = this;

      if (activity.type === "message" && activity.attachments && activity.attachments.length > 0) {
        return this.postMessageWithAttachments(activity);
      }

      var resp$ = _Observable.Observable.create(
      /*#__PURE__*/
      function () {
        var _ref4 = (0, _asyncToGenerator2["default"])(
        /*#__PURE__*/
        _regenerator["default"].mark(function _callee4(subscriber) {
          var request, resp, numberOfStreams, idString, _JSON$parse, id;

          return _regenerator["default"].wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  request = BFSE.StreamingRequest.create('POST', '/v3/directline/conversations/' + _this3.conversationId + '/activities');
                  request.setBody(JSON.stringify(activity));
                  _context4.next = 4;
                  return _this3.streamConnection.send(request);

                case 4:
                  resp = _context4.sent;
                  _context4.prev = 5;

                  if (!(resp.statusCode !== 200)) {
                    _context4.next = 8;
                    break;
                  }

                  throw new Error("PostActivity returned " + resp.statusCode);

                case 8:
                  numberOfStreams = resp.streams.length;

                  if (!(numberOfStreams !== 1)) {
                    _context4.next = 11;
                    break;
                  }

                  throw new Error("Expected one stream but got " + numberOfStreams);

                case 11:
                  _context4.next = 13;
                  return resp.streams[0].readAsString();

                case 13:
                  idString = _context4.sent;
                  _JSON$parse = JSON.parse(idString), id = _JSON$parse.Id;
                  return _context4.abrupt("return", subscriber.next(id));

                case 18:
                  _context4.prev = 18;
                  _context4.t0 = _context4["catch"](5);
                  // If there is a network issue then its handled by
                  // the disconnectionHandler. Everything else can
                  // be retried
                  console.warn(_context4.t0);

                  _this3.streamConnection.disconnect();

                  return _context4.abrupt("return", subscriber.error(_context4.t0));

                case 23:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, null, [[5, 18]]);
        }));

        return function (_x4) {
          return _ref4.apply(this, arguments);
        };
      }());

      return resp$;
    }
  }, {
    key: "postMessageWithAttachments",
    value: function postMessageWithAttachments(message) {
      var _this4 = this;

      var attachments = message.attachments,
          messageWithoutAttachments = (0, _objectWithoutProperties2["default"])(message, ["attachments"]);
      return _Observable.Observable.create(function (subscriber) {
        var httpContentList = [];
        (0, _asyncToGenerator2["default"])(
        /*#__PURE__*/
        _regenerator["default"].mark(function _callee6() {
          var arrayBuffers, url, request, activityStream, resp, _ref8, id;

          return _regenerator["default"].wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _context6.prev = 0;
                  _context6.next = 3;
                  return Promise.all(attachments.map(
                  /*#__PURE__*/
                  function () {
                    var _ref6 = (0, _asyncToGenerator2["default"])(
                    /*#__PURE__*/
                    _regenerator["default"].mark(function _callee5(attachment) {
                      var media, res;
                      return _regenerator["default"].wrap(function _callee5$(_context5) {
                        while (1) {
                          switch (_context5.prev = _context5.next) {
                            case 0:
                              media = attachment;
                              _context5.next = 3;
                              return (0, _crossFetch["default"])(media.contentUrl);

                            case 3:
                              res = _context5.sent;

                              if (!res.ok) {
                                _context5.next = 12;
                                break;
                              }

                              _context5.next = 7;
                              return res.arrayBuffer();

                            case 7:
                              _context5.t0 = _context5.sent;
                              _context5.t1 = media;
                              return _context5.abrupt("return", {
                                arrayBuffer: _context5.t0,
                                media: _context5.t1
                              });

                            case 12:
                              throw new Error('...');

                            case 13:
                            case "end":
                              return _context5.stop();
                          }
                        }
                      }, _callee5);
                    }));

                    return function (_x5) {
                      return _ref6.apply(this, arguments);
                    };
                  }()));

                case 3:
                  arrayBuffers = _context6.sent;
                  arrayBuffers.forEach(function (_ref7) {
                    var arrayBuffer = _ref7.arrayBuffer,
                        media = _ref7.media;
                    var buffer = new Buffer(arrayBuffer);
                    console.log(buffer);
                    var stream = new BFSE.SubscribableStream();
                    stream.write(buffer);
                    var httpContent = new BFSE.HttpContent({
                      type: media.contentType,
                      contentLength: buffer.length
                    }, stream);
                    httpContentList.push(httpContent);
                  });
                  url = "/v3/directline/conversations/".concat(_this4.conversationId, "/users/").concat(messageWithoutAttachments.from.id, "/upload");
                  request = BFSE.StreamingRequest.create('PUT', url);
                  activityStream = new BFSE.SubscribableStream();
                  activityStream.write(JSON.stringify(messageWithoutAttachments), 'utf-8');
                  request.addStream(new BFSE.HttpContent({
                    type: "application/vnd.microsoft.activity",
                    contentLength: activityStream.length
                  }, activityStream));
                  httpContentList.forEach(function (e) {
                    return request.addStream(e);
                  });
                  _context6.next = 13;
                  return _this4.streamConnection.send(request);

                case 13:
                  resp = _context6.sent;

                  if (!(resp.streams && resp.streams.length !== 1)) {
                    _context6.next = 18;
                    break;
                  }

                  subscriber.error(new Error("Invalid stream count ".concat(resp.streams.length)));
                  _context6.next = 23;
                  break;

                case 18:
                  _context6.next = 20;
                  return resp.streams[0].readAsJson();

                case 20:
                  _ref8 = _context6.sent;
                  id = _ref8.Id;
                  subscriber.next(id);

                case 23:
                  _context6.next = 28;
                  break;

                case 25:
                  _context6.prev = 25;
                  _context6.t0 = _context6["catch"](0);
                  subscriber.error(_context6.t0);

                case 28:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, null, [[0, 25]]);
        }))();
      });
    }
  }, {
    key: "waitUntilOnline",
    value: function () {
      var _waitUntilOnline = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee7() {
        var _this5 = this;

        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                return _context7.abrupt("return", new Promise(function (resolve, reject) {
                  _this5.connectionStatus$.subscribe(function (cs) {
                    if (cs === _directLine.ConnectionStatus.Online) return resolve();
                  }, function (e) {
                    return reject(e);
                  });
                }));

              case 1:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      function waitUntilOnline() {
        return _waitUntilOnline.apply(this, arguments);
      }

      return waitUntilOnline;
    }()
  }, {
    key: "connectAsync",
    value: function () {
      var _connectAsync = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee9() {
        var _this6 = this;

        var re, params, urlSearchParams, wsUrl;
        return _regenerator["default"].wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                re = new RegExp('^http(s?)');

                if (re.test(this.domain)) {
                  _context9.next = 3;
                  break;
                }

                throw "Domain must begin with http or https";

              case 3:
                params = {
                  token: this.token
                };
                if (this.conversationId) params['conversationId'] = this.conversationId;
                urlSearchParams = new URLSearchParams(params).toString();
                wsUrl = "".concat(this.domain.replace(re, 'ws$1'), "/conversations/connect?").concat(urlSearchParams);
                return _context9.abrupt("return", new Promise(
                /*#__PURE__*/
                function () {
                  var _ref9 = (0, _asyncToGenerator2["default"])(
                  /*#__PURE__*/
                  _regenerator["default"].mark(function _callee8(resolve, reject) {
                    var request, response, responseString, conversation;
                    return _regenerator["default"].wrap(function _callee8$(_context8) {
                      while (1) {
                        switch (_context8.prev = _context8.next) {
                          case 0:
                            _context8.prev = 0;
                            _this6.streamConnection = new BFSE.WebSocketClient({
                              url: wsUrl,
                              requestHandler: _this6.theStreamHandler,
                              disconnectionHandler: function disconnectionHandler(e) {
                                return resolve(e);
                              }
                            });
                            _this6.queueActivities = true;
                            _context8.next = 5;
                            return _this6.streamConnection.connect();

                          case 5:
                            request = BFSE.StreamingRequest.create('POST', '/v3/directline/conversations');
                            _context8.next = 8;
                            return _this6.streamConnection.send(request);

                          case 8:
                            response = _context8.sent;

                            if (!(response.statusCode !== 200)) {
                              _context8.next = 11;
                              break;
                            }

                            throw new Error("Connection response code " + response.statusCode);

                          case 11:
                            if (!(response.streams.length !== 1)) {
                              _context8.next = 13;
                              break;
                            }

                            throw new Error("Expected 1 stream but got " + response.streams.length);

                          case 13:
                            _context8.next = 15;
                            return response.streams[0].readAsString();

                          case 15:
                            responseString = _context8.sent;
                            conversation = JSON.parse(responseString);
                            _this6.conversationId = conversation.conversationId;

                            _this6.connectionStatus$.next(_directLine.ConnectionStatus.Online); // Wait until DL consumers have had a chance to be notified
                            // of the connection status change.


                            _context8.next = 21;
                            return _this6.waitUntilOnline();

                          case 21:
                            _this6.theStreamHandler.flush();

                            _this6.queueActivities = false;
                            _context8.next = 28;
                            break;

                          case 25:
                            _context8.prev = 25;
                            _context8.t0 = _context8["catch"](0);
                            reject(_context8.t0);

                          case 28:
                          case "end":
                            return _context8.stop();
                        }
                      }
                    }, _callee8, null, [[0, 25]]);
                  }));

                  return function (_x6, _x7) {
                    return _ref9.apply(this, arguments);
                  };
                }()));

              case 8:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function connectAsync() {
        return _connectAsync.apply(this, arguments);
      }

      return connectAsync;
    }()
  }, {
    key: "connectWithRetryAsync",
    value: function () {
      var _connectWithRetryAsync = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee10() {
        var _this7 = this;

        var numRetries, start, res;
        return _regenerator["default"].wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                numRetries = MAX_RETRY_COUNT;

              case 1:
                if (!(numRetries > 0)) {
                  _context10.next = 23;
                  break;
                }

                numRetries--;
                start = Date.now();
                _context10.prev = 4;
                this.connectionStatus$.next(_directLine.ConnectionStatus.Connecting);
                _context10.next = 8;
                return this.connectAsync();

              case 8:
                res = _context10.sent;
                console.warn("Retrying connection ".concat(res));

                if (!(60000 < Date.now() - start)) {
                  _context10.next = 13;
                  break;
                }

                // reset the retry counter and retry immediately
                // if the connection lasted for more than a minute
                numRetries = MAX_RETRY_COUNT;
                return _context10.abrupt("continue", 1);

              case 13:
                _context10.next = 19;
                break;

              case 15:
                _context10.prev = 15;
                _context10.t0 = _context10["catch"](4);
                console.error("Failed to connect ".concat(_context10.t0));
                throw _context10.t0;

              case 19:
                _context10.next = 21;
                return new Promise(function (r) {
                  return setTimeout(r, _this7.getRetryDelay());
                });

              case 21:
                _context10.next = 1;
                break;

              case 23:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this, [[4, 15]]);
      }));

      function connectWithRetryAsync() {
        return _connectWithRetryAsync.apply(this, arguments);
      }

      return connectWithRetryAsync;
    }() // Returns the delay duration in milliseconds

  }, {
    key: "getRetryDelay",
    value: function getRetryDelay() {
      return Math.floor(3000 + Math.random() * 12000);
    }
  }]);
  return DirectLineStreaming;
}();

exports.DirectLineStreaming = DirectLineStreaming;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,